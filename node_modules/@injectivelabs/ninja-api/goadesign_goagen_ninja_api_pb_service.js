// package: ninja_api
// file: goadesign_goagen_ninja_api.proto

var goadesign_goagen_ninja_api_pb = require("./goadesign_goagen_ninja_api_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var NinjaAPI = (function () {
  function NinjaAPI() {}
  NinjaAPI.serviceName = "ninja_api.NinjaAPI";
  return NinjaAPI;
}());

NinjaAPI.GetVaults = {
  methodName: "GetVaults",
  service: NinjaAPI,
  requestStream: false,
  responseStream: false,
  requestType: goadesign_goagen_ninja_api_pb.GetVaultsRequest,
  responseType: goadesign_goagen_ninja_api_pb.GetVaultsResponse
};

NinjaAPI.GetVault = {
  methodName: "GetVault",
  service: NinjaAPI,
  requestStream: false,
  responseStream: false,
  requestType: goadesign_goagen_ninja_api_pb.GetVaultRequest,
  responseType: goadesign_goagen_ninja_api_pb.GetVaultResponse
};

NinjaAPI.LPTokenPriceChart = {
  methodName: "LPTokenPriceChart",
  service: NinjaAPI,
  requestStream: false,
  responseStream: false,
  requestType: goadesign_goagen_ninja_api_pb.LPTokenPriceChartRequest,
  responseType: goadesign_goagen_ninja_api_pb.LPTokenPriceChartResponse
};

NinjaAPI.TVLChart = {
  methodName: "TVLChart",
  service: NinjaAPI,
  requestStream: false,
  responseStream: false,
  requestType: goadesign_goagen_ninja_api_pb.TVLChartRequest,
  responseType: goadesign_goagen_ninja_api_pb.TVLChartResponse
};

NinjaAPI.VaultsByHolderAddress = {
  methodName: "VaultsByHolderAddress",
  service: NinjaAPI,
  requestStream: false,
  responseStream: false,
  requestType: goadesign_goagen_ninja_api_pb.VaultsByHolderAddressRequest,
  responseType: goadesign_goagen_ninja_api_pb.VaultsByHolderAddressResponse
};

NinjaAPI.LPHolders = {
  methodName: "LPHolders",
  service: NinjaAPI,
  requestStream: false,
  responseStream: false,
  requestType: goadesign_goagen_ninja_api_pb.LPHoldersRequest,
  responseType: goadesign_goagen_ninja_api_pb.LPHoldersResponse
};

NinjaAPI.Portfolio = {
  methodName: "Portfolio",
  service: NinjaAPI,
  requestStream: false,
  responseStream: false,
  requestType: goadesign_goagen_ninja_api_pb.PortfolioRequest,
  responseType: goadesign_goagen_ninja_api_pb.PortfolioResponse
};

NinjaAPI.Leaderboard = {
  methodName: "Leaderboard",
  service: NinjaAPI,
  requestStream: false,
  responseStream: false,
  requestType: goadesign_goagen_ninja_api_pb.LeaderboardRequest,
  responseType: goadesign_goagen_ninja_api_pb.LeaderboardResponse
};

exports.NinjaAPI = NinjaAPI;

function NinjaAPIClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

NinjaAPIClient.prototype.getVaults = function getVaults(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NinjaAPI.GetVaults, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NinjaAPIClient.prototype.getVault = function getVault(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NinjaAPI.GetVault, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NinjaAPIClient.prototype.lPTokenPriceChart = function lPTokenPriceChart(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NinjaAPI.LPTokenPriceChart, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NinjaAPIClient.prototype.tVLChart = function tVLChart(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NinjaAPI.TVLChart, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NinjaAPIClient.prototype.vaultsByHolderAddress = function vaultsByHolderAddress(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NinjaAPI.VaultsByHolderAddress, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NinjaAPIClient.prototype.lPHolders = function lPHolders(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NinjaAPI.LPHolders, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NinjaAPIClient.prototype.portfolio = function portfolio(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NinjaAPI.Portfolio, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NinjaAPIClient.prototype.leaderboard = function leaderboard(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NinjaAPI.Leaderboard, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.NinjaAPIClient = NinjaAPIClient;

