/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export interface Params {
  /** Set the status to active to indicate that contracts can be executed in begin blocker. */
  isExecutionEnabled: boolean;
  /** Maximum aggregate total gas to be used for the contract executions in the BeginBlocker. */
  maxBeginBlockTotalGas: string;
  /** the maximum gas limit each individual contract can consume in the BeginBlocker. */
  maxContractGasLimit: string;
  /** min_gas_price defines the minimum gas price the contracts must pay to be executed in the BeginBlocker. */
  minGasPrice: string;
}

export interface RegisteredContract {
  /** limit of gas per BB execution */
  gasLimit: string;
  /** gas price that contract is willing to pay for execution in BeginBlocker */
  gasPrice: string;
  /** is contract currently active */
  isExecutable: boolean;
  /** code_id that is allowed to be executed (to prevent malicious updates) - if nil/0 any code_id can be executed */
  codeId: string;
  /** optional - admin addr that is allowed to update contract data */
  adminAddress: string;
}

function createBaseParams(): Params {
  return { isExecutionEnabled: false, maxBeginBlockTotalGas: "0", maxContractGasLimit: "0", minGasPrice: "0" };
}

export const Params = {
  encode(message: Params, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.isExecutionEnabled === true) {
      writer.uint32(8).bool(message.isExecutionEnabled);
    }
    if (message.maxBeginBlockTotalGas !== "0") {
      writer.uint32(16).uint64(message.maxBeginBlockTotalGas);
    }
    if (message.maxContractGasLimit !== "0") {
      writer.uint32(24).uint64(message.maxContractGasLimit);
    }
    if (message.minGasPrice !== "0") {
      writer.uint32(32).uint64(message.minGasPrice);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.isExecutionEnabled = reader.bool();
          break;
        case 2:
          message.maxBeginBlockTotalGas = longToString(reader.uint64() as Long);
          break;
        case 3:
          message.maxContractGasLimit = longToString(reader.uint64() as Long);
          break;
        case 4:
          message.minGasPrice = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      isExecutionEnabled: isSet(object.isExecutionEnabled) ? Boolean(object.isExecutionEnabled) : false,
      maxBeginBlockTotalGas: isSet(object.maxBeginBlockTotalGas) ? String(object.maxBeginBlockTotalGas) : "0",
      maxContractGasLimit: isSet(object.maxContractGasLimit) ? String(object.maxContractGasLimit) : "0",
      minGasPrice: isSet(object.minGasPrice) ? String(object.minGasPrice) : "0",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    message.isExecutionEnabled !== undefined && (obj.isExecutionEnabled = message.isExecutionEnabled);
    message.maxBeginBlockTotalGas !== undefined && (obj.maxBeginBlockTotalGas = message.maxBeginBlockTotalGas);
    message.maxContractGasLimit !== undefined && (obj.maxContractGasLimit = message.maxContractGasLimit);
    message.minGasPrice !== undefined && (obj.minGasPrice = message.minGasPrice);
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.isExecutionEnabled = object.isExecutionEnabled ?? false;
    message.maxBeginBlockTotalGas = object.maxBeginBlockTotalGas ?? "0";
    message.maxContractGasLimit = object.maxContractGasLimit ?? "0";
    message.minGasPrice = object.minGasPrice ?? "0";
    return message;
  },
};

function createBaseRegisteredContract(): RegisteredContract {
  return { gasLimit: "0", gasPrice: "0", isExecutable: false, codeId: "0", adminAddress: "" };
}

export const RegisteredContract = {
  encode(message: RegisteredContract, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.gasLimit !== "0") {
      writer.uint32(8).uint64(message.gasLimit);
    }
    if (message.gasPrice !== "0") {
      writer.uint32(16).uint64(message.gasPrice);
    }
    if (message.isExecutable === true) {
      writer.uint32(24).bool(message.isExecutable);
    }
    if (message.codeId !== "0") {
      writer.uint32(32).uint64(message.codeId);
    }
    if (message.adminAddress !== "") {
      writer.uint32(42).string(message.adminAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegisteredContract {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisteredContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.gasLimit = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.gasPrice = longToString(reader.uint64() as Long);
          break;
        case 3:
          message.isExecutable = reader.bool();
          break;
        case 4:
          message.codeId = longToString(reader.uint64() as Long);
          break;
        case 5:
          message.adminAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RegisteredContract {
    return {
      gasLimit: isSet(object.gasLimit) ? String(object.gasLimit) : "0",
      gasPrice: isSet(object.gasPrice) ? String(object.gasPrice) : "0",
      isExecutable: isSet(object.isExecutable) ? Boolean(object.isExecutable) : false,
      codeId: isSet(object.codeId) ? String(object.codeId) : "0",
      adminAddress: isSet(object.adminAddress) ? String(object.adminAddress) : "",
    };
  },

  toJSON(message: RegisteredContract): unknown {
    const obj: any = {};
    message.gasLimit !== undefined && (obj.gasLimit = message.gasLimit);
    message.gasPrice !== undefined && (obj.gasPrice = message.gasPrice);
    message.isExecutable !== undefined && (obj.isExecutable = message.isExecutable);
    message.codeId !== undefined && (obj.codeId = message.codeId);
    message.adminAddress !== undefined && (obj.adminAddress = message.adminAddress);
    return obj;
  },

  create(base?: DeepPartial<RegisteredContract>): RegisteredContract {
    return RegisteredContract.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<RegisteredContract>): RegisteredContract {
    const message = createBaseRegisteredContract();
    message.gasLimit = object.gasLimit ?? "0";
    message.gasPrice = object.gasPrice ?? "0";
    message.isExecutable = object.isExecutable ?? false;
    message.codeId = object.codeId ?? "0";
    message.adminAddress = object.adminAddress ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
