/* eslint-disable */
import { grpc } from "@injectivelabs/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";

/** MsgExecuteContractCompat submits the given message data to a smart contract, compatible with EIP712 */
export interface MsgExecuteContractCompat {
  /** Sender is the that actor that signed the messages */
  sender: string;
  /** Contract is the address of the smart contract */
  contract: string;
  /** Msg json encoded message to be passed to the contract */
  msg: string;
  /** Funds coins that are transferred to the contract on execution */
  funds: string;
}

/** MsgExecuteContractCompatResponse returns execution result data. */
export interface MsgExecuteContractCompatResponse {
  /** Data contains bytes to returned from the contract */
  data: Uint8Array;
}

export interface MsgUpdateContract {
  sender: string;
  /** Unique Identifier for contract instance to be registered. */
  contractAddress: string;
  /** Maximum gas to be used for the smart contract execution. */
  gasLimit: string;
  /** gas price to be used for the smart contract execution. */
  gasPrice: string;
  /** optional - admin account that will be allowed to perform any changes */
  adminAddress: string;
}

export interface MsgUpdateContractResponse {
}

export interface MsgActivateContract {
  sender: string;
  /** Unique Identifier for contract instance to be activated. */
  contractAddress: string;
}

export interface MsgActivateContractResponse {
}

export interface MsgDeactivateContract {
  sender: string;
  /** Unique Identifier for contract instance to be deactivated. */
  contractAddress: string;
}

export interface MsgDeactivateContractResponse {
}

function createBaseMsgExecuteContractCompat(): MsgExecuteContractCompat {
  return { sender: "", contract: "", msg: "", funds: "" };
}

export const MsgExecuteContractCompat = {
  encode(message: MsgExecuteContractCompat, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.contract !== "") {
      writer.uint32(18).string(message.contract);
    }
    if (message.msg !== "") {
      writer.uint32(26).string(message.msg);
    }
    if (message.funds !== "") {
      writer.uint32(34).string(message.funds);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgExecuteContractCompat {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgExecuteContractCompat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.contract = reader.string();
          break;
        case 3:
          message.msg = reader.string();
          break;
        case 4:
          message.funds = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgExecuteContractCompat {
    return {
      sender: isSet(object.sender) ? String(object.sender) : "",
      contract: isSet(object.contract) ? String(object.contract) : "",
      msg: isSet(object.msg) ? String(object.msg) : "",
      funds: isSet(object.funds) ? String(object.funds) : "",
    };
  },

  toJSON(message: MsgExecuteContractCompat): unknown {
    const obj: any = {};
    message.sender !== undefined && (obj.sender = message.sender);
    message.contract !== undefined && (obj.contract = message.contract);
    message.msg !== undefined && (obj.msg = message.msg);
    message.funds !== undefined && (obj.funds = message.funds);
    return obj;
  },

  create(base?: DeepPartial<MsgExecuteContractCompat>): MsgExecuteContractCompat {
    return MsgExecuteContractCompat.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<MsgExecuteContractCompat>): MsgExecuteContractCompat {
    const message = createBaseMsgExecuteContractCompat();
    message.sender = object.sender ?? "";
    message.contract = object.contract ?? "";
    message.msg = object.msg ?? "";
    message.funds = object.funds ?? "";
    return message;
  },
};

function createBaseMsgExecuteContractCompatResponse(): MsgExecuteContractCompatResponse {
  return { data: new Uint8Array() };
}

export const MsgExecuteContractCompatResponse = {
  encode(message: MsgExecuteContractCompatResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgExecuteContractCompatResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgExecuteContractCompatResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.data = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgExecuteContractCompatResponse {
    return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array() };
  },

  toJSON(message: MsgExecuteContractCompatResponse): unknown {
    const obj: any = {};
    message.data !== undefined &&
      (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
    return obj;
  },

  create(base?: DeepPartial<MsgExecuteContractCompatResponse>): MsgExecuteContractCompatResponse {
    return MsgExecuteContractCompatResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<MsgExecuteContractCompatResponse>): MsgExecuteContractCompatResponse {
    const message = createBaseMsgExecuteContractCompatResponse();
    message.data = object.data ?? new Uint8Array();
    return message;
  },
};

function createBaseMsgUpdateContract(): MsgUpdateContract {
  return { sender: "", contractAddress: "", gasLimit: "0", gasPrice: "0", adminAddress: "" };
}

export const MsgUpdateContract = {
  encode(message: MsgUpdateContract, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.contractAddress !== "") {
      writer.uint32(18).string(message.contractAddress);
    }
    if (message.gasLimit !== "0") {
      writer.uint32(24).uint64(message.gasLimit);
    }
    if (message.gasPrice !== "0") {
      writer.uint32(32).uint64(message.gasPrice);
    }
    if (message.adminAddress !== "") {
      writer.uint32(42).string(message.adminAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateContract {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.contractAddress = reader.string();
          break;
        case 3:
          message.gasLimit = longToString(reader.uint64() as Long);
          break;
        case 4:
          message.gasPrice = longToString(reader.uint64() as Long);
          break;
        case 5:
          message.adminAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateContract {
    return {
      sender: isSet(object.sender) ? String(object.sender) : "",
      contractAddress: isSet(object.contractAddress) ? String(object.contractAddress) : "",
      gasLimit: isSet(object.gasLimit) ? String(object.gasLimit) : "0",
      gasPrice: isSet(object.gasPrice) ? String(object.gasPrice) : "0",
      adminAddress: isSet(object.adminAddress) ? String(object.adminAddress) : "",
    };
  },

  toJSON(message: MsgUpdateContract): unknown {
    const obj: any = {};
    message.sender !== undefined && (obj.sender = message.sender);
    message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
    message.gasLimit !== undefined && (obj.gasLimit = message.gasLimit);
    message.gasPrice !== undefined && (obj.gasPrice = message.gasPrice);
    message.adminAddress !== undefined && (obj.adminAddress = message.adminAddress);
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateContract>): MsgUpdateContract {
    return MsgUpdateContract.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<MsgUpdateContract>): MsgUpdateContract {
    const message = createBaseMsgUpdateContract();
    message.sender = object.sender ?? "";
    message.contractAddress = object.contractAddress ?? "";
    message.gasLimit = object.gasLimit ?? "0";
    message.gasPrice = object.gasPrice ?? "0";
    message.adminAddress = object.adminAddress ?? "";
    return message;
  },
};

function createBaseMsgUpdateContractResponse(): MsgUpdateContractResponse {
  return {};
}

export const MsgUpdateContractResponse = {
  encode(_: MsgUpdateContractResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateContractResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateContractResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateContractResponse {
    return {};
  },

  toJSON(_: MsgUpdateContractResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateContractResponse>): MsgUpdateContractResponse {
    return MsgUpdateContractResponse.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<MsgUpdateContractResponse>): MsgUpdateContractResponse {
    const message = createBaseMsgUpdateContractResponse();
    return message;
  },
};

function createBaseMsgActivateContract(): MsgActivateContract {
  return { sender: "", contractAddress: "" };
}

export const MsgActivateContract = {
  encode(message: MsgActivateContract, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.contractAddress !== "") {
      writer.uint32(18).string(message.contractAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgActivateContract {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgActivateContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.contractAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgActivateContract {
    return {
      sender: isSet(object.sender) ? String(object.sender) : "",
      contractAddress: isSet(object.contractAddress) ? String(object.contractAddress) : "",
    };
  },

  toJSON(message: MsgActivateContract): unknown {
    const obj: any = {};
    message.sender !== undefined && (obj.sender = message.sender);
    message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
    return obj;
  },

  create(base?: DeepPartial<MsgActivateContract>): MsgActivateContract {
    return MsgActivateContract.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<MsgActivateContract>): MsgActivateContract {
    const message = createBaseMsgActivateContract();
    message.sender = object.sender ?? "";
    message.contractAddress = object.contractAddress ?? "";
    return message;
  },
};

function createBaseMsgActivateContractResponse(): MsgActivateContractResponse {
  return {};
}

export const MsgActivateContractResponse = {
  encode(_: MsgActivateContractResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgActivateContractResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgActivateContractResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): MsgActivateContractResponse {
    return {};
  },

  toJSON(_: MsgActivateContractResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgActivateContractResponse>): MsgActivateContractResponse {
    return MsgActivateContractResponse.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<MsgActivateContractResponse>): MsgActivateContractResponse {
    const message = createBaseMsgActivateContractResponse();
    return message;
  },
};

function createBaseMsgDeactivateContract(): MsgDeactivateContract {
  return { sender: "", contractAddress: "" };
}

export const MsgDeactivateContract = {
  encode(message: MsgDeactivateContract, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.contractAddress !== "") {
      writer.uint32(18).string(message.contractAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDeactivateContract {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeactivateContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.contractAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgDeactivateContract {
    return {
      sender: isSet(object.sender) ? String(object.sender) : "",
      contractAddress: isSet(object.contractAddress) ? String(object.contractAddress) : "",
    };
  },

  toJSON(message: MsgDeactivateContract): unknown {
    const obj: any = {};
    message.sender !== undefined && (obj.sender = message.sender);
    message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
    return obj;
  },

  create(base?: DeepPartial<MsgDeactivateContract>): MsgDeactivateContract {
    return MsgDeactivateContract.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<MsgDeactivateContract>): MsgDeactivateContract {
    const message = createBaseMsgDeactivateContract();
    message.sender = object.sender ?? "";
    message.contractAddress = object.contractAddress ?? "";
    return message;
  },
};

function createBaseMsgDeactivateContractResponse(): MsgDeactivateContractResponse {
  return {};
}

export const MsgDeactivateContractResponse = {
  encode(_: MsgDeactivateContractResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDeactivateContractResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeactivateContractResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): MsgDeactivateContractResponse {
    return {};
  },

  toJSON(_: MsgDeactivateContractResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgDeactivateContractResponse>): MsgDeactivateContractResponse {
    return MsgDeactivateContractResponse.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<MsgDeactivateContractResponse>): MsgDeactivateContractResponse {
    const message = createBaseMsgDeactivateContractResponse();
    return message;
  },
};

/** Msg defines the wasmx Msg service. */
export interface Msg {
  UpdateRegistryContractParams(
    request: DeepPartial<MsgUpdateContract>,
    metadata?: grpc.Metadata,
  ): Promise<MsgUpdateContractResponse>;
  ActivateRegistryContract(
    request: DeepPartial<MsgActivateContract>,
    metadata?: grpc.Metadata,
  ): Promise<MsgActivateContractResponse>;
  DeactivateRegistryContract(
    request: DeepPartial<MsgDeactivateContract>,
    metadata?: grpc.Metadata,
  ): Promise<MsgDeactivateContractResponse>;
  ExecuteContractCompat(
    request: DeepPartial<MsgExecuteContractCompat>,
    metadata?: grpc.Metadata,
  ): Promise<MsgExecuteContractCompatResponse>;
}

export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.UpdateRegistryContractParams = this.UpdateRegistryContractParams.bind(this);
    this.ActivateRegistryContract = this.ActivateRegistryContract.bind(this);
    this.DeactivateRegistryContract = this.DeactivateRegistryContract.bind(this);
    this.ExecuteContractCompat = this.ExecuteContractCompat.bind(this);
  }

  UpdateRegistryContractParams(
    request: DeepPartial<MsgUpdateContract>,
    metadata?: grpc.Metadata,
  ): Promise<MsgUpdateContractResponse> {
    return this.rpc.unary(MsgUpdateRegistryContractParamsDesc, MsgUpdateContract.fromPartial(request), metadata);
  }

  ActivateRegistryContract(
    request: DeepPartial<MsgActivateContract>,
    metadata?: grpc.Metadata,
  ): Promise<MsgActivateContractResponse> {
    return this.rpc.unary(MsgActivateRegistryContractDesc, MsgActivateContract.fromPartial(request), metadata);
  }

  DeactivateRegistryContract(
    request: DeepPartial<MsgDeactivateContract>,
    metadata?: grpc.Metadata,
  ): Promise<MsgDeactivateContractResponse> {
    return this.rpc.unary(MsgDeactivateRegistryContractDesc, MsgDeactivateContract.fromPartial(request), metadata);
  }

  ExecuteContractCompat(
    request: DeepPartial<MsgExecuteContractCompat>,
    metadata?: grpc.Metadata,
  ): Promise<MsgExecuteContractCompatResponse> {
    return this.rpc.unary(MsgExecuteContractCompatDesc, MsgExecuteContractCompat.fromPartial(request), metadata);
  }
}

export const MsgDesc = { serviceName: "injective.wasmx.v1.Msg" };

export const MsgUpdateRegistryContractParamsDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateRegistryContractParams",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgUpdateContract.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgUpdateContractResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgActivateRegistryContractDesc: UnaryMethodDefinitionish = {
  methodName: "ActivateRegistryContract",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgActivateContract.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgActivateContractResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgDeactivateRegistryContractDesc: UnaryMethodDefinitionish = {
  methodName: "DeactivateRegistryContract",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgDeactivateContract.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgDeactivateContractResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgExecuteContractCompatDesc: UnaryMethodDefinitionish = {
  methodName: "ExecuteContractCompat",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgExecuteContractCompat.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgExecuteContractCompatResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata || this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if (tsProtoGlobalThis.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if (tsProtoGlobalThis.Buffer) {
    return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends tsProtoGlobalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
