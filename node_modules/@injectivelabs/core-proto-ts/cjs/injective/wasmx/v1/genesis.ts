/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Params, RegisteredContract } from "./wasmx";

export interface RegisteredContractWithAddress {
  address: string;
  registeredContract: RegisteredContract | undefined;
}

/** GenesisState defines the wasmx module's genesis state. */
export interface GenesisState {
  /** params defines all the parameters of related to wasmx. */
  params:
    | Params
    | undefined;
  /** registered_contracts is an array containing the genesis registered contracts */
  registeredContracts: RegisteredContractWithAddress[];
}

function createBaseRegisteredContractWithAddress(): RegisteredContractWithAddress {
  return { address: "", registeredContract: undefined };
}

export const RegisteredContractWithAddress = {
  encode(message: RegisteredContractWithAddress, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.registeredContract !== undefined) {
      RegisteredContract.encode(message.registeredContract, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegisteredContractWithAddress {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisteredContractWithAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;
        case 2:
          message.registeredContract = RegisteredContract.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RegisteredContractWithAddress {
    return {
      address: isSet(object.address) ? String(object.address) : "",
      registeredContract: isSet(object.registeredContract)
        ? RegisteredContract.fromJSON(object.registeredContract)
        : undefined,
    };
  },

  toJSON(message: RegisteredContractWithAddress): unknown {
    const obj: any = {};
    message.address !== undefined && (obj.address = message.address);
    message.registeredContract !== undefined && (obj.registeredContract = message.registeredContract
      ? RegisteredContract.toJSON(message.registeredContract)
      : undefined);
    return obj;
  },

  create(base?: DeepPartial<RegisteredContractWithAddress>): RegisteredContractWithAddress {
    return RegisteredContractWithAddress.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<RegisteredContractWithAddress>): RegisteredContractWithAddress {
    const message = createBaseRegisteredContractWithAddress();
    message.address = object.address ?? "";
    message.registeredContract = (object.registeredContract !== undefined && object.registeredContract !== null)
      ? RegisteredContract.fromPartial(object.registeredContract)
      : undefined;
    return message;
  },
};

function createBaseGenesisState(): GenesisState {
  return { params: undefined, registeredContracts: [] };
}

export const GenesisState = {
  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.registeredContracts) {
      RegisteredContractWithAddress.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.params = Params.decode(reader, reader.uint32());
          break;
        case 2:
          message.registeredContracts.push(RegisteredContractWithAddress.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      registeredContracts: Array.isArray(object?.registeredContracts)
        ? object.registeredContracts.map((e: any) => RegisteredContractWithAddress.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    message.params !== undefined && (obj.params = message.params ? Params.toJSON(message.params) : undefined);
    if (message.registeredContracts) {
      obj.registeredContracts = message.registeredContracts.map((e) =>
        e ? RegisteredContractWithAddress.toJSON(e) : undefined
      );
    } else {
      obj.registeredContracts = [];
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.registeredContracts =
      object.registeredContracts?.map((e) => RegisteredContractWithAddress.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
