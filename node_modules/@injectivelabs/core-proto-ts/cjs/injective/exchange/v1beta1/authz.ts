/* eslint-disable */
import _m0 from "protobufjs/minimal";

/** spot authz messages */
export interface CreateSpotLimitOrderAuthz {
  subaccountId: string;
  marketIds: string[];
}

export interface CreateSpotMarketOrderAuthz {
  subaccountId: string;
  marketIds: string[];
}

export interface BatchCreateSpotLimitOrdersAuthz {
  subaccountId: string;
  marketIds: string[];
}

export interface CancelSpotOrderAuthz {
  subaccountId: string;
  marketIds: string[];
}

export interface BatchCancelSpotOrdersAuthz {
  subaccountId: string;
  marketIds: string[];
}

/** derivative authz messages */
export interface CreateDerivativeLimitOrderAuthz {
  subaccountId: string;
  marketIds: string[];
}

export interface CreateDerivativeMarketOrderAuthz {
  subaccountId: string;
  marketIds: string[];
}

export interface BatchCreateDerivativeLimitOrdersAuthz {
  subaccountId: string;
  marketIds: string[];
}

export interface CancelDerivativeOrderAuthz {
  subaccountId: string;
  marketIds: string[];
}

export interface BatchCancelDerivativeOrdersAuthz {
  subaccountId: string;
  marketIds: string[];
}

/** common authz message used in both spot & derivative markets */
export interface BatchUpdateOrdersAuthz {
  subaccountId: string;
  spotMarkets: string[];
  derivativeMarkets: string[];
}

function createBaseCreateSpotLimitOrderAuthz(): CreateSpotLimitOrderAuthz {
  return { subaccountId: "", marketIds: [] };
}

export const CreateSpotLimitOrderAuthz = {
  encode(message: CreateSpotLimitOrderAuthz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subaccountId !== "") {
      writer.uint32(10).string(message.subaccountId);
    }
    for (const v of message.marketIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateSpotLimitOrderAuthz {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSpotLimitOrderAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.subaccountId = reader.string();
          break;
        case 2:
          message.marketIds.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): CreateSpotLimitOrderAuthz {
    return {
      subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
      marketIds: Array.isArray(object?.marketIds) ? object.marketIds.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: CreateSpotLimitOrderAuthz): unknown {
    const obj: any = {};
    message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
    if (message.marketIds) {
      obj.marketIds = message.marketIds.map((e) => e);
    } else {
      obj.marketIds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSpotLimitOrderAuthz>): CreateSpotLimitOrderAuthz {
    return CreateSpotLimitOrderAuthz.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<CreateSpotLimitOrderAuthz>): CreateSpotLimitOrderAuthz {
    const message = createBaseCreateSpotLimitOrderAuthz();
    message.subaccountId = object.subaccountId ?? "";
    message.marketIds = object.marketIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateSpotMarketOrderAuthz(): CreateSpotMarketOrderAuthz {
  return { subaccountId: "", marketIds: [] };
}

export const CreateSpotMarketOrderAuthz = {
  encode(message: CreateSpotMarketOrderAuthz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subaccountId !== "") {
      writer.uint32(10).string(message.subaccountId);
    }
    for (const v of message.marketIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateSpotMarketOrderAuthz {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSpotMarketOrderAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.subaccountId = reader.string();
          break;
        case 2:
          message.marketIds.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): CreateSpotMarketOrderAuthz {
    return {
      subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
      marketIds: Array.isArray(object?.marketIds) ? object.marketIds.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: CreateSpotMarketOrderAuthz): unknown {
    const obj: any = {};
    message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
    if (message.marketIds) {
      obj.marketIds = message.marketIds.map((e) => e);
    } else {
      obj.marketIds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSpotMarketOrderAuthz>): CreateSpotMarketOrderAuthz {
    return CreateSpotMarketOrderAuthz.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<CreateSpotMarketOrderAuthz>): CreateSpotMarketOrderAuthz {
    const message = createBaseCreateSpotMarketOrderAuthz();
    message.subaccountId = object.subaccountId ?? "";
    message.marketIds = object.marketIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchCreateSpotLimitOrdersAuthz(): BatchCreateSpotLimitOrdersAuthz {
  return { subaccountId: "", marketIds: [] };
}

export const BatchCreateSpotLimitOrdersAuthz = {
  encode(message: BatchCreateSpotLimitOrdersAuthz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subaccountId !== "") {
      writer.uint32(10).string(message.subaccountId);
    }
    for (const v of message.marketIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BatchCreateSpotLimitOrdersAuthz {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateSpotLimitOrdersAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.subaccountId = reader.string();
          break;
        case 2:
          message.marketIds.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): BatchCreateSpotLimitOrdersAuthz {
    return {
      subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
      marketIds: Array.isArray(object?.marketIds) ? object.marketIds.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: BatchCreateSpotLimitOrdersAuthz): unknown {
    const obj: any = {};
    message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
    if (message.marketIds) {
      obj.marketIds = message.marketIds.map((e) => e);
    } else {
      obj.marketIds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateSpotLimitOrdersAuthz>): BatchCreateSpotLimitOrdersAuthz {
    return BatchCreateSpotLimitOrdersAuthz.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<BatchCreateSpotLimitOrdersAuthz>): BatchCreateSpotLimitOrdersAuthz {
    const message = createBaseBatchCreateSpotLimitOrdersAuthz();
    message.subaccountId = object.subaccountId ?? "";
    message.marketIds = object.marketIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseCancelSpotOrderAuthz(): CancelSpotOrderAuthz {
  return { subaccountId: "", marketIds: [] };
}

export const CancelSpotOrderAuthz = {
  encode(message: CancelSpotOrderAuthz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subaccountId !== "") {
      writer.uint32(10).string(message.subaccountId);
    }
    for (const v of message.marketIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CancelSpotOrderAuthz {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelSpotOrderAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.subaccountId = reader.string();
          break;
        case 2:
          message.marketIds.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): CancelSpotOrderAuthz {
    return {
      subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
      marketIds: Array.isArray(object?.marketIds) ? object.marketIds.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: CancelSpotOrderAuthz): unknown {
    const obj: any = {};
    message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
    if (message.marketIds) {
      obj.marketIds = message.marketIds.map((e) => e);
    } else {
      obj.marketIds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<CancelSpotOrderAuthz>): CancelSpotOrderAuthz {
    return CancelSpotOrderAuthz.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<CancelSpotOrderAuthz>): CancelSpotOrderAuthz {
    const message = createBaseCancelSpotOrderAuthz();
    message.subaccountId = object.subaccountId ?? "";
    message.marketIds = object.marketIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchCancelSpotOrdersAuthz(): BatchCancelSpotOrdersAuthz {
  return { subaccountId: "", marketIds: [] };
}

export const BatchCancelSpotOrdersAuthz = {
  encode(message: BatchCancelSpotOrdersAuthz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subaccountId !== "") {
      writer.uint32(10).string(message.subaccountId);
    }
    for (const v of message.marketIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BatchCancelSpotOrdersAuthz {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCancelSpotOrdersAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.subaccountId = reader.string();
          break;
        case 2:
          message.marketIds.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): BatchCancelSpotOrdersAuthz {
    return {
      subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
      marketIds: Array.isArray(object?.marketIds) ? object.marketIds.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: BatchCancelSpotOrdersAuthz): unknown {
    const obj: any = {};
    message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
    if (message.marketIds) {
      obj.marketIds = message.marketIds.map((e) => e);
    } else {
      obj.marketIds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCancelSpotOrdersAuthz>): BatchCancelSpotOrdersAuthz {
    return BatchCancelSpotOrdersAuthz.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<BatchCancelSpotOrdersAuthz>): BatchCancelSpotOrdersAuthz {
    const message = createBaseBatchCancelSpotOrdersAuthz();
    message.subaccountId = object.subaccountId ?? "";
    message.marketIds = object.marketIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateDerivativeLimitOrderAuthz(): CreateDerivativeLimitOrderAuthz {
  return { subaccountId: "", marketIds: [] };
}

export const CreateDerivativeLimitOrderAuthz = {
  encode(message: CreateDerivativeLimitOrderAuthz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subaccountId !== "") {
      writer.uint32(10).string(message.subaccountId);
    }
    for (const v of message.marketIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateDerivativeLimitOrderAuthz {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDerivativeLimitOrderAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.subaccountId = reader.string();
          break;
        case 2:
          message.marketIds.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): CreateDerivativeLimitOrderAuthz {
    return {
      subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
      marketIds: Array.isArray(object?.marketIds) ? object.marketIds.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: CreateDerivativeLimitOrderAuthz): unknown {
    const obj: any = {};
    message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
    if (message.marketIds) {
      obj.marketIds = message.marketIds.map((e) => e);
    } else {
      obj.marketIds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDerivativeLimitOrderAuthz>): CreateDerivativeLimitOrderAuthz {
    return CreateDerivativeLimitOrderAuthz.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<CreateDerivativeLimitOrderAuthz>): CreateDerivativeLimitOrderAuthz {
    const message = createBaseCreateDerivativeLimitOrderAuthz();
    message.subaccountId = object.subaccountId ?? "";
    message.marketIds = object.marketIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateDerivativeMarketOrderAuthz(): CreateDerivativeMarketOrderAuthz {
  return { subaccountId: "", marketIds: [] };
}

export const CreateDerivativeMarketOrderAuthz = {
  encode(message: CreateDerivativeMarketOrderAuthz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subaccountId !== "") {
      writer.uint32(10).string(message.subaccountId);
    }
    for (const v of message.marketIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateDerivativeMarketOrderAuthz {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDerivativeMarketOrderAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.subaccountId = reader.string();
          break;
        case 2:
          message.marketIds.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): CreateDerivativeMarketOrderAuthz {
    return {
      subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
      marketIds: Array.isArray(object?.marketIds) ? object.marketIds.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: CreateDerivativeMarketOrderAuthz): unknown {
    const obj: any = {};
    message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
    if (message.marketIds) {
      obj.marketIds = message.marketIds.map((e) => e);
    } else {
      obj.marketIds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDerivativeMarketOrderAuthz>): CreateDerivativeMarketOrderAuthz {
    return CreateDerivativeMarketOrderAuthz.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<CreateDerivativeMarketOrderAuthz>): CreateDerivativeMarketOrderAuthz {
    const message = createBaseCreateDerivativeMarketOrderAuthz();
    message.subaccountId = object.subaccountId ?? "";
    message.marketIds = object.marketIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchCreateDerivativeLimitOrdersAuthz(): BatchCreateDerivativeLimitOrdersAuthz {
  return { subaccountId: "", marketIds: [] };
}

export const BatchCreateDerivativeLimitOrdersAuthz = {
  encode(message: BatchCreateDerivativeLimitOrdersAuthz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subaccountId !== "") {
      writer.uint32(10).string(message.subaccountId);
    }
    for (const v of message.marketIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BatchCreateDerivativeLimitOrdersAuthz {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateDerivativeLimitOrdersAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.subaccountId = reader.string();
          break;
        case 2:
          message.marketIds.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): BatchCreateDerivativeLimitOrdersAuthz {
    return {
      subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
      marketIds: Array.isArray(object?.marketIds) ? object.marketIds.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: BatchCreateDerivativeLimitOrdersAuthz): unknown {
    const obj: any = {};
    message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
    if (message.marketIds) {
      obj.marketIds = message.marketIds.map((e) => e);
    } else {
      obj.marketIds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateDerivativeLimitOrdersAuthz>): BatchCreateDerivativeLimitOrdersAuthz {
    return BatchCreateDerivativeLimitOrdersAuthz.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<BatchCreateDerivativeLimitOrdersAuthz>): BatchCreateDerivativeLimitOrdersAuthz {
    const message = createBaseBatchCreateDerivativeLimitOrdersAuthz();
    message.subaccountId = object.subaccountId ?? "";
    message.marketIds = object.marketIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseCancelDerivativeOrderAuthz(): CancelDerivativeOrderAuthz {
  return { subaccountId: "", marketIds: [] };
}

export const CancelDerivativeOrderAuthz = {
  encode(message: CancelDerivativeOrderAuthz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subaccountId !== "") {
      writer.uint32(10).string(message.subaccountId);
    }
    for (const v of message.marketIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CancelDerivativeOrderAuthz {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelDerivativeOrderAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.subaccountId = reader.string();
          break;
        case 2:
          message.marketIds.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): CancelDerivativeOrderAuthz {
    return {
      subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
      marketIds: Array.isArray(object?.marketIds) ? object.marketIds.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: CancelDerivativeOrderAuthz): unknown {
    const obj: any = {};
    message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
    if (message.marketIds) {
      obj.marketIds = message.marketIds.map((e) => e);
    } else {
      obj.marketIds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<CancelDerivativeOrderAuthz>): CancelDerivativeOrderAuthz {
    return CancelDerivativeOrderAuthz.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<CancelDerivativeOrderAuthz>): CancelDerivativeOrderAuthz {
    const message = createBaseCancelDerivativeOrderAuthz();
    message.subaccountId = object.subaccountId ?? "";
    message.marketIds = object.marketIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchCancelDerivativeOrdersAuthz(): BatchCancelDerivativeOrdersAuthz {
  return { subaccountId: "", marketIds: [] };
}

export const BatchCancelDerivativeOrdersAuthz = {
  encode(message: BatchCancelDerivativeOrdersAuthz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subaccountId !== "") {
      writer.uint32(10).string(message.subaccountId);
    }
    for (const v of message.marketIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BatchCancelDerivativeOrdersAuthz {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCancelDerivativeOrdersAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.subaccountId = reader.string();
          break;
        case 2:
          message.marketIds.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): BatchCancelDerivativeOrdersAuthz {
    return {
      subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
      marketIds: Array.isArray(object?.marketIds) ? object.marketIds.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: BatchCancelDerivativeOrdersAuthz): unknown {
    const obj: any = {};
    message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
    if (message.marketIds) {
      obj.marketIds = message.marketIds.map((e) => e);
    } else {
      obj.marketIds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCancelDerivativeOrdersAuthz>): BatchCancelDerivativeOrdersAuthz {
    return BatchCancelDerivativeOrdersAuthz.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<BatchCancelDerivativeOrdersAuthz>): BatchCancelDerivativeOrdersAuthz {
    const message = createBaseBatchCancelDerivativeOrdersAuthz();
    message.subaccountId = object.subaccountId ?? "";
    message.marketIds = object.marketIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchUpdateOrdersAuthz(): BatchUpdateOrdersAuthz {
  return { subaccountId: "", spotMarkets: [], derivativeMarkets: [] };
}

export const BatchUpdateOrdersAuthz = {
  encode(message: BatchUpdateOrdersAuthz, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subaccountId !== "") {
      writer.uint32(10).string(message.subaccountId);
    }
    for (const v of message.spotMarkets) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.derivativeMarkets) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BatchUpdateOrdersAuthz {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchUpdateOrdersAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.subaccountId = reader.string();
          break;
        case 2:
          message.spotMarkets.push(reader.string());
          break;
        case 3:
          message.derivativeMarkets.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): BatchUpdateOrdersAuthz {
    return {
      subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
      spotMarkets: Array.isArray(object?.spotMarkets) ? object.spotMarkets.map((e: any) => String(e)) : [],
      derivativeMarkets: Array.isArray(object?.derivativeMarkets)
        ? object.derivativeMarkets.map((e: any) => String(e))
        : [],
    };
  },

  toJSON(message: BatchUpdateOrdersAuthz): unknown {
    const obj: any = {};
    message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
    if (message.spotMarkets) {
      obj.spotMarkets = message.spotMarkets.map((e) => e);
    } else {
      obj.spotMarkets = [];
    }
    if (message.derivativeMarkets) {
      obj.derivativeMarkets = message.derivativeMarkets.map((e) => e);
    } else {
      obj.derivativeMarkets = [];
    }
    return obj;
  },

  create(base?: DeepPartial<BatchUpdateOrdersAuthz>): BatchUpdateOrdersAuthz {
    return BatchUpdateOrdersAuthz.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<BatchUpdateOrdersAuthz>): BatchUpdateOrdersAuthz {
    const message = createBaseBatchUpdateOrdersAuthz();
    message.subaccountId = object.subaccountId ?? "";
    message.spotMarkets = object.spotMarkets?.map((e) => e) || [];
    message.derivativeMarkets = object.derivativeMarkets?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
