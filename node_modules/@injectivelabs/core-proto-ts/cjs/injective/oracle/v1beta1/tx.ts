/* eslint-disable */
import { grpc } from "@injectivelabs/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { PriceAttestation } from "./oracle";

/** MsgRelayProviderPrice defines a SDK message for setting a price through the provider oracle. */
export interface MsgRelayProviderPrices {
  sender: string;
  provider: string;
  symbols: string[];
  prices: string[];
}

export interface MsgRelayProviderPricesResponse {
}

/** MsgRelayPriceFeedPrice defines a SDK message for setting a price through the pricefeed oracle. */
export interface MsgRelayPriceFeedPrice {
  sender: string;
  base: string[];
  quote: string[];
  /** price defines the price of the oracle base and quote */
  price: string[];
}

export interface MsgRelayPriceFeedPriceResponse {
}

export interface MsgRelayBandRates {
  relayer: string;
  symbols: string[];
  rates: string[];
  resolveTimes: string[];
  requestIDs: string[];
}

export interface MsgRelayBandRatesResponse {
}

/** MsgRelayCoinbaseMessages defines a SDK message for relaying price messages from Coinbase API. */
export interface MsgRelayCoinbaseMessages {
  sender: string;
  messages: Uint8Array[];
  signatures: Uint8Array[];
}

export interface MsgRelayCoinbaseMessagesResponse {
}

/** MsgRequestBandIBCRates defines a SDK message for requesting data from BandChain using IBC. */
export interface MsgRequestBandIBCRates {
  sender: string;
  requestId: string;
}

/** MsgRequestDataResponse defines the Msg/RequestBandIBCRates response type. */
export interface MsgRequestBandIBCRatesResponse {
}

/** MsgRelayPythPrices defines a SDK message for updating Pyth prices */
export interface MsgRelayPythPrices {
  sender: string;
  priceAttestations: PriceAttestation[];
}

/** MsgRelayPythPricesResponse defines the Msg/RelayPythPrices response type. */
export interface MsgRelayPythPricesResponse {
}

function createBaseMsgRelayProviderPrices(): MsgRelayProviderPrices {
  return { sender: "", provider: "", symbols: [], prices: [] };
}

export const MsgRelayProviderPrices = {
  encode(message: MsgRelayProviderPrices, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.provider !== "") {
      writer.uint32(18).string(message.provider);
    }
    for (const v of message.symbols) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.prices) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRelayProviderPrices {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRelayProviderPrices();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.provider = reader.string();
          break;
        case 3:
          message.symbols.push(reader.string());
          break;
        case 4:
          message.prices.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgRelayProviderPrices {
    return {
      sender: isSet(object.sender) ? String(object.sender) : "",
      provider: isSet(object.provider) ? String(object.provider) : "",
      symbols: Array.isArray(object?.symbols) ? object.symbols.map((e: any) => String(e)) : [],
      prices: Array.isArray(object?.prices) ? object.prices.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: MsgRelayProviderPrices): unknown {
    const obj: any = {};
    message.sender !== undefined && (obj.sender = message.sender);
    message.provider !== undefined && (obj.provider = message.provider);
    if (message.symbols) {
      obj.symbols = message.symbols.map((e) => e);
    } else {
      obj.symbols = [];
    }
    if (message.prices) {
      obj.prices = message.prices.map((e) => e);
    } else {
      obj.prices = [];
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRelayProviderPrices>): MsgRelayProviderPrices {
    return MsgRelayProviderPrices.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<MsgRelayProviderPrices>): MsgRelayProviderPrices {
    const message = createBaseMsgRelayProviderPrices();
    message.sender = object.sender ?? "";
    message.provider = object.provider ?? "";
    message.symbols = object.symbols?.map((e) => e) || [];
    message.prices = object.prices?.map((e) => e) || [];
    return message;
  },
};

function createBaseMsgRelayProviderPricesResponse(): MsgRelayProviderPricesResponse {
  return {};
}

export const MsgRelayProviderPricesResponse = {
  encode(_: MsgRelayProviderPricesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRelayProviderPricesResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRelayProviderPricesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): MsgRelayProviderPricesResponse {
    return {};
  },

  toJSON(_: MsgRelayProviderPricesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRelayProviderPricesResponse>): MsgRelayProviderPricesResponse {
    return MsgRelayProviderPricesResponse.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<MsgRelayProviderPricesResponse>): MsgRelayProviderPricesResponse {
    const message = createBaseMsgRelayProviderPricesResponse();
    return message;
  },
};

function createBaseMsgRelayPriceFeedPrice(): MsgRelayPriceFeedPrice {
  return { sender: "", base: [], quote: [], price: [] };
}

export const MsgRelayPriceFeedPrice = {
  encode(message: MsgRelayPriceFeedPrice, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    for (const v of message.base) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.quote) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.price) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRelayPriceFeedPrice {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRelayPriceFeedPrice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.base.push(reader.string());
          break;
        case 3:
          message.quote.push(reader.string());
          break;
        case 4:
          message.price.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgRelayPriceFeedPrice {
    return {
      sender: isSet(object.sender) ? String(object.sender) : "",
      base: Array.isArray(object?.base) ? object.base.map((e: any) => String(e)) : [],
      quote: Array.isArray(object?.quote) ? object.quote.map((e: any) => String(e)) : [],
      price: Array.isArray(object?.price) ? object.price.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: MsgRelayPriceFeedPrice): unknown {
    const obj: any = {};
    message.sender !== undefined && (obj.sender = message.sender);
    if (message.base) {
      obj.base = message.base.map((e) => e);
    } else {
      obj.base = [];
    }
    if (message.quote) {
      obj.quote = message.quote.map((e) => e);
    } else {
      obj.quote = [];
    }
    if (message.price) {
      obj.price = message.price.map((e) => e);
    } else {
      obj.price = [];
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRelayPriceFeedPrice>): MsgRelayPriceFeedPrice {
    return MsgRelayPriceFeedPrice.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<MsgRelayPriceFeedPrice>): MsgRelayPriceFeedPrice {
    const message = createBaseMsgRelayPriceFeedPrice();
    message.sender = object.sender ?? "";
    message.base = object.base?.map((e) => e) || [];
    message.quote = object.quote?.map((e) => e) || [];
    message.price = object.price?.map((e) => e) || [];
    return message;
  },
};

function createBaseMsgRelayPriceFeedPriceResponse(): MsgRelayPriceFeedPriceResponse {
  return {};
}

export const MsgRelayPriceFeedPriceResponse = {
  encode(_: MsgRelayPriceFeedPriceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRelayPriceFeedPriceResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRelayPriceFeedPriceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): MsgRelayPriceFeedPriceResponse {
    return {};
  },

  toJSON(_: MsgRelayPriceFeedPriceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRelayPriceFeedPriceResponse>): MsgRelayPriceFeedPriceResponse {
    return MsgRelayPriceFeedPriceResponse.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<MsgRelayPriceFeedPriceResponse>): MsgRelayPriceFeedPriceResponse {
    const message = createBaseMsgRelayPriceFeedPriceResponse();
    return message;
  },
};

function createBaseMsgRelayBandRates(): MsgRelayBandRates {
  return { relayer: "", symbols: [], rates: [], resolveTimes: [], requestIDs: [] };
}

export const MsgRelayBandRates = {
  encode(message: MsgRelayBandRates, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.relayer !== "") {
      writer.uint32(10).string(message.relayer);
    }
    for (const v of message.symbols) {
      writer.uint32(18).string(v!);
    }
    writer.uint32(26).fork();
    for (const v of message.rates) {
      writer.uint64(v);
    }
    writer.ldelim();
    writer.uint32(34).fork();
    for (const v of message.resolveTimes) {
      writer.uint64(v);
    }
    writer.ldelim();
    writer.uint32(42).fork();
    for (const v of message.requestIDs) {
      writer.uint64(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRelayBandRates {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRelayBandRates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.relayer = reader.string();
          break;
        case 2:
          message.symbols.push(reader.string());
          break;
        case 3:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.rates.push(longToString(reader.uint64() as Long));
            }
          } else {
            message.rates.push(longToString(reader.uint64() as Long));
          }
          break;
        case 4:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.resolveTimes.push(longToString(reader.uint64() as Long));
            }
          } else {
            message.resolveTimes.push(longToString(reader.uint64() as Long));
          }
          break;
        case 5:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.requestIDs.push(longToString(reader.uint64() as Long));
            }
          } else {
            message.requestIDs.push(longToString(reader.uint64() as Long));
          }
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgRelayBandRates {
    return {
      relayer: isSet(object.relayer) ? String(object.relayer) : "",
      symbols: Array.isArray(object?.symbols) ? object.symbols.map((e: any) => String(e)) : [],
      rates: Array.isArray(object?.rates) ? object.rates.map((e: any) => String(e)) : [],
      resolveTimes: Array.isArray(object?.resolveTimes) ? object.resolveTimes.map((e: any) => String(e)) : [],
      requestIDs: Array.isArray(object?.requestIDs) ? object.requestIDs.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: MsgRelayBandRates): unknown {
    const obj: any = {};
    message.relayer !== undefined && (obj.relayer = message.relayer);
    if (message.symbols) {
      obj.symbols = message.symbols.map((e) => e);
    } else {
      obj.symbols = [];
    }
    if (message.rates) {
      obj.rates = message.rates.map((e) => e);
    } else {
      obj.rates = [];
    }
    if (message.resolveTimes) {
      obj.resolveTimes = message.resolveTimes.map((e) => e);
    } else {
      obj.resolveTimes = [];
    }
    if (message.requestIDs) {
      obj.requestIDs = message.requestIDs.map((e) => e);
    } else {
      obj.requestIDs = [];
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRelayBandRates>): MsgRelayBandRates {
    return MsgRelayBandRates.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<MsgRelayBandRates>): MsgRelayBandRates {
    const message = createBaseMsgRelayBandRates();
    message.relayer = object.relayer ?? "";
    message.symbols = object.symbols?.map((e) => e) || [];
    message.rates = object.rates?.map((e) => e) || [];
    message.resolveTimes = object.resolveTimes?.map((e) => e) || [];
    message.requestIDs = object.requestIDs?.map((e) => e) || [];
    return message;
  },
};

function createBaseMsgRelayBandRatesResponse(): MsgRelayBandRatesResponse {
  return {};
}

export const MsgRelayBandRatesResponse = {
  encode(_: MsgRelayBandRatesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRelayBandRatesResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRelayBandRatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): MsgRelayBandRatesResponse {
    return {};
  },

  toJSON(_: MsgRelayBandRatesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRelayBandRatesResponse>): MsgRelayBandRatesResponse {
    return MsgRelayBandRatesResponse.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<MsgRelayBandRatesResponse>): MsgRelayBandRatesResponse {
    const message = createBaseMsgRelayBandRatesResponse();
    return message;
  },
};

function createBaseMsgRelayCoinbaseMessages(): MsgRelayCoinbaseMessages {
  return { sender: "", messages: [], signatures: [] };
}

export const MsgRelayCoinbaseMessages = {
  encode(message: MsgRelayCoinbaseMessages, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    for (const v of message.messages) {
      writer.uint32(18).bytes(v!);
    }
    for (const v of message.signatures) {
      writer.uint32(26).bytes(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRelayCoinbaseMessages {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRelayCoinbaseMessages();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.messages.push(reader.bytes());
          break;
        case 3:
          message.signatures.push(reader.bytes());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgRelayCoinbaseMessages {
    return {
      sender: isSet(object.sender) ? String(object.sender) : "",
      messages: Array.isArray(object?.messages) ? object.messages.map((e: any) => bytesFromBase64(e)) : [],
      signatures: Array.isArray(object?.signatures) ? object.signatures.map((e: any) => bytesFromBase64(e)) : [],
    };
  },

  toJSON(message: MsgRelayCoinbaseMessages): unknown {
    const obj: any = {};
    message.sender !== undefined && (obj.sender = message.sender);
    if (message.messages) {
      obj.messages = message.messages.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));
    } else {
      obj.messages = [];
    }
    if (message.signatures) {
      obj.signatures = message.signatures.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));
    } else {
      obj.signatures = [];
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRelayCoinbaseMessages>): MsgRelayCoinbaseMessages {
    return MsgRelayCoinbaseMessages.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<MsgRelayCoinbaseMessages>): MsgRelayCoinbaseMessages {
    const message = createBaseMsgRelayCoinbaseMessages();
    message.sender = object.sender ?? "";
    message.messages = object.messages?.map((e) => e) || [];
    message.signatures = object.signatures?.map((e) => e) || [];
    return message;
  },
};

function createBaseMsgRelayCoinbaseMessagesResponse(): MsgRelayCoinbaseMessagesResponse {
  return {};
}

export const MsgRelayCoinbaseMessagesResponse = {
  encode(_: MsgRelayCoinbaseMessagesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRelayCoinbaseMessagesResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRelayCoinbaseMessagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): MsgRelayCoinbaseMessagesResponse {
    return {};
  },

  toJSON(_: MsgRelayCoinbaseMessagesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRelayCoinbaseMessagesResponse>): MsgRelayCoinbaseMessagesResponse {
    return MsgRelayCoinbaseMessagesResponse.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<MsgRelayCoinbaseMessagesResponse>): MsgRelayCoinbaseMessagesResponse {
    const message = createBaseMsgRelayCoinbaseMessagesResponse();
    return message;
  },
};

function createBaseMsgRequestBandIBCRates(): MsgRequestBandIBCRates {
  return { sender: "", requestId: "0" };
}

export const MsgRequestBandIBCRates = {
  encode(message: MsgRequestBandIBCRates, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.requestId !== "0") {
      writer.uint32(16).uint64(message.requestId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRequestBandIBCRates {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRequestBandIBCRates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.requestId = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgRequestBandIBCRates {
    return {
      sender: isSet(object.sender) ? String(object.sender) : "",
      requestId: isSet(object.requestId) ? String(object.requestId) : "0",
    };
  },

  toJSON(message: MsgRequestBandIBCRates): unknown {
    const obj: any = {};
    message.sender !== undefined && (obj.sender = message.sender);
    message.requestId !== undefined && (obj.requestId = message.requestId);
    return obj;
  },

  create(base?: DeepPartial<MsgRequestBandIBCRates>): MsgRequestBandIBCRates {
    return MsgRequestBandIBCRates.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<MsgRequestBandIBCRates>): MsgRequestBandIBCRates {
    const message = createBaseMsgRequestBandIBCRates();
    message.sender = object.sender ?? "";
    message.requestId = object.requestId ?? "0";
    return message;
  },
};

function createBaseMsgRequestBandIBCRatesResponse(): MsgRequestBandIBCRatesResponse {
  return {};
}

export const MsgRequestBandIBCRatesResponse = {
  encode(_: MsgRequestBandIBCRatesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRequestBandIBCRatesResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRequestBandIBCRatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): MsgRequestBandIBCRatesResponse {
    return {};
  },

  toJSON(_: MsgRequestBandIBCRatesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRequestBandIBCRatesResponse>): MsgRequestBandIBCRatesResponse {
    return MsgRequestBandIBCRatesResponse.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<MsgRequestBandIBCRatesResponse>): MsgRequestBandIBCRatesResponse {
    const message = createBaseMsgRequestBandIBCRatesResponse();
    return message;
  },
};

function createBaseMsgRelayPythPrices(): MsgRelayPythPrices {
  return { sender: "", priceAttestations: [] };
}

export const MsgRelayPythPrices = {
  encode(message: MsgRelayPythPrices, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    for (const v of message.priceAttestations) {
      PriceAttestation.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRelayPythPrices {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRelayPythPrices();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.priceAttestations.push(PriceAttestation.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): MsgRelayPythPrices {
    return {
      sender: isSet(object.sender) ? String(object.sender) : "",
      priceAttestations: Array.isArray(object?.priceAttestations)
        ? object.priceAttestations.map((e: any) => PriceAttestation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgRelayPythPrices): unknown {
    const obj: any = {};
    message.sender !== undefined && (obj.sender = message.sender);
    if (message.priceAttestations) {
      obj.priceAttestations = message.priceAttestations.map((e) => e ? PriceAttestation.toJSON(e) : undefined);
    } else {
      obj.priceAttestations = [];
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRelayPythPrices>): MsgRelayPythPrices {
    return MsgRelayPythPrices.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<MsgRelayPythPrices>): MsgRelayPythPrices {
    const message = createBaseMsgRelayPythPrices();
    message.sender = object.sender ?? "";
    message.priceAttestations = object.priceAttestations?.map((e) => PriceAttestation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgRelayPythPricesResponse(): MsgRelayPythPricesResponse {
  return {};
}

export const MsgRelayPythPricesResponse = {
  encode(_: MsgRelayPythPricesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRelayPythPricesResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRelayPythPricesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): MsgRelayPythPricesResponse {
    return {};
  },

  toJSON(_: MsgRelayPythPricesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRelayPythPricesResponse>): MsgRelayPythPricesResponse {
    return MsgRelayPythPricesResponse.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<MsgRelayPythPricesResponse>): MsgRelayPythPricesResponse {
    const message = createBaseMsgRelayPythPricesResponse();
    return message;
  },
};

/** Msg defines the oracle Msg service. */
export interface Msg {
  /** RelayProviderPrice defines a method for relaying a price for a provider-based oracle */
  RelayProviderPrices(
    request: DeepPartial<MsgRelayProviderPrices>,
    metadata?: grpc.Metadata,
  ): Promise<MsgRelayProviderPricesResponse>;
  /** RelayPriceFeedPrice defines a method for relaying a price for a price feeder-based oracle */
  RelayPriceFeedPrice(
    request: DeepPartial<MsgRelayPriceFeedPrice>,
    metadata?: grpc.Metadata,
  ): Promise<MsgRelayPriceFeedPriceResponse>;
  /** RelayBandRates defines a method for relaying rates from Band */
  RelayBandRates(request: DeepPartial<MsgRelayBandRates>, metadata?: grpc.Metadata): Promise<MsgRelayBandRatesResponse>;
  /** RequestBandIBCRates defines a method for fetching rates from Band ibc */
  RequestBandIBCRates(
    request: DeepPartial<MsgRequestBandIBCRates>,
    metadata?: grpc.Metadata,
  ): Promise<MsgRequestBandIBCRatesResponse>;
  /** RelayCoinbaseMessages defines a method for relaying price messages from Coinbase API */
  RelayCoinbaseMessages(
    request: DeepPartial<MsgRelayCoinbaseMessages>,
    metadata?: grpc.Metadata,
  ): Promise<MsgRelayCoinbaseMessagesResponse>;
  /** RelayPythPrices defines a method for relaying rates from the Pyth contract */
  RelayPythPrices(
    request: DeepPartial<MsgRelayPythPrices>,
    metadata?: grpc.Metadata,
  ): Promise<MsgRelayPythPricesResponse>;
}

export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.RelayProviderPrices = this.RelayProviderPrices.bind(this);
    this.RelayPriceFeedPrice = this.RelayPriceFeedPrice.bind(this);
    this.RelayBandRates = this.RelayBandRates.bind(this);
    this.RequestBandIBCRates = this.RequestBandIBCRates.bind(this);
    this.RelayCoinbaseMessages = this.RelayCoinbaseMessages.bind(this);
    this.RelayPythPrices = this.RelayPythPrices.bind(this);
  }

  RelayProviderPrices(
    request: DeepPartial<MsgRelayProviderPrices>,
    metadata?: grpc.Metadata,
  ): Promise<MsgRelayProviderPricesResponse> {
    return this.rpc.unary(MsgRelayProviderPricesDesc, MsgRelayProviderPrices.fromPartial(request), metadata);
  }

  RelayPriceFeedPrice(
    request: DeepPartial<MsgRelayPriceFeedPrice>,
    metadata?: grpc.Metadata,
  ): Promise<MsgRelayPriceFeedPriceResponse> {
    return this.rpc.unary(MsgRelayPriceFeedPriceDesc, MsgRelayPriceFeedPrice.fromPartial(request), metadata);
  }

  RelayBandRates(
    request: DeepPartial<MsgRelayBandRates>,
    metadata?: grpc.Metadata,
  ): Promise<MsgRelayBandRatesResponse> {
    return this.rpc.unary(MsgRelayBandRatesDesc, MsgRelayBandRates.fromPartial(request), metadata);
  }

  RequestBandIBCRates(
    request: DeepPartial<MsgRequestBandIBCRates>,
    metadata?: grpc.Metadata,
  ): Promise<MsgRequestBandIBCRatesResponse> {
    return this.rpc.unary(MsgRequestBandIBCRatesDesc, MsgRequestBandIBCRates.fromPartial(request), metadata);
  }

  RelayCoinbaseMessages(
    request: DeepPartial<MsgRelayCoinbaseMessages>,
    metadata?: grpc.Metadata,
  ): Promise<MsgRelayCoinbaseMessagesResponse> {
    return this.rpc.unary(MsgRelayCoinbaseMessagesDesc, MsgRelayCoinbaseMessages.fromPartial(request), metadata);
  }

  RelayPythPrices(
    request: DeepPartial<MsgRelayPythPrices>,
    metadata?: grpc.Metadata,
  ): Promise<MsgRelayPythPricesResponse> {
    return this.rpc.unary(MsgRelayPythPricesDesc, MsgRelayPythPrices.fromPartial(request), metadata);
  }
}

export const MsgDesc = { serviceName: "injective.oracle.v1beta1.Msg" };

export const MsgRelayProviderPricesDesc: UnaryMethodDefinitionish = {
  methodName: "RelayProviderPrices",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgRelayProviderPrices.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgRelayProviderPricesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgRelayPriceFeedPriceDesc: UnaryMethodDefinitionish = {
  methodName: "RelayPriceFeedPrice",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgRelayPriceFeedPrice.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgRelayPriceFeedPriceResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgRelayBandRatesDesc: UnaryMethodDefinitionish = {
  methodName: "RelayBandRates",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgRelayBandRates.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgRelayBandRatesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgRequestBandIBCRatesDesc: UnaryMethodDefinitionish = {
  methodName: "RequestBandIBCRates",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgRequestBandIBCRates.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgRequestBandIBCRatesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgRelayCoinbaseMessagesDesc: UnaryMethodDefinitionish = {
  methodName: "RelayCoinbaseMessages",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgRelayCoinbaseMessages.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgRelayCoinbaseMessagesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const MsgRelayPythPricesDesc: UnaryMethodDefinitionish = {
  methodName: "RelayPythPrices",
  service: MsgDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return MsgRelayPythPrices.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = MsgRelayPythPricesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata || this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if (tsProtoGlobalThis.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if (tsProtoGlobalThis.Buffer) {
    return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends tsProtoGlobalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
