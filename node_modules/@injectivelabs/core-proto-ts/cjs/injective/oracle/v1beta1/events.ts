/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { PythPriceState } from "./oracle";

export interface SetChainlinkPriceEvent {
  feedId: string;
  answer: string;
  timestamp: string;
}

/** Event type upon set ref */
export interface SetBandPriceEvent {
  relayer: string;
  symbol: string;
  price: string;
  resolveTime: string;
  requestId: string;
}

export interface SetBandIBCPriceEvent {
  relayer: string;
  symbols: string[];
  prices: string[];
  resolveTime: string;
  requestId: string;
  clientId: string;
}

export interface EventBandIBCAckSuccess {
  ackResult: string;
  clientId: string;
}

export interface EventBandIBCAckError {
  ackError: string;
  clientId: string;
}

export interface EventBandIBCResponseTimeout {
  clientId: string;
}

export interface SetPriceFeedPriceEvent {
  relayer: string;
  base: string;
  quote: string;
  /** price defines the price of the oracle base and quote */
  price: string;
}

export interface SetProviderPriceEvent {
  provider: string;
  relayer: string;
  symbol: string;
  price: string;
}

export interface SetCoinbasePriceEvent {
  symbol: string;
  price: string;
  timestamp: string;
}

export interface EventSetPythPrices {
  prices: PythPriceState[];
}

function createBaseSetChainlinkPriceEvent(): SetChainlinkPriceEvent {
  return { feedId: "", answer: "", timestamp: "0" };
}

export const SetChainlinkPriceEvent = {
  encode(message: SetChainlinkPriceEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedId !== "") {
      writer.uint32(10).string(message.feedId);
    }
    if (message.answer !== "") {
      writer.uint32(18).string(message.answer);
    }
    if (message.timestamp !== "0") {
      writer.uint32(24).uint64(message.timestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetChainlinkPriceEvent {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetChainlinkPriceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedId = reader.string();
          break;
        case 2:
          message.answer = reader.string();
          break;
        case 3:
          message.timestamp = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): SetChainlinkPriceEvent {
    return {
      feedId: isSet(object.feedId) ? String(object.feedId) : "",
      answer: isSet(object.answer) ? String(object.answer) : "",
      timestamp: isSet(object.timestamp) ? String(object.timestamp) : "0",
    };
  },

  toJSON(message: SetChainlinkPriceEvent): unknown {
    const obj: any = {};
    message.feedId !== undefined && (obj.feedId = message.feedId);
    message.answer !== undefined && (obj.answer = message.answer);
    message.timestamp !== undefined && (obj.timestamp = message.timestamp);
    return obj;
  },

  create(base?: DeepPartial<SetChainlinkPriceEvent>): SetChainlinkPriceEvent {
    return SetChainlinkPriceEvent.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<SetChainlinkPriceEvent>): SetChainlinkPriceEvent {
    const message = createBaseSetChainlinkPriceEvent();
    message.feedId = object.feedId ?? "";
    message.answer = object.answer ?? "";
    message.timestamp = object.timestamp ?? "0";
    return message;
  },
};

function createBaseSetBandPriceEvent(): SetBandPriceEvent {
  return { relayer: "", symbol: "", price: "", resolveTime: "0", requestId: "0" };
}

export const SetBandPriceEvent = {
  encode(message: SetBandPriceEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.relayer !== "") {
      writer.uint32(10).string(message.relayer);
    }
    if (message.symbol !== "") {
      writer.uint32(18).string(message.symbol);
    }
    if (message.price !== "") {
      writer.uint32(26).string(message.price);
    }
    if (message.resolveTime !== "0") {
      writer.uint32(32).uint64(message.resolveTime);
    }
    if (message.requestId !== "0") {
      writer.uint32(40).uint64(message.requestId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetBandPriceEvent {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetBandPriceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.relayer = reader.string();
          break;
        case 2:
          message.symbol = reader.string();
          break;
        case 3:
          message.price = reader.string();
          break;
        case 4:
          message.resolveTime = longToString(reader.uint64() as Long);
          break;
        case 5:
          message.requestId = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): SetBandPriceEvent {
    return {
      relayer: isSet(object.relayer) ? String(object.relayer) : "",
      symbol: isSet(object.symbol) ? String(object.symbol) : "",
      price: isSet(object.price) ? String(object.price) : "",
      resolveTime: isSet(object.resolveTime) ? String(object.resolveTime) : "0",
      requestId: isSet(object.requestId) ? String(object.requestId) : "0",
    };
  },

  toJSON(message: SetBandPriceEvent): unknown {
    const obj: any = {};
    message.relayer !== undefined && (obj.relayer = message.relayer);
    message.symbol !== undefined && (obj.symbol = message.symbol);
    message.price !== undefined && (obj.price = message.price);
    message.resolveTime !== undefined && (obj.resolveTime = message.resolveTime);
    message.requestId !== undefined && (obj.requestId = message.requestId);
    return obj;
  },

  create(base?: DeepPartial<SetBandPriceEvent>): SetBandPriceEvent {
    return SetBandPriceEvent.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<SetBandPriceEvent>): SetBandPriceEvent {
    const message = createBaseSetBandPriceEvent();
    message.relayer = object.relayer ?? "";
    message.symbol = object.symbol ?? "";
    message.price = object.price ?? "";
    message.resolveTime = object.resolveTime ?? "0";
    message.requestId = object.requestId ?? "0";
    return message;
  },
};

function createBaseSetBandIBCPriceEvent(): SetBandIBCPriceEvent {
  return { relayer: "", symbols: [], prices: [], resolveTime: "0", requestId: "0", clientId: "0" };
}

export const SetBandIBCPriceEvent = {
  encode(message: SetBandIBCPriceEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.relayer !== "") {
      writer.uint32(10).string(message.relayer);
    }
    for (const v of message.symbols) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.prices) {
      writer.uint32(26).string(v!);
    }
    if (message.resolveTime !== "0") {
      writer.uint32(32).uint64(message.resolveTime);
    }
    if (message.requestId !== "0") {
      writer.uint32(40).uint64(message.requestId);
    }
    if (message.clientId !== "0") {
      writer.uint32(48).int64(message.clientId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetBandIBCPriceEvent {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetBandIBCPriceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.relayer = reader.string();
          break;
        case 2:
          message.symbols.push(reader.string());
          break;
        case 3:
          message.prices.push(reader.string());
          break;
        case 4:
          message.resolveTime = longToString(reader.uint64() as Long);
          break;
        case 5:
          message.requestId = longToString(reader.uint64() as Long);
          break;
        case 6:
          message.clientId = longToString(reader.int64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): SetBandIBCPriceEvent {
    return {
      relayer: isSet(object.relayer) ? String(object.relayer) : "",
      symbols: Array.isArray(object?.symbols) ? object.symbols.map((e: any) => String(e)) : [],
      prices: Array.isArray(object?.prices) ? object.prices.map((e: any) => String(e)) : [],
      resolveTime: isSet(object.resolveTime) ? String(object.resolveTime) : "0",
      requestId: isSet(object.requestId) ? String(object.requestId) : "0",
      clientId: isSet(object.clientId) ? String(object.clientId) : "0",
    };
  },

  toJSON(message: SetBandIBCPriceEvent): unknown {
    const obj: any = {};
    message.relayer !== undefined && (obj.relayer = message.relayer);
    if (message.symbols) {
      obj.symbols = message.symbols.map((e) => e);
    } else {
      obj.symbols = [];
    }
    if (message.prices) {
      obj.prices = message.prices.map((e) => e);
    } else {
      obj.prices = [];
    }
    message.resolveTime !== undefined && (obj.resolveTime = message.resolveTime);
    message.requestId !== undefined && (obj.requestId = message.requestId);
    message.clientId !== undefined && (obj.clientId = message.clientId);
    return obj;
  },

  create(base?: DeepPartial<SetBandIBCPriceEvent>): SetBandIBCPriceEvent {
    return SetBandIBCPriceEvent.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<SetBandIBCPriceEvent>): SetBandIBCPriceEvent {
    const message = createBaseSetBandIBCPriceEvent();
    message.relayer = object.relayer ?? "";
    message.symbols = object.symbols?.map((e) => e) || [];
    message.prices = object.prices?.map((e) => e) || [];
    message.resolveTime = object.resolveTime ?? "0";
    message.requestId = object.requestId ?? "0";
    message.clientId = object.clientId ?? "0";
    return message;
  },
};

function createBaseEventBandIBCAckSuccess(): EventBandIBCAckSuccess {
  return { ackResult: "", clientId: "0" };
}

export const EventBandIBCAckSuccess = {
  encode(message: EventBandIBCAckSuccess, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ackResult !== "") {
      writer.uint32(10).string(message.ackResult);
    }
    if (message.clientId !== "0") {
      writer.uint32(16).int64(message.clientId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventBandIBCAckSuccess {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBandIBCAckSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.ackResult = reader.string();
          break;
        case 2:
          message.clientId = longToString(reader.int64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventBandIBCAckSuccess {
    return {
      ackResult: isSet(object.ackResult) ? String(object.ackResult) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "0",
    };
  },

  toJSON(message: EventBandIBCAckSuccess): unknown {
    const obj: any = {};
    message.ackResult !== undefined && (obj.ackResult = message.ackResult);
    message.clientId !== undefined && (obj.clientId = message.clientId);
    return obj;
  },

  create(base?: DeepPartial<EventBandIBCAckSuccess>): EventBandIBCAckSuccess {
    return EventBandIBCAckSuccess.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventBandIBCAckSuccess>): EventBandIBCAckSuccess {
    const message = createBaseEventBandIBCAckSuccess();
    message.ackResult = object.ackResult ?? "";
    message.clientId = object.clientId ?? "0";
    return message;
  },
};

function createBaseEventBandIBCAckError(): EventBandIBCAckError {
  return { ackError: "", clientId: "0" };
}

export const EventBandIBCAckError = {
  encode(message: EventBandIBCAckError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ackError !== "") {
      writer.uint32(10).string(message.ackError);
    }
    if (message.clientId !== "0") {
      writer.uint32(16).int64(message.clientId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventBandIBCAckError {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBandIBCAckError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.ackError = reader.string();
          break;
        case 2:
          message.clientId = longToString(reader.int64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventBandIBCAckError {
    return {
      ackError: isSet(object.ackError) ? String(object.ackError) : "",
      clientId: isSet(object.clientId) ? String(object.clientId) : "0",
    };
  },

  toJSON(message: EventBandIBCAckError): unknown {
    const obj: any = {};
    message.ackError !== undefined && (obj.ackError = message.ackError);
    message.clientId !== undefined && (obj.clientId = message.clientId);
    return obj;
  },

  create(base?: DeepPartial<EventBandIBCAckError>): EventBandIBCAckError {
    return EventBandIBCAckError.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventBandIBCAckError>): EventBandIBCAckError {
    const message = createBaseEventBandIBCAckError();
    message.ackError = object.ackError ?? "";
    message.clientId = object.clientId ?? "0";
    return message;
  },
};

function createBaseEventBandIBCResponseTimeout(): EventBandIBCResponseTimeout {
  return { clientId: "0" };
}

export const EventBandIBCResponseTimeout = {
  encode(message: EventBandIBCResponseTimeout, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientId !== "0") {
      writer.uint32(8).int64(message.clientId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventBandIBCResponseTimeout {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBandIBCResponseTimeout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientId = longToString(reader.int64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventBandIBCResponseTimeout {
    return { clientId: isSet(object.clientId) ? String(object.clientId) : "0" };
  },

  toJSON(message: EventBandIBCResponseTimeout): unknown {
    const obj: any = {};
    message.clientId !== undefined && (obj.clientId = message.clientId);
    return obj;
  },

  create(base?: DeepPartial<EventBandIBCResponseTimeout>): EventBandIBCResponseTimeout {
    return EventBandIBCResponseTimeout.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventBandIBCResponseTimeout>): EventBandIBCResponseTimeout {
    const message = createBaseEventBandIBCResponseTimeout();
    message.clientId = object.clientId ?? "0";
    return message;
  },
};

function createBaseSetPriceFeedPriceEvent(): SetPriceFeedPriceEvent {
  return { relayer: "", base: "", quote: "", price: "" };
}

export const SetPriceFeedPriceEvent = {
  encode(message: SetPriceFeedPriceEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.relayer !== "") {
      writer.uint32(10).string(message.relayer);
    }
    if (message.base !== "") {
      writer.uint32(18).string(message.base);
    }
    if (message.quote !== "") {
      writer.uint32(26).string(message.quote);
    }
    if (message.price !== "") {
      writer.uint32(34).string(message.price);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPriceFeedPriceEvent {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPriceFeedPriceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.relayer = reader.string();
          break;
        case 2:
          message.base = reader.string();
          break;
        case 3:
          message.quote = reader.string();
          break;
        case 4:
          message.price = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): SetPriceFeedPriceEvent {
    return {
      relayer: isSet(object.relayer) ? String(object.relayer) : "",
      base: isSet(object.base) ? String(object.base) : "",
      quote: isSet(object.quote) ? String(object.quote) : "",
      price: isSet(object.price) ? String(object.price) : "",
    };
  },

  toJSON(message: SetPriceFeedPriceEvent): unknown {
    const obj: any = {};
    message.relayer !== undefined && (obj.relayer = message.relayer);
    message.base !== undefined && (obj.base = message.base);
    message.quote !== undefined && (obj.quote = message.quote);
    message.price !== undefined && (obj.price = message.price);
    return obj;
  },

  create(base?: DeepPartial<SetPriceFeedPriceEvent>): SetPriceFeedPriceEvent {
    return SetPriceFeedPriceEvent.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<SetPriceFeedPriceEvent>): SetPriceFeedPriceEvent {
    const message = createBaseSetPriceFeedPriceEvent();
    message.relayer = object.relayer ?? "";
    message.base = object.base ?? "";
    message.quote = object.quote ?? "";
    message.price = object.price ?? "";
    return message;
  },
};

function createBaseSetProviderPriceEvent(): SetProviderPriceEvent {
  return { provider: "", relayer: "", symbol: "", price: "" };
}

export const SetProviderPriceEvent = {
  encode(message: SetProviderPriceEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.provider !== "") {
      writer.uint32(10).string(message.provider);
    }
    if (message.relayer !== "") {
      writer.uint32(18).string(message.relayer);
    }
    if (message.symbol !== "") {
      writer.uint32(26).string(message.symbol);
    }
    if (message.price !== "") {
      writer.uint32(34).string(message.price);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetProviderPriceEvent {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetProviderPriceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.provider = reader.string();
          break;
        case 2:
          message.relayer = reader.string();
          break;
        case 3:
          message.symbol = reader.string();
          break;
        case 4:
          message.price = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): SetProviderPriceEvent {
    return {
      provider: isSet(object.provider) ? String(object.provider) : "",
      relayer: isSet(object.relayer) ? String(object.relayer) : "",
      symbol: isSet(object.symbol) ? String(object.symbol) : "",
      price: isSet(object.price) ? String(object.price) : "",
    };
  },

  toJSON(message: SetProviderPriceEvent): unknown {
    const obj: any = {};
    message.provider !== undefined && (obj.provider = message.provider);
    message.relayer !== undefined && (obj.relayer = message.relayer);
    message.symbol !== undefined && (obj.symbol = message.symbol);
    message.price !== undefined && (obj.price = message.price);
    return obj;
  },

  create(base?: DeepPartial<SetProviderPriceEvent>): SetProviderPriceEvent {
    return SetProviderPriceEvent.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<SetProviderPriceEvent>): SetProviderPriceEvent {
    const message = createBaseSetProviderPriceEvent();
    message.provider = object.provider ?? "";
    message.relayer = object.relayer ?? "";
    message.symbol = object.symbol ?? "";
    message.price = object.price ?? "";
    return message;
  },
};

function createBaseSetCoinbasePriceEvent(): SetCoinbasePriceEvent {
  return { symbol: "", price: "", timestamp: "0" };
}

export const SetCoinbasePriceEvent = {
  encode(message: SetCoinbasePriceEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.symbol !== "") {
      writer.uint32(10).string(message.symbol);
    }
    if (message.price !== "") {
      writer.uint32(18).string(message.price);
    }
    if (message.timestamp !== "0") {
      writer.uint32(24).uint64(message.timestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCoinbasePriceEvent {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCoinbasePriceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.symbol = reader.string();
          break;
        case 2:
          message.price = reader.string();
          break;
        case 3:
          message.timestamp = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): SetCoinbasePriceEvent {
    return {
      symbol: isSet(object.symbol) ? String(object.symbol) : "",
      price: isSet(object.price) ? String(object.price) : "",
      timestamp: isSet(object.timestamp) ? String(object.timestamp) : "0",
    };
  },

  toJSON(message: SetCoinbasePriceEvent): unknown {
    const obj: any = {};
    message.symbol !== undefined && (obj.symbol = message.symbol);
    message.price !== undefined && (obj.price = message.price);
    message.timestamp !== undefined && (obj.timestamp = message.timestamp);
    return obj;
  },

  create(base?: DeepPartial<SetCoinbasePriceEvent>): SetCoinbasePriceEvent {
    return SetCoinbasePriceEvent.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<SetCoinbasePriceEvent>): SetCoinbasePriceEvent {
    const message = createBaseSetCoinbasePriceEvent();
    message.symbol = object.symbol ?? "";
    message.price = object.price ?? "";
    message.timestamp = object.timestamp ?? "0";
    return message;
  },
};

function createBaseEventSetPythPrices(): EventSetPythPrices {
  return { prices: [] };
}

export const EventSetPythPrices = {
  encode(message: EventSetPythPrices, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.prices) {
      PythPriceState.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventSetPythPrices {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSetPythPrices();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.prices.push(PythPriceState.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventSetPythPrices {
    return { prices: Array.isArray(object?.prices) ? object.prices.map((e: any) => PythPriceState.fromJSON(e)) : [] };
  },

  toJSON(message: EventSetPythPrices): unknown {
    const obj: any = {};
    if (message.prices) {
      obj.prices = message.prices.map((e) => e ? PythPriceState.toJSON(e) : undefined);
    } else {
      obj.prices = [];
    }
    return obj;
  },

  create(base?: DeepPartial<EventSetPythPrices>): EventSetPythPrices {
    return EventSetPythPrices.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventSetPythPrices>): EventSetPythPrices {
    const message = createBaseEventSetPythPrices();
    message.prices = object.prices?.map((e) => PythPriceState.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
