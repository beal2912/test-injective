/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Metadata } from "../../../cosmos/bank/v1beta1/bank";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export interface EventCreateTFDenom {
  account: string;
  denom: string;
}

export interface EventMintTFDenom {
  recipientAddress: string;
  amount: Coin | undefined;
}

export interface EventBurnTFDenom {
  burnerAddress: string;
  amount: Coin | undefined;
}

export interface EventChangeTFAdmin {
  denom: string;
  newAdminAddress: string;
}

export interface EventSetTFDenomMetadata {
  denom: string;
  metadata: Metadata | undefined;
}

function createBaseEventCreateTFDenom(): EventCreateTFDenom {
  return { account: "", denom: "" };
}

export const EventCreateTFDenom = {
  encode(message: EventCreateTFDenom, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateTFDenom {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateTFDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.account = reader.string();
          break;
        case 2:
          message.denom = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventCreateTFDenom {
    return {
      account: isSet(object.account) ? String(object.account) : "",
      denom: isSet(object.denom) ? String(object.denom) : "",
    };
  },

  toJSON(message: EventCreateTFDenom): unknown {
    const obj: any = {};
    message.account !== undefined && (obj.account = message.account);
    message.denom !== undefined && (obj.denom = message.denom);
    return obj;
  },

  create(base?: DeepPartial<EventCreateTFDenom>): EventCreateTFDenom {
    return EventCreateTFDenom.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventCreateTFDenom>): EventCreateTFDenom {
    const message = createBaseEventCreateTFDenom();
    message.account = object.account ?? "";
    message.denom = object.denom ?? "";
    return message;
  },
};

function createBaseEventMintTFDenom(): EventMintTFDenom {
  return { recipientAddress: "", amount: undefined };
}

export const EventMintTFDenom = {
  encode(message: EventMintTFDenom, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.recipientAddress !== "") {
      writer.uint32(10).string(message.recipientAddress);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventMintTFDenom {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventMintTFDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.recipientAddress = reader.string();
          break;
        case 2:
          message.amount = Coin.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventMintTFDenom {
    return {
      recipientAddress: isSet(object.recipientAddress) ? String(object.recipientAddress) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: EventMintTFDenom): unknown {
    const obj: any = {};
    message.recipientAddress !== undefined && (obj.recipientAddress = message.recipientAddress);
    message.amount !== undefined && (obj.amount = message.amount ? Coin.toJSON(message.amount) : undefined);
    return obj;
  },

  create(base?: DeepPartial<EventMintTFDenom>): EventMintTFDenom {
    return EventMintTFDenom.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventMintTFDenom>): EventMintTFDenom {
    const message = createBaseEventMintTFDenom();
    message.recipientAddress = object.recipientAddress ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    return message;
  },
};

function createBaseEventBurnTFDenom(): EventBurnTFDenom {
  return { burnerAddress: "", amount: undefined };
}

export const EventBurnTFDenom = {
  encode(message: EventBurnTFDenom, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.burnerAddress !== "") {
      writer.uint32(10).string(message.burnerAddress);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventBurnTFDenom {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBurnTFDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.burnerAddress = reader.string();
          break;
        case 2:
          message.amount = Coin.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventBurnTFDenom {
    return {
      burnerAddress: isSet(object.burnerAddress) ? String(object.burnerAddress) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: EventBurnTFDenom): unknown {
    const obj: any = {};
    message.burnerAddress !== undefined && (obj.burnerAddress = message.burnerAddress);
    message.amount !== undefined && (obj.amount = message.amount ? Coin.toJSON(message.amount) : undefined);
    return obj;
  },

  create(base?: DeepPartial<EventBurnTFDenom>): EventBurnTFDenom {
    return EventBurnTFDenom.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventBurnTFDenom>): EventBurnTFDenom {
    const message = createBaseEventBurnTFDenom();
    message.burnerAddress = object.burnerAddress ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    return message;
  },
};

function createBaseEventChangeTFAdmin(): EventChangeTFAdmin {
  return { denom: "", newAdminAddress: "" };
}

export const EventChangeTFAdmin = {
  encode(message: EventChangeTFAdmin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.newAdminAddress !== "") {
      writer.uint32(18).string(message.newAdminAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventChangeTFAdmin {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventChangeTFAdmin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;
        case 2:
          message.newAdminAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventChangeTFAdmin {
    return {
      denom: isSet(object.denom) ? String(object.denom) : "",
      newAdminAddress: isSet(object.newAdminAddress) ? String(object.newAdminAddress) : "",
    };
  },

  toJSON(message: EventChangeTFAdmin): unknown {
    const obj: any = {};
    message.denom !== undefined && (obj.denom = message.denom);
    message.newAdminAddress !== undefined && (obj.newAdminAddress = message.newAdminAddress);
    return obj;
  },

  create(base?: DeepPartial<EventChangeTFAdmin>): EventChangeTFAdmin {
    return EventChangeTFAdmin.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventChangeTFAdmin>): EventChangeTFAdmin {
    const message = createBaseEventChangeTFAdmin();
    message.denom = object.denom ?? "";
    message.newAdminAddress = object.newAdminAddress ?? "";
    return message;
  },
};

function createBaseEventSetTFDenomMetadata(): EventSetTFDenomMetadata {
  return { denom: "", metadata: undefined };
}

export const EventSetTFDenomMetadata = {
  encode(message: EventSetTFDenomMetadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventSetTFDenomMetadata {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSetTFDenomMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;
        case 2:
          message.metadata = Metadata.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventSetTFDenomMetadata {
    return {
      denom: isSet(object.denom) ? String(object.denom) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: EventSetTFDenomMetadata): unknown {
    const obj: any = {};
    message.denom !== undefined && (obj.denom = message.denom);
    message.metadata !== undefined && (obj.metadata = message.metadata ? Metadata.toJSON(message.metadata) : undefined);
    return obj;
  },

  create(base?: DeepPartial<EventSetTFDenomMetadata>): EventSetTFDenomMetadata {
    return EventSetTFDenomMetadata.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventSetTFDenomMetadata>): EventSetTFDenomMetadata {
    const message = createBaseEventSetTFDenomMetadata();
    message.denom = object.denom ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
