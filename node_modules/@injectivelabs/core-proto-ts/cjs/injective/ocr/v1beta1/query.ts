/* eslint-disable */
import { grpc } from "@injectivelabs/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { GenesisState } from "./genesis";
import { EpochAndRound, FeedConfig, FeedConfigInfo, Params, Transmission } from "./ocr";

export interface QueryParamsRequest {
}

export interface QueryParamsResponse {
  params: Params | undefined;
}

export interface QueryFeedConfigRequest {
  feedId: string;
}

export interface QueryFeedConfigResponse {
  feedConfigInfo: FeedConfigInfo | undefined;
  feedConfig: FeedConfig | undefined;
}

export interface QueryFeedConfigInfoRequest {
  feedId: string;
}

export interface QueryFeedConfigInfoResponse {
  feedConfigInfo: FeedConfigInfo | undefined;
  epochAndRound: EpochAndRound | undefined;
}

export interface QueryLatestRoundRequest {
  feedId: string;
}

export interface QueryLatestRoundResponse {
  latestRoundId: string;
  data: Transmission | undefined;
}

export interface QueryLatestTransmissionDetailsRequest {
  feedId: string;
}

export interface QueryLatestTransmissionDetailsResponse {
  configDigest: Uint8Array;
  epochAndRound: EpochAndRound | undefined;
  data: Transmission | undefined;
}

export interface QueryOwedAmountRequest {
  transmitter: string;
}

export interface QueryOwedAmountResponse {
  amount: Coin | undefined;
}

export interface QueryModuleStateRequest {
}

export interface QueryModuleStateResponse {
  state: GenesisState | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest = {
  encode(_: QueryParamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse = {
  encode(message: QueryParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.params = Params.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    message.params !== undefined && (obj.params = message.params ? Params.toJSON(message.params) : undefined);
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryFeedConfigRequest(): QueryFeedConfigRequest {
  return { feedId: "" };
}

export const QueryFeedConfigRequest = {
  encode(message: QueryFeedConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedId !== "") {
      writer.uint32(10).string(message.feedId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeedConfigRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFeedConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedId = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): QueryFeedConfigRequest {
    return { feedId: isSet(object.feedId) ? String(object.feedId) : "" };
  },

  toJSON(message: QueryFeedConfigRequest): unknown {
    const obj: any = {};
    message.feedId !== undefined && (obj.feedId = message.feedId);
    return obj;
  },

  create(base?: DeepPartial<QueryFeedConfigRequest>): QueryFeedConfigRequest {
    return QueryFeedConfigRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<QueryFeedConfigRequest>): QueryFeedConfigRequest {
    const message = createBaseQueryFeedConfigRequest();
    message.feedId = object.feedId ?? "";
    return message;
  },
};

function createBaseQueryFeedConfigResponse(): QueryFeedConfigResponse {
  return { feedConfigInfo: undefined, feedConfig: undefined };
}

export const QueryFeedConfigResponse = {
  encode(message: QueryFeedConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedConfigInfo !== undefined) {
      FeedConfigInfo.encode(message.feedConfigInfo, writer.uint32(10).fork()).ldelim();
    }
    if (message.feedConfig !== undefined) {
      FeedConfig.encode(message.feedConfig, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeedConfigResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFeedConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedConfigInfo = FeedConfigInfo.decode(reader, reader.uint32());
          break;
        case 2:
          message.feedConfig = FeedConfig.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): QueryFeedConfigResponse {
    return {
      feedConfigInfo: isSet(object.feedConfigInfo) ? FeedConfigInfo.fromJSON(object.feedConfigInfo) : undefined,
      feedConfig: isSet(object.feedConfig) ? FeedConfig.fromJSON(object.feedConfig) : undefined,
    };
  },

  toJSON(message: QueryFeedConfigResponse): unknown {
    const obj: any = {};
    message.feedConfigInfo !== undefined &&
      (obj.feedConfigInfo = message.feedConfigInfo ? FeedConfigInfo.toJSON(message.feedConfigInfo) : undefined);
    message.feedConfig !== undefined &&
      (obj.feedConfig = message.feedConfig ? FeedConfig.toJSON(message.feedConfig) : undefined);
    return obj;
  },

  create(base?: DeepPartial<QueryFeedConfigResponse>): QueryFeedConfigResponse {
    return QueryFeedConfigResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<QueryFeedConfigResponse>): QueryFeedConfigResponse {
    const message = createBaseQueryFeedConfigResponse();
    message.feedConfigInfo = (object.feedConfigInfo !== undefined && object.feedConfigInfo !== null)
      ? FeedConfigInfo.fromPartial(object.feedConfigInfo)
      : undefined;
    message.feedConfig = (object.feedConfig !== undefined && object.feedConfig !== null)
      ? FeedConfig.fromPartial(object.feedConfig)
      : undefined;
    return message;
  },
};

function createBaseQueryFeedConfigInfoRequest(): QueryFeedConfigInfoRequest {
  return { feedId: "" };
}

export const QueryFeedConfigInfoRequest = {
  encode(message: QueryFeedConfigInfoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedId !== "") {
      writer.uint32(10).string(message.feedId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeedConfigInfoRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFeedConfigInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedId = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): QueryFeedConfigInfoRequest {
    return { feedId: isSet(object.feedId) ? String(object.feedId) : "" };
  },

  toJSON(message: QueryFeedConfigInfoRequest): unknown {
    const obj: any = {};
    message.feedId !== undefined && (obj.feedId = message.feedId);
    return obj;
  },

  create(base?: DeepPartial<QueryFeedConfigInfoRequest>): QueryFeedConfigInfoRequest {
    return QueryFeedConfigInfoRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<QueryFeedConfigInfoRequest>): QueryFeedConfigInfoRequest {
    const message = createBaseQueryFeedConfigInfoRequest();
    message.feedId = object.feedId ?? "";
    return message;
  },
};

function createBaseQueryFeedConfigInfoResponse(): QueryFeedConfigInfoResponse {
  return { feedConfigInfo: undefined, epochAndRound: undefined };
}

export const QueryFeedConfigInfoResponse = {
  encode(message: QueryFeedConfigInfoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedConfigInfo !== undefined) {
      FeedConfigInfo.encode(message.feedConfigInfo, writer.uint32(10).fork()).ldelim();
    }
    if (message.epochAndRound !== undefined) {
      EpochAndRound.encode(message.epochAndRound, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeedConfigInfoResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFeedConfigInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedConfigInfo = FeedConfigInfo.decode(reader, reader.uint32());
          break;
        case 2:
          message.epochAndRound = EpochAndRound.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): QueryFeedConfigInfoResponse {
    return {
      feedConfigInfo: isSet(object.feedConfigInfo) ? FeedConfigInfo.fromJSON(object.feedConfigInfo) : undefined,
      epochAndRound: isSet(object.epochAndRound) ? EpochAndRound.fromJSON(object.epochAndRound) : undefined,
    };
  },

  toJSON(message: QueryFeedConfigInfoResponse): unknown {
    const obj: any = {};
    message.feedConfigInfo !== undefined &&
      (obj.feedConfigInfo = message.feedConfigInfo ? FeedConfigInfo.toJSON(message.feedConfigInfo) : undefined);
    message.epochAndRound !== undefined &&
      (obj.epochAndRound = message.epochAndRound ? EpochAndRound.toJSON(message.epochAndRound) : undefined);
    return obj;
  },

  create(base?: DeepPartial<QueryFeedConfigInfoResponse>): QueryFeedConfigInfoResponse {
    return QueryFeedConfigInfoResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<QueryFeedConfigInfoResponse>): QueryFeedConfigInfoResponse {
    const message = createBaseQueryFeedConfigInfoResponse();
    message.feedConfigInfo = (object.feedConfigInfo !== undefined && object.feedConfigInfo !== null)
      ? FeedConfigInfo.fromPartial(object.feedConfigInfo)
      : undefined;
    message.epochAndRound = (object.epochAndRound !== undefined && object.epochAndRound !== null)
      ? EpochAndRound.fromPartial(object.epochAndRound)
      : undefined;
    return message;
  },
};

function createBaseQueryLatestRoundRequest(): QueryLatestRoundRequest {
  return { feedId: "" };
}

export const QueryLatestRoundRequest = {
  encode(message: QueryLatestRoundRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedId !== "") {
      writer.uint32(10).string(message.feedId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLatestRoundRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestRoundRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedId = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): QueryLatestRoundRequest {
    return { feedId: isSet(object.feedId) ? String(object.feedId) : "" };
  },

  toJSON(message: QueryLatestRoundRequest): unknown {
    const obj: any = {};
    message.feedId !== undefined && (obj.feedId = message.feedId);
    return obj;
  },

  create(base?: DeepPartial<QueryLatestRoundRequest>): QueryLatestRoundRequest {
    return QueryLatestRoundRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<QueryLatestRoundRequest>): QueryLatestRoundRequest {
    const message = createBaseQueryLatestRoundRequest();
    message.feedId = object.feedId ?? "";
    return message;
  },
};

function createBaseQueryLatestRoundResponse(): QueryLatestRoundResponse {
  return { latestRoundId: "0", data: undefined };
}

export const QueryLatestRoundResponse = {
  encode(message: QueryLatestRoundResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.latestRoundId !== "0") {
      writer.uint32(8).uint64(message.latestRoundId);
    }
    if (message.data !== undefined) {
      Transmission.encode(message.data, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLatestRoundResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestRoundResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.latestRoundId = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.data = Transmission.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): QueryLatestRoundResponse {
    return {
      latestRoundId: isSet(object.latestRoundId) ? String(object.latestRoundId) : "0",
      data: isSet(object.data) ? Transmission.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: QueryLatestRoundResponse): unknown {
    const obj: any = {};
    message.latestRoundId !== undefined && (obj.latestRoundId = message.latestRoundId);
    message.data !== undefined && (obj.data = message.data ? Transmission.toJSON(message.data) : undefined);
    return obj;
  },

  create(base?: DeepPartial<QueryLatestRoundResponse>): QueryLatestRoundResponse {
    return QueryLatestRoundResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<QueryLatestRoundResponse>): QueryLatestRoundResponse {
    const message = createBaseQueryLatestRoundResponse();
    message.latestRoundId = object.latestRoundId ?? "0";
    message.data = (object.data !== undefined && object.data !== null)
      ? Transmission.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseQueryLatestTransmissionDetailsRequest(): QueryLatestTransmissionDetailsRequest {
  return { feedId: "" };
}

export const QueryLatestTransmissionDetailsRequest = {
  encode(message: QueryLatestTransmissionDetailsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedId !== "") {
      writer.uint32(10).string(message.feedId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLatestTransmissionDetailsRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestTransmissionDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedId = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): QueryLatestTransmissionDetailsRequest {
    return { feedId: isSet(object.feedId) ? String(object.feedId) : "" };
  },

  toJSON(message: QueryLatestTransmissionDetailsRequest): unknown {
    const obj: any = {};
    message.feedId !== undefined && (obj.feedId = message.feedId);
    return obj;
  },

  create(base?: DeepPartial<QueryLatestTransmissionDetailsRequest>): QueryLatestTransmissionDetailsRequest {
    return QueryLatestTransmissionDetailsRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<QueryLatestTransmissionDetailsRequest>): QueryLatestTransmissionDetailsRequest {
    const message = createBaseQueryLatestTransmissionDetailsRequest();
    message.feedId = object.feedId ?? "";
    return message;
  },
};

function createBaseQueryLatestTransmissionDetailsResponse(): QueryLatestTransmissionDetailsResponse {
  return { configDigest: new Uint8Array(), epochAndRound: undefined, data: undefined };
}

export const QueryLatestTransmissionDetailsResponse = {
  encode(message: QueryLatestTransmissionDetailsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.configDigest.length !== 0) {
      writer.uint32(10).bytes(message.configDigest);
    }
    if (message.epochAndRound !== undefined) {
      EpochAndRound.encode(message.epochAndRound, writer.uint32(18).fork()).ldelim();
    }
    if (message.data !== undefined) {
      Transmission.encode(message.data, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLatestTransmissionDetailsResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestTransmissionDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.configDigest = reader.bytes();
          break;
        case 2:
          message.epochAndRound = EpochAndRound.decode(reader, reader.uint32());
          break;
        case 3:
          message.data = Transmission.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): QueryLatestTransmissionDetailsResponse {
    return {
      configDigest: isSet(object.configDigest) ? bytesFromBase64(object.configDigest) : new Uint8Array(),
      epochAndRound: isSet(object.epochAndRound) ? EpochAndRound.fromJSON(object.epochAndRound) : undefined,
      data: isSet(object.data) ? Transmission.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: QueryLatestTransmissionDetailsResponse): unknown {
    const obj: any = {};
    message.configDigest !== undefined &&
      (obj.configDigest = base64FromBytes(
        message.configDigest !== undefined ? message.configDigest : new Uint8Array(),
      ));
    message.epochAndRound !== undefined &&
      (obj.epochAndRound = message.epochAndRound ? EpochAndRound.toJSON(message.epochAndRound) : undefined);
    message.data !== undefined && (obj.data = message.data ? Transmission.toJSON(message.data) : undefined);
    return obj;
  },

  create(base?: DeepPartial<QueryLatestTransmissionDetailsResponse>): QueryLatestTransmissionDetailsResponse {
    return QueryLatestTransmissionDetailsResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<QueryLatestTransmissionDetailsResponse>): QueryLatestTransmissionDetailsResponse {
    const message = createBaseQueryLatestTransmissionDetailsResponse();
    message.configDigest = object.configDigest ?? new Uint8Array();
    message.epochAndRound = (object.epochAndRound !== undefined && object.epochAndRound !== null)
      ? EpochAndRound.fromPartial(object.epochAndRound)
      : undefined;
    message.data = (object.data !== undefined && object.data !== null)
      ? Transmission.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseQueryOwedAmountRequest(): QueryOwedAmountRequest {
  return { transmitter: "" };
}

export const QueryOwedAmountRequest = {
  encode(message: QueryOwedAmountRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.transmitter !== "") {
      writer.uint32(10).string(message.transmitter);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryOwedAmountRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOwedAmountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.transmitter = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): QueryOwedAmountRequest {
    return { transmitter: isSet(object.transmitter) ? String(object.transmitter) : "" };
  },

  toJSON(message: QueryOwedAmountRequest): unknown {
    const obj: any = {};
    message.transmitter !== undefined && (obj.transmitter = message.transmitter);
    return obj;
  },

  create(base?: DeepPartial<QueryOwedAmountRequest>): QueryOwedAmountRequest {
    return QueryOwedAmountRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<QueryOwedAmountRequest>): QueryOwedAmountRequest {
    const message = createBaseQueryOwedAmountRequest();
    message.transmitter = object.transmitter ?? "";
    return message;
  },
};

function createBaseQueryOwedAmountResponse(): QueryOwedAmountResponse {
  return { amount: undefined };
}

export const QueryOwedAmountResponse = {
  encode(message: QueryOwedAmountResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryOwedAmountResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOwedAmountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.amount = Coin.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): QueryOwedAmountResponse {
    return { amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined };
  },

  toJSON(message: QueryOwedAmountResponse): unknown {
    const obj: any = {};
    message.amount !== undefined && (obj.amount = message.amount ? Coin.toJSON(message.amount) : undefined);
    return obj;
  },

  create(base?: DeepPartial<QueryOwedAmountResponse>): QueryOwedAmountResponse {
    return QueryOwedAmountResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<QueryOwedAmountResponse>): QueryOwedAmountResponse {
    const message = createBaseQueryOwedAmountResponse();
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    return message;
  },
};

function createBaseQueryModuleStateRequest(): QueryModuleStateRequest {
  return {};
}

export const QueryModuleStateRequest = {
  encode(_: QueryModuleStateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryModuleStateRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryModuleStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): QueryModuleStateRequest {
    return {};
  },

  toJSON(_: QueryModuleStateRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryModuleStateRequest>): QueryModuleStateRequest {
    return QueryModuleStateRequest.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<QueryModuleStateRequest>): QueryModuleStateRequest {
    const message = createBaseQueryModuleStateRequest();
    return message;
  },
};

function createBaseQueryModuleStateResponse(): QueryModuleStateResponse {
  return { state: undefined };
}

export const QueryModuleStateResponse = {
  encode(message: QueryModuleStateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.state !== undefined) {
      GenesisState.encode(message.state, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryModuleStateResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryModuleStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.state = GenesisState.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): QueryModuleStateResponse {
    return { state: isSet(object.state) ? GenesisState.fromJSON(object.state) : undefined };
  },

  toJSON(message: QueryModuleStateResponse): unknown {
    const obj: any = {};
    message.state !== undefined && (obj.state = message.state ? GenesisState.toJSON(message.state) : undefined);
    return obj;
  },

  create(base?: DeepPartial<QueryModuleStateResponse>): QueryModuleStateResponse {
    return QueryModuleStateResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<QueryModuleStateResponse>): QueryModuleStateResponse {
    const message = createBaseQueryModuleStateResponse();
    message.state = (object.state !== undefined && object.state !== null)
      ? GenesisState.fromPartial(object.state)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service for OCR module. */
export interface Query {
  Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
  /** Retrieves the OCR FeedConfig for a given FeedId */
  FeedConfig(request: DeepPartial<QueryFeedConfigRequest>, metadata?: grpc.Metadata): Promise<QueryFeedConfigResponse>;
  /** Retrieves the OCR FeedConfigInfo for a given FeedId */
  FeedConfigInfo(
    request: DeepPartial<QueryFeedConfigInfoRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryFeedConfigInfoResponse>;
  /** Retrieves latest round ID and data, including median answer for that round */
  LatestRound(
    request: DeepPartial<QueryLatestRoundRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryLatestRoundResponse>;
  /** LatestTransmissionDetails returns details about the latest trasmission recorded on chain for the given feed ID. */
  LatestTransmissionDetails(
    request: DeepPartial<QueryLatestTransmissionDetailsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryLatestTransmissionDetailsResponse>;
  /** Retrieves transmitter's owed amount */
  OwedAmount(request: DeepPartial<QueryOwedAmountRequest>, metadata?: grpc.Metadata): Promise<QueryOwedAmountResponse>;
  /** Retrieves the entire OCR module's state */
  OcrModuleState(
    request: DeepPartial<QueryModuleStateRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryModuleStateResponse>;
}

export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.FeedConfig = this.FeedConfig.bind(this);
    this.FeedConfigInfo = this.FeedConfigInfo.bind(this);
    this.LatestRound = this.LatestRound.bind(this);
    this.LatestTransmissionDetails = this.LatestTransmissionDetails.bind(this);
    this.OwedAmount = this.OwedAmount.bind(this);
    this.OcrModuleState = this.OcrModuleState.bind(this);
  }

  Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse> {
    return this.rpc.unary(QueryParamsDesc, QueryParamsRequest.fromPartial(request), metadata);
  }

  FeedConfig(request: DeepPartial<QueryFeedConfigRequest>, metadata?: grpc.Metadata): Promise<QueryFeedConfigResponse> {
    return this.rpc.unary(QueryFeedConfigDesc, QueryFeedConfigRequest.fromPartial(request), metadata);
  }

  FeedConfigInfo(
    request: DeepPartial<QueryFeedConfigInfoRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryFeedConfigInfoResponse> {
    return this.rpc.unary(QueryFeedConfigInfoDesc, QueryFeedConfigInfoRequest.fromPartial(request), metadata);
  }

  LatestRound(
    request: DeepPartial<QueryLatestRoundRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryLatestRoundResponse> {
    return this.rpc.unary(QueryLatestRoundDesc, QueryLatestRoundRequest.fromPartial(request), metadata);
  }

  LatestTransmissionDetails(
    request: DeepPartial<QueryLatestTransmissionDetailsRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryLatestTransmissionDetailsResponse> {
    return this.rpc.unary(
      QueryLatestTransmissionDetailsDesc,
      QueryLatestTransmissionDetailsRequest.fromPartial(request),
      metadata,
    );
  }

  OwedAmount(request: DeepPartial<QueryOwedAmountRequest>, metadata?: grpc.Metadata): Promise<QueryOwedAmountResponse> {
    return this.rpc.unary(QueryOwedAmountDesc, QueryOwedAmountRequest.fromPartial(request), metadata);
  }

  OcrModuleState(
    request: DeepPartial<QueryModuleStateRequest>,
    metadata?: grpc.Metadata,
  ): Promise<QueryModuleStateResponse> {
    return this.rpc.unary(QueryOcrModuleStateDesc, QueryModuleStateRequest.fromPartial(request), metadata);
  }
}

export const QueryDesc = { serviceName: "injective.ocr.v1beta1.Query" };

export const QueryParamsDesc: UnaryMethodDefinitionish = {
  methodName: "Params",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryParamsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryParamsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryFeedConfigDesc: UnaryMethodDefinitionish = {
  methodName: "FeedConfig",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryFeedConfigRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryFeedConfigResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryFeedConfigInfoDesc: UnaryMethodDefinitionish = {
  methodName: "FeedConfigInfo",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryFeedConfigInfoRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryFeedConfigInfoResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryLatestRoundDesc: UnaryMethodDefinitionish = {
  methodName: "LatestRound",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryLatestRoundRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryLatestRoundResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryLatestTransmissionDetailsDesc: UnaryMethodDefinitionish = {
  methodName: "LatestTransmissionDetails",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryLatestTransmissionDetailsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryLatestTransmissionDetailsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryOwedAmountDesc: UnaryMethodDefinitionish = {
  methodName: "OwedAmount",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryOwedAmountRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryOwedAmountResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const QueryOcrModuleStateDesc: UnaryMethodDefinitionish = {
  methodName: "OcrModuleState",
  service: QueryDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return QueryModuleStateRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = QueryModuleStateResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata || this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if (tsProtoGlobalThis.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if (tsProtoGlobalThis.Buffer) {
    return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends tsProtoGlobalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
