/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { ClaimType, claimTypeFromJSON, claimTypeToJSON } from "./attestation";
import { BridgeValidator } from "./types";

export interface EventAttestationObserved {
  attestationType: ClaimType;
  bridgeContract: string;
  bridgeChainId: string;
  attestationId: Uint8Array;
  nonce: string;
}

export interface EventBridgeWithdrawCanceled {
  bridgeContract: string;
  bridgeChainId: string;
}

export interface EventOutgoingBatch {
  denom: string;
  orchestratorAddress: string;
  batchNonce: string;
  batchTimeout: string;
  batchTxIds: string[];
}

export interface EventOutgoingBatchCanceled {
  bridgeContract: string;
  bridgeChainId: string;
  batchId: string;
  nonce: string;
}

export interface EventValsetUpdateRequest {
  valsetNonce: string;
  valsetHeight: string;
  valsetMembers: BridgeValidator[];
  rewardAmount: string;
  rewardToken: string;
}

export interface EventSetOrchestratorAddresses {
  validatorAddress: string;
  orchestratorAddress: string;
  operatorEthAddress: string;
}

export interface EventValsetConfirm {
  valsetNonce: string;
  orchestratorAddress: string;
}

export interface EventSendToEth {
  outgoingTxId: string;
  sender: string;
  receiver: string;
  amount: string;
  bridgeFee: string;
}

export interface EventConfirmBatch {
  batchNonce: string;
  orchestratorAddress: string;
}

export interface EventAttestationVote {
  eventNonce: string;
  attestationId: Uint8Array;
  voter: string;
}

export interface EventDepositClaim {
  eventNonce: string;
  eventHeight: string;
  attestationId: Uint8Array;
  ethereumSender: string;
  cosmosReceiver: string;
  tokenContract: string;
  amount: string;
  orchestratorAddress: string;
  data: string;
}

export interface EventWithdrawClaim {
  eventNonce: string;
  eventHeight: string;
  attestationId: Uint8Array;
  batchNonce: string;
  tokenContract: string;
  orchestratorAddress: string;
}

export interface EventERC20DeployedClaim {
  eventNonce: string;
  eventHeight: string;
  attestationId: Uint8Array;
  cosmosDenom: string;
  tokenContract: string;
  name: string;
  symbol: string;
  decimals: string;
  orchestratorAddress: string;
}

export interface EventValsetUpdateClaim {
  eventNonce: string;
  eventHeight: string;
  attestationId: Uint8Array;
  valsetNonce: string;
  valsetMembers: BridgeValidator[];
  rewardAmount: string;
  rewardToken: string;
  orchestratorAddress: string;
}

export interface EventCancelSendToEth {
  outgoingTxId: string;
}

export interface EventSubmitBadSignatureEvidence {
  badEthSignature: string;
  badEthSignatureSubject: string;
}

function createBaseEventAttestationObserved(): EventAttestationObserved {
  return { attestationType: 0, bridgeContract: "", bridgeChainId: "0", attestationId: new Uint8Array(), nonce: "0" };
}

export const EventAttestationObserved = {
  encode(message: EventAttestationObserved, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.attestationType !== 0) {
      writer.uint32(8).int32(message.attestationType);
    }
    if (message.bridgeContract !== "") {
      writer.uint32(18).string(message.bridgeContract);
    }
    if (message.bridgeChainId !== "0") {
      writer.uint32(24).uint64(message.bridgeChainId);
    }
    if (message.attestationId.length !== 0) {
      writer.uint32(34).bytes(message.attestationId);
    }
    if (message.nonce !== "0") {
      writer.uint32(40).uint64(message.nonce);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventAttestationObserved {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttestationObserved();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.attestationType = reader.int32() as any;
          break;
        case 2:
          message.bridgeContract = reader.string();
          break;
        case 3:
          message.bridgeChainId = longToString(reader.uint64() as Long);
          break;
        case 4:
          message.attestationId = reader.bytes();
          break;
        case 5:
          message.nonce = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventAttestationObserved {
    return {
      attestationType: isSet(object.attestationType) ? claimTypeFromJSON(object.attestationType) : 0,
      bridgeContract: isSet(object.bridgeContract) ? String(object.bridgeContract) : "",
      bridgeChainId: isSet(object.bridgeChainId) ? String(object.bridgeChainId) : "0",
      attestationId: isSet(object.attestationId) ? bytesFromBase64(object.attestationId) : new Uint8Array(),
      nonce: isSet(object.nonce) ? String(object.nonce) : "0",
    };
  },

  toJSON(message: EventAttestationObserved): unknown {
    const obj: any = {};
    message.attestationType !== undefined && (obj.attestationType = claimTypeToJSON(message.attestationType));
    message.bridgeContract !== undefined && (obj.bridgeContract = message.bridgeContract);
    message.bridgeChainId !== undefined && (obj.bridgeChainId = message.bridgeChainId);
    message.attestationId !== undefined &&
      (obj.attestationId = base64FromBytes(
        message.attestationId !== undefined ? message.attestationId : new Uint8Array(),
      ));
    message.nonce !== undefined && (obj.nonce = message.nonce);
    return obj;
  },

  create(base?: DeepPartial<EventAttestationObserved>): EventAttestationObserved {
    return EventAttestationObserved.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventAttestationObserved>): EventAttestationObserved {
    const message = createBaseEventAttestationObserved();
    message.attestationType = object.attestationType ?? 0;
    message.bridgeContract = object.bridgeContract ?? "";
    message.bridgeChainId = object.bridgeChainId ?? "0";
    message.attestationId = object.attestationId ?? new Uint8Array();
    message.nonce = object.nonce ?? "0";
    return message;
  },
};

function createBaseEventBridgeWithdrawCanceled(): EventBridgeWithdrawCanceled {
  return { bridgeContract: "", bridgeChainId: "0" };
}

export const EventBridgeWithdrawCanceled = {
  encode(message: EventBridgeWithdrawCanceled, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bridgeContract !== "") {
      writer.uint32(10).string(message.bridgeContract);
    }
    if (message.bridgeChainId !== "0") {
      writer.uint32(16).uint64(message.bridgeChainId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventBridgeWithdrawCanceled {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBridgeWithdrawCanceled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.bridgeContract = reader.string();
          break;
        case 2:
          message.bridgeChainId = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventBridgeWithdrawCanceled {
    return {
      bridgeContract: isSet(object.bridgeContract) ? String(object.bridgeContract) : "",
      bridgeChainId: isSet(object.bridgeChainId) ? String(object.bridgeChainId) : "0",
    };
  },

  toJSON(message: EventBridgeWithdrawCanceled): unknown {
    const obj: any = {};
    message.bridgeContract !== undefined && (obj.bridgeContract = message.bridgeContract);
    message.bridgeChainId !== undefined && (obj.bridgeChainId = message.bridgeChainId);
    return obj;
  },

  create(base?: DeepPartial<EventBridgeWithdrawCanceled>): EventBridgeWithdrawCanceled {
    return EventBridgeWithdrawCanceled.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventBridgeWithdrawCanceled>): EventBridgeWithdrawCanceled {
    const message = createBaseEventBridgeWithdrawCanceled();
    message.bridgeContract = object.bridgeContract ?? "";
    message.bridgeChainId = object.bridgeChainId ?? "0";
    return message;
  },
};

function createBaseEventOutgoingBatch(): EventOutgoingBatch {
  return { denom: "", orchestratorAddress: "", batchNonce: "0", batchTimeout: "0", batchTxIds: [] };
}

export const EventOutgoingBatch = {
  encode(message: EventOutgoingBatch, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.orchestratorAddress !== "") {
      writer.uint32(18).string(message.orchestratorAddress);
    }
    if (message.batchNonce !== "0") {
      writer.uint32(24).uint64(message.batchNonce);
    }
    if (message.batchTimeout !== "0") {
      writer.uint32(32).uint64(message.batchTimeout);
    }
    writer.uint32(42).fork();
    for (const v of message.batchTxIds) {
      writer.uint64(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventOutgoingBatch {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOutgoingBatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;
        case 2:
          message.orchestratorAddress = reader.string();
          break;
        case 3:
          message.batchNonce = longToString(reader.uint64() as Long);
          break;
        case 4:
          message.batchTimeout = longToString(reader.uint64() as Long);
          break;
        case 5:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.batchTxIds.push(longToString(reader.uint64() as Long));
            }
          } else {
            message.batchTxIds.push(longToString(reader.uint64() as Long));
          }
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventOutgoingBatch {
    return {
      denom: isSet(object.denom) ? String(object.denom) : "",
      orchestratorAddress: isSet(object.orchestratorAddress) ? String(object.orchestratorAddress) : "",
      batchNonce: isSet(object.batchNonce) ? String(object.batchNonce) : "0",
      batchTimeout: isSet(object.batchTimeout) ? String(object.batchTimeout) : "0",
      batchTxIds: Array.isArray(object?.batchTxIds) ? object.batchTxIds.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: EventOutgoingBatch): unknown {
    const obj: any = {};
    message.denom !== undefined && (obj.denom = message.denom);
    message.orchestratorAddress !== undefined && (obj.orchestratorAddress = message.orchestratorAddress);
    message.batchNonce !== undefined && (obj.batchNonce = message.batchNonce);
    message.batchTimeout !== undefined && (obj.batchTimeout = message.batchTimeout);
    if (message.batchTxIds) {
      obj.batchTxIds = message.batchTxIds.map((e) => e);
    } else {
      obj.batchTxIds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<EventOutgoingBatch>): EventOutgoingBatch {
    return EventOutgoingBatch.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventOutgoingBatch>): EventOutgoingBatch {
    const message = createBaseEventOutgoingBatch();
    message.denom = object.denom ?? "";
    message.orchestratorAddress = object.orchestratorAddress ?? "";
    message.batchNonce = object.batchNonce ?? "0";
    message.batchTimeout = object.batchTimeout ?? "0";
    message.batchTxIds = object.batchTxIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseEventOutgoingBatchCanceled(): EventOutgoingBatchCanceled {
  return { bridgeContract: "", bridgeChainId: "0", batchId: "0", nonce: "0" };
}

export const EventOutgoingBatchCanceled = {
  encode(message: EventOutgoingBatchCanceled, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bridgeContract !== "") {
      writer.uint32(10).string(message.bridgeContract);
    }
    if (message.bridgeChainId !== "0") {
      writer.uint32(16).uint64(message.bridgeChainId);
    }
    if (message.batchId !== "0") {
      writer.uint32(24).uint64(message.batchId);
    }
    if (message.nonce !== "0") {
      writer.uint32(32).uint64(message.nonce);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventOutgoingBatchCanceled {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOutgoingBatchCanceled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.bridgeContract = reader.string();
          break;
        case 2:
          message.bridgeChainId = longToString(reader.uint64() as Long);
          break;
        case 3:
          message.batchId = longToString(reader.uint64() as Long);
          break;
        case 4:
          message.nonce = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventOutgoingBatchCanceled {
    return {
      bridgeContract: isSet(object.bridgeContract) ? String(object.bridgeContract) : "",
      bridgeChainId: isSet(object.bridgeChainId) ? String(object.bridgeChainId) : "0",
      batchId: isSet(object.batchId) ? String(object.batchId) : "0",
      nonce: isSet(object.nonce) ? String(object.nonce) : "0",
    };
  },

  toJSON(message: EventOutgoingBatchCanceled): unknown {
    const obj: any = {};
    message.bridgeContract !== undefined && (obj.bridgeContract = message.bridgeContract);
    message.bridgeChainId !== undefined && (obj.bridgeChainId = message.bridgeChainId);
    message.batchId !== undefined && (obj.batchId = message.batchId);
    message.nonce !== undefined && (obj.nonce = message.nonce);
    return obj;
  },

  create(base?: DeepPartial<EventOutgoingBatchCanceled>): EventOutgoingBatchCanceled {
    return EventOutgoingBatchCanceled.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventOutgoingBatchCanceled>): EventOutgoingBatchCanceled {
    const message = createBaseEventOutgoingBatchCanceled();
    message.bridgeContract = object.bridgeContract ?? "";
    message.bridgeChainId = object.bridgeChainId ?? "0";
    message.batchId = object.batchId ?? "0";
    message.nonce = object.nonce ?? "0";
    return message;
  },
};

function createBaseEventValsetUpdateRequest(): EventValsetUpdateRequest {
  return { valsetNonce: "0", valsetHeight: "0", valsetMembers: [], rewardAmount: "", rewardToken: "" };
}

export const EventValsetUpdateRequest = {
  encode(message: EventValsetUpdateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.valsetNonce !== "0") {
      writer.uint32(8).uint64(message.valsetNonce);
    }
    if (message.valsetHeight !== "0") {
      writer.uint32(16).uint64(message.valsetHeight);
    }
    for (const v of message.valsetMembers) {
      BridgeValidator.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.rewardAmount !== "") {
      writer.uint32(34).string(message.rewardAmount);
    }
    if (message.rewardToken !== "") {
      writer.uint32(42).string(message.rewardToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventValsetUpdateRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventValsetUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.valsetNonce = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.valsetHeight = longToString(reader.uint64() as Long);
          break;
        case 3:
          message.valsetMembers.push(BridgeValidator.decode(reader, reader.uint32()));
          break;
        case 4:
          message.rewardAmount = reader.string();
          break;
        case 5:
          message.rewardToken = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventValsetUpdateRequest {
    return {
      valsetNonce: isSet(object.valsetNonce) ? String(object.valsetNonce) : "0",
      valsetHeight: isSet(object.valsetHeight) ? String(object.valsetHeight) : "0",
      valsetMembers: Array.isArray(object?.valsetMembers)
        ? object.valsetMembers.map((e: any) => BridgeValidator.fromJSON(e))
        : [],
      rewardAmount: isSet(object.rewardAmount) ? String(object.rewardAmount) : "",
      rewardToken: isSet(object.rewardToken) ? String(object.rewardToken) : "",
    };
  },

  toJSON(message: EventValsetUpdateRequest): unknown {
    const obj: any = {};
    message.valsetNonce !== undefined && (obj.valsetNonce = message.valsetNonce);
    message.valsetHeight !== undefined && (obj.valsetHeight = message.valsetHeight);
    if (message.valsetMembers) {
      obj.valsetMembers = message.valsetMembers.map((e) => e ? BridgeValidator.toJSON(e) : undefined);
    } else {
      obj.valsetMembers = [];
    }
    message.rewardAmount !== undefined && (obj.rewardAmount = message.rewardAmount);
    message.rewardToken !== undefined && (obj.rewardToken = message.rewardToken);
    return obj;
  },

  create(base?: DeepPartial<EventValsetUpdateRequest>): EventValsetUpdateRequest {
    return EventValsetUpdateRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventValsetUpdateRequest>): EventValsetUpdateRequest {
    const message = createBaseEventValsetUpdateRequest();
    message.valsetNonce = object.valsetNonce ?? "0";
    message.valsetHeight = object.valsetHeight ?? "0";
    message.valsetMembers = object.valsetMembers?.map((e) => BridgeValidator.fromPartial(e)) || [];
    message.rewardAmount = object.rewardAmount ?? "";
    message.rewardToken = object.rewardToken ?? "";
    return message;
  },
};

function createBaseEventSetOrchestratorAddresses(): EventSetOrchestratorAddresses {
  return { validatorAddress: "", orchestratorAddress: "", operatorEthAddress: "" };
}

export const EventSetOrchestratorAddresses = {
  encode(message: EventSetOrchestratorAddresses, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.validatorAddress !== "") {
      writer.uint32(10).string(message.validatorAddress);
    }
    if (message.orchestratorAddress !== "") {
      writer.uint32(18).string(message.orchestratorAddress);
    }
    if (message.operatorEthAddress !== "") {
      writer.uint32(26).string(message.operatorEthAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventSetOrchestratorAddresses {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSetOrchestratorAddresses();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.validatorAddress = reader.string();
          break;
        case 2:
          message.orchestratorAddress = reader.string();
          break;
        case 3:
          message.operatorEthAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventSetOrchestratorAddresses {
    return {
      validatorAddress: isSet(object.validatorAddress) ? String(object.validatorAddress) : "",
      orchestratorAddress: isSet(object.orchestratorAddress) ? String(object.orchestratorAddress) : "",
      operatorEthAddress: isSet(object.operatorEthAddress) ? String(object.operatorEthAddress) : "",
    };
  },

  toJSON(message: EventSetOrchestratorAddresses): unknown {
    const obj: any = {};
    message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
    message.orchestratorAddress !== undefined && (obj.orchestratorAddress = message.orchestratorAddress);
    message.operatorEthAddress !== undefined && (obj.operatorEthAddress = message.operatorEthAddress);
    return obj;
  },

  create(base?: DeepPartial<EventSetOrchestratorAddresses>): EventSetOrchestratorAddresses {
    return EventSetOrchestratorAddresses.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventSetOrchestratorAddresses>): EventSetOrchestratorAddresses {
    const message = createBaseEventSetOrchestratorAddresses();
    message.validatorAddress = object.validatorAddress ?? "";
    message.orchestratorAddress = object.orchestratorAddress ?? "";
    message.operatorEthAddress = object.operatorEthAddress ?? "";
    return message;
  },
};

function createBaseEventValsetConfirm(): EventValsetConfirm {
  return { valsetNonce: "0", orchestratorAddress: "" };
}

export const EventValsetConfirm = {
  encode(message: EventValsetConfirm, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.valsetNonce !== "0") {
      writer.uint32(8).uint64(message.valsetNonce);
    }
    if (message.orchestratorAddress !== "") {
      writer.uint32(18).string(message.orchestratorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventValsetConfirm {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventValsetConfirm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.valsetNonce = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.orchestratorAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventValsetConfirm {
    return {
      valsetNonce: isSet(object.valsetNonce) ? String(object.valsetNonce) : "0",
      orchestratorAddress: isSet(object.orchestratorAddress) ? String(object.orchestratorAddress) : "",
    };
  },

  toJSON(message: EventValsetConfirm): unknown {
    const obj: any = {};
    message.valsetNonce !== undefined && (obj.valsetNonce = message.valsetNonce);
    message.orchestratorAddress !== undefined && (obj.orchestratorAddress = message.orchestratorAddress);
    return obj;
  },

  create(base?: DeepPartial<EventValsetConfirm>): EventValsetConfirm {
    return EventValsetConfirm.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventValsetConfirm>): EventValsetConfirm {
    const message = createBaseEventValsetConfirm();
    message.valsetNonce = object.valsetNonce ?? "0";
    message.orchestratorAddress = object.orchestratorAddress ?? "";
    return message;
  },
};

function createBaseEventSendToEth(): EventSendToEth {
  return { outgoingTxId: "0", sender: "", receiver: "", amount: "", bridgeFee: "" };
}

export const EventSendToEth = {
  encode(message: EventSendToEth, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.outgoingTxId !== "0") {
      writer.uint32(8).uint64(message.outgoingTxId);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    if (message.receiver !== "") {
      writer.uint32(26).string(message.receiver);
    }
    if (message.amount !== "") {
      writer.uint32(34).string(message.amount);
    }
    if (message.bridgeFee !== "") {
      writer.uint32(42).string(message.bridgeFee);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventSendToEth {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSendToEth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.outgoingTxId = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.sender = reader.string();
          break;
        case 3:
          message.receiver = reader.string();
          break;
        case 4:
          message.amount = reader.string();
          break;
        case 5:
          message.bridgeFee = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventSendToEth {
    return {
      outgoingTxId: isSet(object.outgoingTxId) ? String(object.outgoingTxId) : "0",
      sender: isSet(object.sender) ? String(object.sender) : "",
      receiver: isSet(object.receiver) ? String(object.receiver) : "",
      amount: isSet(object.amount) ? String(object.amount) : "",
      bridgeFee: isSet(object.bridgeFee) ? String(object.bridgeFee) : "",
    };
  },

  toJSON(message: EventSendToEth): unknown {
    const obj: any = {};
    message.outgoingTxId !== undefined && (obj.outgoingTxId = message.outgoingTxId);
    message.sender !== undefined && (obj.sender = message.sender);
    message.receiver !== undefined && (obj.receiver = message.receiver);
    message.amount !== undefined && (obj.amount = message.amount);
    message.bridgeFee !== undefined && (obj.bridgeFee = message.bridgeFee);
    return obj;
  },

  create(base?: DeepPartial<EventSendToEth>): EventSendToEth {
    return EventSendToEth.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventSendToEth>): EventSendToEth {
    const message = createBaseEventSendToEth();
    message.outgoingTxId = object.outgoingTxId ?? "0";
    message.sender = object.sender ?? "";
    message.receiver = object.receiver ?? "";
    message.amount = object.amount ?? "";
    message.bridgeFee = object.bridgeFee ?? "";
    return message;
  },
};

function createBaseEventConfirmBatch(): EventConfirmBatch {
  return { batchNonce: "0", orchestratorAddress: "" };
}

export const EventConfirmBatch = {
  encode(message: EventConfirmBatch, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batchNonce !== "0") {
      writer.uint32(8).uint64(message.batchNonce);
    }
    if (message.orchestratorAddress !== "") {
      writer.uint32(18).string(message.orchestratorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventConfirmBatch {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventConfirmBatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.batchNonce = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.orchestratorAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventConfirmBatch {
    return {
      batchNonce: isSet(object.batchNonce) ? String(object.batchNonce) : "0",
      orchestratorAddress: isSet(object.orchestratorAddress) ? String(object.orchestratorAddress) : "",
    };
  },

  toJSON(message: EventConfirmBatch): unknown {
    const obj: any = {};
    message.batchNonce !== undefined && (obj.batchNonce = message.batchNonce);
    message.orchestratorAddress !== undefined && (obj.orchestratorAddress = message.orchestratorAddress);
    return obj;
  },

  create(base?: DeepPartial<EventConfirmBatch>): EventConfirmBatch {
    return EventConfirmBatch.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventConfirmBatch>): EventConfirmBatch {
    const message = createBaseEventConfirmBatch();
    message.batchNonce = object.batchNonce ?? "0";
    message.orchestratorAddress = object.orchestratorAddress ?? "";
    return message;
  },
};

function createBaseEventAttestationVote(): EventAttestationVote {
  return { eventNonce: "0", attestationId: new Uint8Array(), voter: "" };
}

export const EventAttestationVote = {
  encode(message: EventAttestationVote, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eventNonce !== "0") {
      writer.uint32(8).uint64(message.eventNonce);
    }
    if (message.attestationId.length !== 0) {
      writer.uint32(18).bytes(message.attestationId);
    }
    if (message.voter !== "") {
      writer.uint32(26).string(message.voter);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventAttestationVote {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttestationVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.eventNonce = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.attestationId = reader.bytes();
          break;
        case 3:
          message.voter = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventAttestationVote {
    return {
      eventNonce: isSet(object.eventNonce) ? String(object.eventNonce) : "0",
      attestationId: isSet(object.attestationId) ? bytesFromBase64(object.attestationId) : new Uint8Array(),
      voter: isSet(object.voter) ? String(object.voter) : "",
    };
  },

  toJSON(message: EventAttestationVote): unknown {
    const obj: any = {};
    message.eventNonce !== undefined && (obj.eventNonce = message.eventNonce);
    message.attestationId !== undefined &&
      (obj.attestationId = base64FromBytes(
        message.attestationId !== undefined ? message.attestationId : new Uint8Array(),
      ));
    message.voter !== undefined && (obj.voter = message.voter);
    return obj;
  },

  create(base?: DeepPartial<EventAttestationVote>): EventAttestationVote {
    return EventAttestationVote.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventAttestationVote>): EventAttestationVote {
    const message = createBaseEventAttestationVote();
    message.eventNonce = object.eventNonce ?? "0";
    message.attestationId = object.attestationId ?? new Uint8Array();
    message.voter = object.voter ?? "";
    return message;
  },
};

function createBaseEventDepositClaim(): EventDepositClaim {
  return {
    eventNonce: "0",
    eventHeight: "0",
    attestationId: new Uint8Array(),
    ethereumSender: "",
    cosmosReceiver: "",
    tokenContract: "",
    amount: "",
    orchestratorAddress: "",
    data: "",
  };
}

export const EventDepositClaim = {
  encode(message: EventDepositClaim, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eventNonce !== "0") {
      writer.uint32(8).uint64(message.eventNonce);
    }
    if (message.eventHeight !== "0") {
      writer.uint32(16).uint64(message.eventHeight);
    }
    if (message.attestationId.length !== 0) {
      writer.uint32(26).bytes(message.attestationId);
    }
    if (message.ethereumSender !== "") {
      writer.uint32(34).string(message.ethereumSender);
    }
    if (message.cosmosReceiver !== "") {
      writer.uint32(42).string(message.cosmosReceiver);
    }
    if (message.tokenContract !== "") {
      writer.uint32(50).string(message.tokenContract);
    }
    if (message.amount !== "") {
      writer.uint32(58).string(message.amount);
    }
    if (message.orchestratorAddress !== "") {
      writer.uint32(66).string(message.orchestratorAddress);
    }
    if (message.data !== "") {
      writer.uint32(74).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventDepositClaim {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventDepositClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.eventNonce = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.eventHeight = longToString(reader.uint64() as Long);
          break;
        case 3:
          message.attestationId = reader.bytes();
          break;
        case 4:
          message.ethereumSender = reader.string();
          break;
        case 5:
          message.cosmosReceiver = reader.string();
          break;
        case 6:
          message.tokenContract = reader.string();
          break;
        case 7:
          message.amount = reader.string();
          break;
        case 8:
          message.orchestratorAddress = reader.string();
          break;
        case 9:
          message.data = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventDepositClaim {
    return {
      eventNonce: isSet(object.eventNonce) ? String(object.eventNonce) : "0",
      eventHeight: isSet(object.eventHeight) ? String(object.eventHeight) : "0",
      attestationId: isSet(object.attestationId) ? bytesFromBase64(object.attestationId) : new Uint8Array(),
      ethereumSender: isSet(object.ethereumSender) ? String(object.ethereumSender) : "",
      cosmosReceiver: isSet(object.cosmosReceiver) ? String(object.cosmosReceiver) : "",
      tokenContract: isSet(object.tokenContract) ? String(object.tokenContract) : "",
      amount: isSet(object.amount) ? String(object.amount) : "",
      orchestratorAddress: isSet(object.orchestratorAddress) ? String(object.orchestratorAddress) : "",
      data: isSet(object.data) ? String(object.data) : "",
    };
  },

  toJSON(message: EventDepositClaim): unknown {
    const obj: any = {};
    message.eventNonce !== undefined && (obj.eventNonce = message.eventNonce);
    message.eventHeight !== undefined && (obj.eventHeight = message.eventHeight);
    message.attestationId !== undefined &&
      (obj.attestationId = base64FromBytes(
        message.attestationId !== undefined ? message.attestationId : new Uint8Array(),
      ));
    message.ethereumSender !== undefined && (obj.ethereumSender = message.ethereumSender);
    message.cosmosReceiver !== undefined && (obj.cosmosReceiver = message.cosmosReceiver);
    message.tokenContract !== undefined && (obj.tokenContract = message.tokenContract);
    message.amount !== undefined && (obj.amount = message.amount);
    message.orchestratorAddress !== undefined && (obj.orchestratorAddress = message.orchestratorAddress);
    message.data !== undefined && (obj.data = message.data);
    return obj;
  },

  create(base?: DeepPartial<EventDepositClaim>): EventDepositClaim {
    return EventDepositClaim.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventDepositClaim>): EventDepositClaim {
    const message = createBaseEventDepositClaim();
    message.eventNonce = object.eventNonce ?? "0";
    message.eventHeight = object.eventHeight ?? "0";
    message.attestationId = object.attestationId ?? new Uint8Array();
    message.ethereumSender = object.ethereumSender ?? "";
    message.cosmosReceiver = object.cosmosReceiver ?? "";
    message.tokenContract = object.tokenContract ?? "";
    message.amount = object.amount ?? "";
    message.orchestratorAddress = object.orchestratorAddress ?? "";
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseEventWithdrawClaim(): EventWithdrawClaim {
  return {
    eventNonce: "0",
    eventHeight: "0",
    attestationId: new Uint8Array(),
    batchNonce: "0",
    tokenContract: "",
    orchestratorAddress: "",
  };
}

export const EventWithdrawClaim = {
  encode(message: EventWithdrawClaim, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eventNonce !== "0") {
      writer.uint32(8).uint64(message.eventNonce);
    }
    if (message.eventHeight !== "0") {
      writer.uint32(16).uint64(message.eventHeight);
    }
    if (message.attestationId.length !== 0) {
      writer.uint32(26).bytes(message.attestationId);
    }
    if (message.batchNonce !== "0") {
      writer.uint32(32).uint64(message.batchNonce);
    }
    if (message.tokenContract !== "") {
      writer.uint32(42).string(message.tokenContract);
    }
    if (message.orchestratorAddress !== "") {
      writer.uint32(50).string(message.orchestratorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventWithdrawClaim {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventWithdrawClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.eventNonce = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.eventHeight = longToString(reader.uint64() as Long);
          break;
        case 3:
          message.attestationId = reader.bytes();
          break;
        case 4:
          message.batchNonce = longToString(reader.uint64() as Long);
          break;
        case 5:
          message.tokenContract = reader.string();
          break;
        case 6:
          message.orchestratorAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventWithdrawClaim {
    return {
      eventNonce: isSet(object.eventNonce) ? String(object.eventNonce) : "0",
      eventHeight: isSet(object.eventHeight) ? String(object.eventHeight) : "0",
      attestationId: isSet(object.attestationId) ? bytesFromBase64(object.attestationId) : new Uint8Array(),
      batchNonce: isSet(object.batchNonce) ? String(object.batchNonce) : "0",
      tokenContract: isSet(object.tokenContract) ? String(object.tokenContract) : "",
      orchestratorAddress: isSet(object.orchestratorAddress) ? String(object.orchestratorAddress) : "",
    };
  },

  toJSON(message: EventWithdrawClaim): unknown {
    const obj: any = {};
    message.eventNonce !== undefined && (obj.eventNonce = message.eventNonce);
    message.eventHeight !== undefined && (obj.eventHeight = message.eventHeight);
    message.attestationId !== undefined &&
      (obj.attestationId = base64FromBytes(
        message.attestationId !== undefined ? message.attestationId : new Uint8Array(),
      ));
    message.batchNonce !== undefined && (obj.batchNonce = message.batchNonce);
    message.tokenContract !== undefined && (obj.tokenContract = message.tokenContract);
    message.orchestratorAddress !== undefined && (obj.orchestratorAddress = message.orchestratorAddress);
    return obj;
  },

  create(base?: DeepPartial<EventWithdrawClaim>): EventWithdrawClaim {
    return EventWithdrawClaim.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventWithdrawClaim>): EventWithdrawClaim {
    const message = createBaseEventWithdrawClaim();
    message.eventNonce = object.eventNonce ?? "0";
    message.eventHeight = object.eventHeight ?? "0";
    message.attestationId = object.attestationId ?? new Uint8Array();
    message.batchNonce = object.batchNonce ?? "0";
    message.tokenContract = object.tokenContract ?? "";
    message.orchestratorAddress = object.orchestratorAddress ?? "";
    return message;
  },
};

function createBaseEventERC20DeployedClaim(): EventERC20DeployedClaim {
  return {
    eventNonce: "0",
    eventHeight: "0",
    attestationId: new Uint8Array(),
    cosmosDenom: "",
    tokenContract: "",
    name: "",
    symbol: "",
    decimals: "0",
    orchestratorAddress: "",
  };
}

export const EventERC20DeployedClaim = {
  encode(message: EventERC20DeployedClaim, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eventNonce !== "0") {
      writer.uint32(8).uint64(message.eventNonce);
    }
    if (message.eventHeight !== "0") {
      writer.uint32(16).uint64(message.eventHeight);
    }
    if (message.attestationId.length !== 0) {
      writer.uint32(26).bytes(message.attestationId);
    }
    if (message.cosmosDenom !== "") {
      writer.uint32(34).string(message.cosmosDenom);
    }
    if (message.tokenContract !== "") {
      writer.uint32(42).string(message.tokenContract);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.symbol !== "") {
      writer.uint32(58).string(message.symbol);
    }
    if (message.decimals !== "0") {
      writer.uint32(64).uint64(message.decimals);
    }
    if (message.orchestratorAddress !== "") {
      writer.uint32(74).string(message.orchestratorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventERC20DeployedClaim {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventERC20DeployedClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.eventNonce = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.eventHeight = longToString(reader.uint64() as Long);
          break;
        case 3:
          message.attestationId = reader.bytes();
          break;
        case 4:
          message.cosmosDenom = reader.string();
          break;
        case 5:
          message.tokenContract = reader.string();
          break;
        case 6:
          message.name = reader.string();
          break;
        case 7:
          message.symbol = reader.string();
          break;
        case 8:
          message.decimals = longToString(reader.uint64() as Long);
          break;
        case 9:
          message.orchestratorAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventERC20DeployedClaim {
    return {
      eventNonce: isSet(object.eventNonce) ? String(object.eventNonce) : "0",
      eventHeight: isSet(object.eventHeight) ? String(object.eventHeight) : "0",
      attestationId: isSet(object.attestationId) ? bytesFromBase64(object.attestationId) : new Uint8Array(),
      cosmosDenom: isSet(object.cosmosDenom) ? String(object.cosmosDenom) : "",
      tokenContract: isSet(object.tokenContract) ? String(object.tokenContract) : "",
      name: isSet(object.name) ? String(object.name) : "",
      symbol: isSet(object.symbol) ? String(object.symbol) : "",
      decimals: isSet(object.decimals) ? String(object.decimals) : "0",
      orchestratorAddress: isSet(object.orchestratorAddress) ? String(object.orchestratorAddress) : "",
    };
  },

  toJSON(message: EventERC20DeployedClaim): unknown {
    const obj: any = {};
    message.eventNonce !== undefined && (obj.eventNonce = message.eventNonce);
    message.eventHeight !== undefined && (obj.eventHeight = message.eventHeight);
    message.attestationId !== undefined &&
      (obj.attestationId = base64FromBytes(
        message.attestationId !== undefined ? message.attestationId : new Uint8Array(),
      ));
    message.cosmosDenom !== undefined && (obj.cosmosDenom = message.cosmosDenom);
    message.tokenContract !== undefined && (obj.tokenContract = message.tokenContract);
    message.name !== undefined && (obj.name = message.name);
    message.symbol !== undefined && (obj.symbol = message.symbol);
    message.decimals !== undefined && (obj.decimals = message.decimals);
    message.orchestratorAddress !== undefined && (obj.orchestratorAddress = message.orchestratorAddress);
    return obj;
  },

  create(base?: DeepPartial<EventERC20DeployedClaim>): EventERC20DeployedClaim {
    return EventERC20DeployedClaim.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventERC20DeployedClaim>): EventERC20DeployedClaim {
    const message = createBaseEventERC20DeployedClaim();
    message.eventNonce = object.eventNonce ?? "0";
    message.eventHeight = object.eventHeight ?? "0";
    message.attestationId = object.attestationId ?? new Uint8Array();
    message.cosmosDenom = object.cosmosDenom ?? "";
    message.tokenContract = object.tokenContract ?? "";
    message.name = object.name ?? "";
    message.symbol = object.symbol ?? "";
    message.decimals = object.decimals ?? "0";
    message.orchestratorAddress = object.orchestratorAddress ?? "";
    return message;
  },
};

function createBaseEventValsetUpdateClaim(): EventValsetUpdateClaim {
  return {
    eventNonce: "0",
    eventHeight: "0",
    attestationId: new Uint8Array(),
    valsetNonce: "0",
    valsetMembers: [],
    rewardAmount: "",
    rewardToken: "",
    orchestratorAddress: "",
  };
}

export const EventValsetUpdateClaim = {
  encode(message: EventValsetUpdateClaim, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eventNonce !== "0") {
      writer.uint32(8).uint64(message.eventNonce);
    }
    if (message.eventHeight !== "0") {
      writer.uint32(16).uint64(message.eventHeight);
    }
    if (message.attestationId.length !== 0) {
      writer.uint32(26).bytes(message.attestationId);
    }
    if (message.valsetNonce !== "0") {
      writer.uint32(32).uint64(message.valsetNonce);
    }
    for (const v of message.valsetMembers) {
      BridgeValidator.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    if (message.rewardAmount !== "") {
      writer.uint32(50).string(message.rewardAmount);
    }
    if (message.rewardToken !== "") {
      writer.uint32(58).string(message.rewardToken);
    }
    if (message.orchestratorAddress !== "") {
      writer.uint32(66).string(message.orchestratorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventValsetUpdateClaim {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventValsetUpdateClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.eventNonce = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.eventHeight = longToString(reader.uint64() as Long);
          break;
        case 3:
          message.attestationId = reader.bytes();
          break;
        case 4:
          message.valsetNonce = longToString(reader.uint64() as Long);
          break;
        case 5:
          message.valsetMembers.push(BridgeValidator.decode(reader, reader.uint32()));
          break;
        case 6:
          message.rewardAmount = reader.string();
          break;
        case 7:
          message.rewardToken = reader.string();
          break;
        case 8:
          message.orchestratorAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventValsetUpdateClaim {
    return {
      eventNonce: isSet(object.eventNonce) ? String(object.eventNonce) : "0",
      eventHeight: isSet(object.eventHeight) ? String(object.eventHeight) : "0",
      attestationId: isSet(object.attestationId) ? bytesFromBase64(object.attestationId) : new Uint8Array(),
      valsetNonce: isSet(object.valsetNonce) ? String(object.valsetNonce) : "0",
      valsetMembers: Array.isArray(object?.valsetMembers)
        ? object.valsetMembers.map((e: any) => BridgeValidator.fromJSON(e))
        : [],
      rewardAmount: isSet(object.rewardAmount) ? String(object.rewardAmount) : "",
      rewardToken: isSet(object.rewardToken) ? String(object.rewardToken) : "",
      orchestratorAddress: isSet(object.orchestratorAddress) ? String(object.orchestratorAddress) : "",
    };
  },

  toJSON(message: EventValsetUpdateClaim): unknown {
    const obj: any = {};
    message.eventNonce !== undefined && (obj.eventNonce = message.eventNonce);
    message.eventHeight !== undefined && (obj.eventHeight = message.eventHeight);
    message.attestationId !== undefined &&
      (obj.attestationId = base64FromBytes(
        message.attestationId !== undefined ? message.attestationId : new Uint8Array(),
      ));
    message.valsetNonce !== undefined && (obj.valsetNonce = message.valsetNonce);
    if (message.valsetMembers) {
      obj.valsetMembers = message.valsetMembers.map((e) => e ? BridgeValidator.toJSON(e) : undefined);
    } else {
      obj.valsetMembers = [];
    }
    message.rewardAmount !== undefined && (obj.rewardAmount = message.rewardAmount);
    message.rewardToken !== undefined && (obj.rewardToken = message.rewardToken);
    message.orchestratorAddress !== undefined && (obj.orchestratorAddress = message.orchestratorAddress);
    return obj;
  },

  create(base?: DeepPartial<EventValsetUpdateClaim>): EventValsetUpdateClaim {
    return EventValsetUpdateClaim.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventValsetUpdateClaim>): EventValsetUpdateClaim {
    const message = createBaseEventValsetUpdateClaim();
    message.eventNonce = object.eventNonce ?? "0";
    message.eventHeight = object.eventHeight ?? "0";
    message.attestationId = object.attestationId ?? new Uint8Array();
    message.valsetNonce = object.valsetNonce ?? "0";
    message.valsetMembers = object.valsetMembers?.map((e) => BridgeValidator.fromPartial(e)) || [];
    message.rewardAmount = object.rewardAmount ?? "";
    message.rewardToken = object.rewardToken ?? "";
    message.orchestratorAddress = object.orchestratorAddress ?? "";
    return message;
  },
};

function createBaseEventCancelSendToEth(): EventCancelSendToEth {
  return { outgoingTxId: "0" };
}

export const EventCancelSendToEth = {
  encode(message: EventCancelSendToEth, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.outgoingTxId !== "0") {
      writer.uint32(8).uint64(message.outgoingTxId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventCancelSendToEth {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCancelSendToEth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.outgoingTxId = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventCancelSendToEth {
    return { outgoingTxId: isSet(object.outgoingTxId) ? String(object.outgoingTxId) : "0" };
  },

  toJSON(message: EventCancelSendToEth): unknown {
    const obj: any = {};
    message.outgoingTxId !== undefined && (obj.outgoingTxId = message.outgoingTxId);
    return obj;
  },

  create(base?: DeepPartial<EventCancelSendToEth>): EventCancelSendToEth {
    return EventCancelSendToEth.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventCancelSendToEth>): EventCancelSendToEth {
    const message = createBaseEventCancelSendToEth();
    message.outgoingTxId = object.outgoingTxId ?? "0";
    return message;
  },
};

function createBaseEventSubmitBadSignatureEvidence(): EventSubmitBadSignatureEvidence {
  return { badEthSignature: "", badEthSignatureSubject: "" };
}

export const EventSubmitBadSignatureEvidence = {
  encode(message: EventSubmitBadSignatureEvidence, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.badEthSignature !== "") {
      writer.uint32(10).string(message.badEthSignature);
    }
    if (message.badEthSignatureSubject !== "") {
      writer.uint32(18).string(message.badEthSignatureSubject);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventSubmitBadSignatureEvidence {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSubmitBadSignatureEvidence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.badEthSignature = reader.string();
          break;
        case 2:
          message.badEthSignatureSubject = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventSubmitBadSignatureEvidence {
    return {
      badEthSignature: isSet(object.badEthSignature) ? String(object.badEthSignature) : "",
      badEthSignatureSubject: isSet(object.badEthSignatureSubject) ? String(object.badEthSignatureSubject) : "",
    };
  },

  toJSON(message: EventSubmitBadSignatureEvidence): unknown {
    const obj: any = {};
    message.badEthSignature !== undefined && (obj.badEthSignature = message.badEthSignature);
    message.badEthSignatureSubject !== undefined && (obj.badEthSignatureSubject = message.badEthSignatureSubject);
    return obj;
  },

  create(base?: DeepPartial<EventSubmitBadSignatureEvidence>): EventSubmitBadSignatureEvidence {
    return EventSubmitBadSignatureEvidence.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventSubmitBadSignatureEvidence>): EventSubmitBadSignatureEvidence {
    const message = createBaseEventSubmitBadSignatureEvidence();
    message.badEthSignature = object.badEthSignature ?? "";
    message.badEthSignatureSubject = object.badEthSignatureSubject ?? "";
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if (tsProtoGlobalThis.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if (tsProtoGlobalThis.Buffer) {
    return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
