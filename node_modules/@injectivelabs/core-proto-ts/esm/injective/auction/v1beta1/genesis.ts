/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Bid, Params } from "./auction";

/** GenesisState defines the auction module's genesis state. */
export interface GenesisState {
  /** params defines all the parameters of related to auction. */
  params:
    | Params
    | undefined;
  /** current auction round */
  auctionRound: string;
  /** current highest bid */
  highestBid:
    | Bid
    | undefined;
  /** auction ending timestamp */
  auctionEndingTimestamp: string;
}

function createBaseGenesisState(): GenesisState {
  return { params: undefined, auctionRound: "0", highestBid: undefined, auctionEndingTimestamp: "0" };
}

export const GenesisState = {
  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    if (message.auctionRound !== "0") {
      writer.uint32(16).uint64(message.auctionRound);
    }
    if (message.highestBid !== undefined) {
      Bid.encode(message.highestBid, writer.uint32(26).fork()).ldelim();
    }
    if (message.auctionEndingTimestamp !== "0") {
      writer.uint32(32).int64(message.auctionEndingTimestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.params = Params.decode(reader, reader.uint32());
          break;
        case 2:
          message.auctionRound = longToString(reader.uint64() as Long);
          break;
        case 3:
          message.highestBid = Bid.decode(reader, reader.uint32());
          break;
        case 4:
          message.auctionEndingTimestamp = longToString(reader.int64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      auctionRound: isSet(object.auctionRound) ? String(object.auctionRound) : "0",
      highestBid: isSet(object.highestBid) ? Bid.fromJSON(object.highestBid) : undefined,
      auctionEndingTimestamp: isSet(object.auctionEndingTimestamp) ? String(object.auctionEndingTimestamp) : "0",
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    message.params !== undefined && (obj.params = message.params ? Params.toJSON(message.params) : undefined);
    message.auctionRound !== undefined && (obj.auctionRound = message.auctionRound);
    message.highestBid !== undefined &&
      (obj.highestBid = message.highestBid ? Bid.toJSON(message.highestBid) : undefined);
    message.auctionEndingTimestamp !== undefined && (obj.auctionEndingTimestamp = message.auctionEndingTimestamp);
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.auctionRound = object.auctionRound ?? "0";
    message.highestBid = (object.highestBid !== undefined && object.highestBid !== null)
      ? Bid.fromPartial(object.highestBid)
      : undefined;
    message.auctionEndingTimestamp = object.auctionEndingTimestamp ?? "0";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
