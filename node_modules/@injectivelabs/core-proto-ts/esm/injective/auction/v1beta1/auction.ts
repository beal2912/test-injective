/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export interface Params {
  /** auction_period_duration defines the auction period duration */
  auctionPeriod: string;
  /** min_next_bid_increment_rate defines the minimum increment rate for new bids */
  minNextBidIncrementRate: string;
}

export interface Bid {
  bidder: string;
  amount: string;
}

export interface EventBid {
  /** bidder describes the address of bidder */
  bidder: string;
  /** amount describes the amount the bidder put on the auction */
  amount: string;
  /** round defines the round number of auction */
  round: string;
}

export interface EventAuctionResult {
  /** winner describes the address of the winner */
  winner: string;
  /** amount describes the amount the winner get from the auction */
  amount: string;
  /** round defines the round number of auction */
  round: string;
}

export interface EventAuctionStart {
  /** round defines the round number of auction */
  round: string;
  /** ending_timestamp describes auction end time */
  endingTimestamp: string;
  /** new_basket describes auction module balance at the time of new auction start */
  newBasket: Coin[];
}

function createBaseParams(): Params {
  return { auctionPeriod: "0", minNextBidIncrementRate: "" };
}

export const Params = {
  encode(message: Params, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.auctionPeriod !== "0") {
      writer.uint32(8).int64(message.auctionPeriod);
    }
    if (message.minNextBidIncrementRate !== "") {
      writer.uint32(18).string(message.minNextBidIncrementRate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.auctionPeriod = longToString(reader.int64() as Long);
          break;
        case 2:
          message.minNextBidIncrementRate = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      auctionPeriod: isSet(object.auctionPeriod) ? String(object.auctionPeriod) : "0",
      minNextBidIncrementRate: isSet(object.minNextBidIncrementRate) ? String(object.minNextBidIncrementRate) : "",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    message.auctionPeriod !== undefined && (obj.auctionPeriod = message.auctionPeriod);
    message.minNextBidIncrementRate !== undefined && (obj.minNextBidIncrementRate = message.minNextBidIncrementRate);
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.auctionPeriod = object.auctionPeriod ?? "0";
    message.minNextBidIncrementRate = object.minNextBidIncrementRate ?? "";
    return message;
  },
};

function createBaseBid(): Bid {
  return { bidder: "", amount: "" };
}

export const Bid = {
  encode(message: Bid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bidder !== "") {
      writer.uint32(10).string(message.bidder);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Bid {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.bidder = reader.string();
          break;
        case 2:
          message.amount = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Bid {
    return {
      bidder: isSet(object.bidder) ? String(object.bidder) : "",
      amount: isSet(object.amount) ? String(object.amount) : "",
    };
  },

  toJSON(message: Bid): unknown {
    const obj: any = {};
    message.bidder !== undefined && (obj.bidder = message.bidder);
    message.amount !== undefined && (obj.amount = message.amount);
    return obj;
  },

  create(base?: DeepPartial<Bid>): Bid {
    return Bid.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Bid>): Bid {
    const message = createBaseBid();
    message.bidder = object.bidder ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseEventBid(): EventBid {
  return { bidder: "", amount: "", round: "0" };
}

export const EventBid = {
  encode(message: EventBid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bidder !== "") {
      writer.uint32(10).string(message.bidder);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    if (message.round !== "0") {
      writer.uint32(24).uint64(message.round);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventBid {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.bidder = reader.string();
          break;
        case 2:
          message.amount = reader.string();
          break;
        case 3:
          message.round = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventBid {
    return {
      bidder: isSet(object.bidder) ? String(object.bidder) : "",
      amount: isSet(object.amount) ? String(object.amount) : "",
      round: isSet(object.round) ? String(object.round) : "0",
    };
  },

  toJSON(message: EventBid): unknown {
    const obj: any = {};
    message.bidder !== undefined && (obj.bidder = message.bidder);
    message.amount !== undefined && (obj.amount = message.amount);
    message.round !== undefined && (obj.round = message.round);
    return obj;
  },

  create(base?: DeepPartial<EventBid>): EventBid {
    return EventBid.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventBid>): EventBid {
    const message = createBaseEventBid();
    message.bidder = object.bidder ?? "";
    message.amount = object.amount ?? "";
    message.round = object.round ?? "0";
    return message;
  },
};

function createBaseEventAuctionResult(): EventAuctionResult {
  return { winner: "", amount: "", round: "0" };
}

export const EventAuctionResult = {
  encode(message: EventAuctionResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.winner !== "") {
      writer.uint32(10).string(message.winner);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    if (message.round !== "0") {
      writer.uint32(24).uint64(message.round);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventAuctionResult {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAuctionResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.winner = reader.string();
          break;
        case 2:
          message.amount = reader.string();
          break;
        case 3:
          message.round = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventAuctionResult {
    return {
      winner: isSet(object.winner) ? String(object.winner) : "",
      amount: isSet(object.amount) ? String(object.amount) : "",
      round: isSet(object.round) ? String(object.round) : "0",
    };
  },

  toJSON(message: EventAuctionResult): unknown {
    const obj: any = {};
    message.winner !== undefined && (obj.winner = message.winner);
    message.amount !== undefined && (obj.amount = message.amount);
    message.round !== undefined && (obj.round = message.round);
    return obj;
  },

  create(base?: DeepPartial<EventAuctionResult>): EventAuctionResult {
    return EventAuctionResult.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventAuctionResult>): EventAuctionResult {
    const message = createBaseEventAuctionResult();
    message.winner = object.winner ?? "";
    message.amount = object.amount ?? "";
    message.round = object.round ?? "0";
    return message;
  },
};

function createBaseEventAuctionStart(): EventAuctionStart {
  return { round: "0", endingTimestamp: "0", newBasket: [] };
}

export const EventAuctionStart = {
  encode(message: EventAuctionStart, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.round !== "0") {
      writer.uint32(8).uint64(message.round);
    }
    if (message.endingTimestamp !== "0") {
      writer.uint32(16).int64(message.endingTimestamp);
    }
    for (const v of message.newBasket) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventAuctionStart {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAuctionStart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.round = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.endingTimestamp = longToString(reader.int64() as Long);
          break;
        case 3:
          message.newBasket.push(Coin.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventAuctionStart {
    return {
      round: isSet(object.round) ? String(object.round) : "0",
      endingTimestamp: isSet(object.endingTimestamp) ? String(object.endingTimestamp) : "0",
      newBasket: Array.isArray(object?.newBasket) ? object.newBasket.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: EventAuctionStart): unknown {
    const obj: any = {};
    message.round !== undefined && (obj.round = message.round);
    message.endingTimestamp !== undefined && (obj.endingTimestamp = message.endingTimestamp);
    if (message.newBasket) {
      obj.newBasket = message.newBasket.map((e) => e ? Coin.toJSON(e) : undefined);
    } else {
      obj.newBasket = [];
    }
    return obj;
  },

  create(base?: DeepPartial<EventAuctionStart>): EventAuctionStart {
    return EventAuctionStart.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventAuctionStart>): EventAuctionStart {
    const message = createBaseEventAuctionStart();
    message.round = object.round ?? "0";
    message.endingTimestamp = object.endingTimestamp ?? "0";
    message.newBasket = object.newBasket?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
