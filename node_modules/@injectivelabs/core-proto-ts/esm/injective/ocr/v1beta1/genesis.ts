/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { EpochAndRound, FeedConfig, Params, Transmission } from "./ocr";

/** GenesisState defines the OCR module's genesis state. */
export interface GenesisState {
  /** params defines all the parameters of related to OCR. */
  params:
    | Params
    | undefined;
  /** feed_configs stores all of the supported OCR feeds */
  feedConfigs: FeedConfig[];
  /** latest_epoch_and_rounds stores the latest epoch and round for each feedId */
  latestEpochAndRounds: FeedEpochAndRound[];
  /** feed_transmissions stores the last transmission for each feed */
  feedTransmissions: FeedTransmission[];
  /** latest_aggregator_round_ids stores the latest aggregator round ID for each feedId */
  latestAggregatorRoundIds: FeedLatestAggregatorRoundIDs[];
  /** reward_pools stores the reward pools */
  rewardPools: RewardPool[];
  /** feed_observation_counts stores the feed observation counts */
  feedObservationCounts: FeedCounts[];
  /** feed_transmission_counts stores the feed transmission counts */
  feedTransmissionCounts: FeedCounts[];
  /** pending_payeeships stores the pending payeeships */
  pendingPayeeships: PendingPayeeship[];
}

export interface FeedTransmission {
  feedId: string;
  transmission: Transmission | undefined;
}

export interface FeedEpochAndRound {
  feedId: string;
  epochAndRound: EpochAndRound | undefined;
}

export interface FeedLatestAggregatorRoundIDs {
  feedId: string;
  aggregatorRoundId: string;
}

export interface RewardPool {
  feedId: string;
  amount: Coin | undefined;
}

export interface FeedCounts {
  feedId: string;
  counts: Count[];
}

export interface Count {
  address: string;
  count: string;
}

export interface PendingPayeeship {
  feedId: string;
  transmitter: string;
  proposedPayee: string;
}

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    feedConfigs: [],
    latestEpochAndRounds: [],
    feedTransmissions: [],
    latestAggregatorRoundIds: [],
    rewardPools: [],
    feedObservationCounts: [],
    feedTransmissionCounts: [],
    pendingPayeeships: [],
  };
}

export const GenesisState = {
  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.feedConfigs) {
      FeedConfig.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.latestEpochAndRounds) {
      FeedEpochAndRound.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.feedTransmissions) {
      FeedTransmission.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.latestAggregatorRoundIds) {
      FeedLatestAggregatorRoundIDs.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.rewardPools) {
      RewardPool.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    for (const v of message.feedObservationCounts) {
      FeedCounts.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    for (const v of message.feedTransmissionCounts) {
      FeedCounts.encode(v!, writer.uint32(66).fork()).ldelim();
    }
    for (const v of message.pendingPayeeships) {
      PendingPayeeship.encode(v!, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.params = Params.decode(reader, reader.uint32());
          break;
        case 2:
          message.feedConfigs.push(FeedConfig.decode(reader, reader.uint32()));
          break;
        case 3:
          message.latestEpochAndRounds.push(FeedEpochAndRound.decode(reader, reader.uint32()));
          break;
        case 4:
          message.feedTransmissions.push(FeedTransmission.decode(reader, reader.uint32()));
          break;
        case 5:
          message.latestAggregatorRoundIds.push(FeedLatestAggregatorRoundIDs.decode(reader, reader.uint32()));
          break;
        case 6:
          message.rewardPools.push(RewardPool.decode(reader, reader.uint32()));
          break;
        case 7:
          message.feedObservationCounts.push(FeedCounts.decode(reader, reader.uint32()));
          break;
        case 8:
          message.feedTransmissionCounts.push(FeedCounts.decode(reader, reader.uint32()));
          break;
        case 9:
          message.pendingPayeeships.push(PendingPayeeship.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      feedConfigs: Array.isArray(object?.feedConfigs) ? object.feedConfigs.map((e: any) => FeedConfig.fromJSON(e)) : [],
      latestEpochAndRounds: Array.isArray(object?.latestEpochAndRounds)
        ? object.latestEpochAndRounds.map((e: any) => FeedEpochAndRound.fromJSON(e))
        : [],
      feedTransmissions: Array.isArray(object?.feedTransmissions)
        ? object.feedTransmissions.map((e: any) => FeedTransmission.fromJSON(e))
        : [],
      latestAggregatorRoundIds: Array.isArray(object?.latestAggregatorRoundIds)
        ? object.latestAggregatorRoundIds.map((e: any) => FeedLatestAggregatorRoundIDs.fromJSON(e))
        : [],
      rewardPools: Array.isArray(object?.rewardPools) ? object.rewardPools.map((e: any) => RewardPool.fromJSON(e)) : [],
      feedObservationCounts: Array.isArray(object?.feedObservationCounts)
        ? object.feedObservationCounts.map((e: any) => FeedCounts.fromJSON(e))
        : [],
      feedTransmissionCounts: Array.isArray(object?.feedTransmissionCounts)
        ? object.feedTransmissionCounts.map((e: any) => FeedCounts.fromJSON(e))
        : [],
      pendingPayeeships: Array.isArray(object?.pendingPayeeships)
        ? object.pendingPayeeships.map((e: any) => PendingPayeeship.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    message.params !== undefined && (obj.params = message.params ? Params.toJSON(message.params) : undefined);
    if (message.feedConfigs) {
      obj.feedConfigs = message.feedConfigs.map((e) => e ? FeedConfig.toJSON(e) : undefined);
    } else {
      obj.feedConfigs = [];
    }
    if (message.latestEpochAndRounds) {
      obj.latestEpochAndRounds = message.latestEpochAndRounds.map((e) => e ? FeedEpochAndRound.toJSON(e) : undefined);
    } else {
      obj.latestEpochAndRounds = [];
    }
    if (message.feedTransmissions) {
      obj.feedTransmissions = message.feedTransmissions.map((e) => e ? FeedTransmission.toJSON(e) : undefined);
    } else {
      obj.feedTransmissions = [];
    }
    if (message.latestAggregatorRoundIds) {
      obj.latestAggregatorRoundIds = message.latestAggregatorRoundIds.map((e) =>
        e ? FeedLatestAggregatorRoundIDs.toJSON(e) : undefined
      );
    } else {
      obj.latestAggregatorRoundIds = [];
    }
    if (message.rewardPools) {
      obj.rewardPools = message.rewardPools.map((e) => e ? RewardPool.toJSON(e) : undefined);
    } else {
      obj.rewardPools = [];
    }
    if (message.feedObservationCounts) {
      obj.feedObservationCounts = message.feedObservationCounts.map((e) => e ? FeedCounts.toJSON(e) : undefined);
    } else {
      obj.feedObservationCounts = [];
    }
    if (message.feedTransmissionCounts) {
      obj.feedTransmissionCounts = message.feedTransmissionCounts.map((e) => e ? FeedCounts.toJSON(e) : undefined);
    } else {
      obj.feedTransmissionCounts = [];
    }
    if (message.pendingPayeeships) {
      obj.pendingPayeeships = message.pendingPayeeships.map((e) => e ? PendingPayeeship.toJSON(e) : undefined);
    } else {
      obj.pendingPayeeships = [];
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.feedConfigs = object.feedConfigs?.map((e) => FeedConfig.fromPartial(e)) || [];
    message.latestEpochAndRounds = object.latestEpochAndRounds?.map((e) => FeedEpochAndRound.fromPartial(e)) || [];
    message.feedTransmissions = object.feedTransmissions?.map((e) => FeedTransmission.fromPartial(e)) || [];
    message.latestAggregatorRoundIds =
      object.latestAggregatorRoundIds?.map((e) => FeedLatestAggregatorRoundIDs.fromPartial(e)) || [];
    message.rewardPools = object.rewardPools?.map((e) => RewardPool.fromPartial(e)) || [];
    message.feedObservationCounts = object.feedObservationCounts?.map((e) => FeedCounts.fromPartial(e)) || [];
    message.feedTransmissionCounts = object.feedTransmissionCounts?.map((e) => FeedCounts.fromPartial(e)) || [];
    message.pendingPayeeships = object.pendingPayeeships?.map((e) => PendingPayeeship.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFeedTransmission(): FeedTransmission {
  return { feedId: "", transmission: undefined };
}

export const FeedTransmission = {
  encode(message: FeedTransmission, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedId !== "") {
      writer.uint32(10).string(message.feedId);
    }
    if (message.transmission !== undefined) {
      Transmission.encode(message.transmission, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FeedTransmission {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedTransmission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedId = reader.string();
          break;
        case 2:
          message.transmission = Transmission.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): FeedTransmission {
    return {
      feedId: isSet(object.feedId) ? String(object.feedId) : "",
      transmission: isSet(object.transmission) ? Transmission.fromJSON(object.transmission) : undefined,
    };
  },

  toJSON(message: FeedTransmission): unknown {
    const obj: any = {};
    message.feedId !== undefined && (obj.feedId = message.feedId);
    message.transmission !== undefined &&
      (obj.transmission = message.transmission ? Transmission.toJSON(message.transmission) : undefined);
    return obj;
  },

  create(base?: DeepPartial<FeedTransmission>): FeedTransmission {
    return FeedTransmission.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<FeedTransmission>): FeedTransmission {
    const message = createBaseFeedTransmission();
    message.feedId = object.feedId ?? "";
    message.transmission = (object.transmission !== undefined && object.transmission !== null)
      ? Transmission.fromPartial(object.transmission)
      : undefined;
    return message;
  },
};

function createBaseFeedEpochAndRound(): FeedEpochAndRound {
  return { feedId: "", epochAndRound: undefined };
}

export const FeedEpochAndRound = {
  encode(message: FeedEpochAndRound, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedId !== "") {
      writer.uint32(10).string(message.feedId);
    }
    if (message.epochAndRound !== undefined) {
      EpochAndRound.encode(message.epochAndRound, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FeedEpochAndRound {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedEpochAndRound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedId = reader.string();
          break;
        case 2:
          message.epochAndRound = EpochAndRound.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): FeedEpochAndRound {
    return {
      feedId: isSet(object.feedId) ? String(object.feedId) : "",
      epochAndRound: isSet(object.epochAndRound) ? EpochAndRound.fromJSON(object.epochAndRound) : undefined,
    };
  },

  toJSON(message: FeedEpochAndRound): unknown {
    const obj: any = {};
    message.feedId !== undefined && (obj.feedId = message.feedId);
    message.epochAndRound !== undefined &&
      (obj.epochAndRound = message.epochAndRound ? EpochAndRound.toJSON(message.epochAndRound) : undefined);
    return obj;
  },

  create(base?: DeepPartial<FeedEpochAndRound>): FeedEpochAndRound {
    return FeedEpochAndRound.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<FeedEpochAndRound>): FeedEpochAndRound {
    const message = createBaseFeedEpochAndRound();
    message.feedId = object.feedId ?? "";
    message.epochAndRound = (object.epochAndRound !== undefined && object.epochAndRound !== null)
      ? EpochAndRound.fromPartial(object.epochAndRound)
      : undefined;
    return message;
  },
};

function createBaseFeedLatestAggregatorRoundIDs(): FeedLatestAggregatorRoundIDs {
  return { feedId: "", aggregatorRoundId: "0" };
}

export const FeedLatestAggregatorRoundIDs = {
  encode(message: FeedLatestAggregatorRoundIDs, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedId !== "") {
      writer.uint32(10).string(message.feedId);
    }
    if (message.aggregatorRoundId !== "0") {
      writer.uint32(16).uint64(message.aggregatorRoundId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FeedLatestAggregatorRoundIDs {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedLatestAggregatorRoundIDs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedId = reader.string();
          break;
        case 2:
          message.aggregatorRoundId = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): FeedLatestAggregatorRoundIDs {
    return {
      feedId: isSet(object.feedId) ? String(object.feedId) : "",
      aggregatorRoundId: isSet(object.aggregatorRoundId) ? String(object.aggregatorRoundId) : "0",
    };
  },

  toJSON(message: FeedLatestAggregatorRoundIDs): unknown {
    const obj: any = {};
    message.feedId !== undefined && (obj.feedId = message.feedId);
    message.aggregatorRoundId !== undefined && (obj.aggregatorRoundId = message.aggregatorRoundId);
    return obj;
  },

  create(base?: DeepPartial<FeedLatestAggregatorRoundIDs>): FeedLatestAggregatorRoundIDs {
    return FeedLatestAggregatorRoundIDs.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<FeedLatestAggregatorRoundIDs>): FeedLatestAggregatorRoundIDs {
    const message = createBaseFeedLatestAggregatorRoundIDs();
    message.feedId = object.feedId ?? "";
    message.aggregatorRoundId = object.aggregatorRoundId ?? "0";
    return message;
  },
};

function createBaseRewardPool(): RewardPool {
  return { feedId: "", amount: undefined };
}

export const RewardPool = {
  encode(message: RewardPool, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedId !== "") {
      writer.uint32(10).string(message.feedId);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RewardPool {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRewardPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedId = reader.string();
          break;
        case 2:
          message.amount = Coin.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RewardPool {
    return {
      feedId: isSet(object.feedId) ? String(object.feedId) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: RewardPool): unknown {
    const obj: any = {};
    message.feedId !== undefined && (obj.feedId = message.feedId);
    message.amount !== undefined && (obj.amount = message.amount ? Coin.toJSON(message.amount) : undefined);
    return obj;
  },

  create(base?: DeepPartial<RewardPool>): RewardPool {
    return RewardPool.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<RewardPool>): RewardPool {
    const message = createBaseRewardPool();
    message.feedId = object.feedId ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    return message;
  },
};

function createBaseFeedCounts(): FeedCounts {
  return { feedId: "", counts: [] };
}

export const FeedCounts = {
  encode(message: FeedCounts, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedId !== "") {
      writer.uint32(10).string(message.feedId);
    }
    for (const v of message.counts) {
      Count.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FeedCounts {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedCounts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedId = reader.string();
          break;
        case 2:
          message.counts.push(Count.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): FeedCounts {
    return {
      feedId: isSet(object.feedId) ? String(object.feedId) : "",
      counts: Array.isArray(object?.counts) ? object.counts.map((e: any) => Count.fromJSON(e)) : [],
    };
  },

  toJSON(message: FeedCounts): unknown {
    const obj: any = {};
    message.feedId !== undefined && (obj.feedId = message.feedId);
    if (message.counts) {
      obj.counts = message.counts.map((e) => e ? Count.toJSON(e) : undefined);
    } else {
      obj.counts = [];
    }
    return obj;
  },

  create(base?: DeepPartial<FeedCounts>): FeedCounts {
    return FeedCounts.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<FeedCounts>): FeedCounts {
    const message = createBaseFeedCounts();
    message.feedId = object.feedId ?? "";
    message.counts = object.counts?.map((e) => Count.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCount(): Count {
  return { address: "", count: "0" };
}

export const Count = {
  encode(message: Count, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.count !== "0") {
      writer.uint32(16).uint64(message.count);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Count {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;
        case 2:
          message.count = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Count {
    return {
      address: isSet(object.address) ? String(object.address) : "",
      count: isSet(object.count) ? String(object.count) : "0",
    };
  },

  toJSON(message: Count): unknown {
    const obj: any = {};
    message.address !== undefined && (obj.address = message.address);
    message.count !== undefined && (obj.count = message.count);
    return obj;
  },

  create(base?: DeepPartial<Count>): Count {
    return Count.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Count>): Count {
    const message = createBaseCount();
    message.address = object.address ?? "";
    message.count = object.count ?? "0";
    return message;
  },
};

function createBasePendingPayeeship(): PendingPayeeship {
  return { feedId: "", transmitter: "", proposedPayee: "" };
}

export const PendingPayeeship = {
  encode(message: PendingPayeeship, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.feedId !== "") {
      writer.uint32(10).string(message.feedId);
    }
    if (message.transmitter !== "") {
      writer.uint32(18).string(message.transmitter);
    }
    if (message.proposedPayee !== "") {
      writer.uint32(26).string(message.proposedPayee);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PendingPayeeship {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePendingPayeeship();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feedId = reader.string();
          break;
        case 2:
          message.transmitter = reader.string();
          break;
        case 3:
          message.proposedPayee = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): PendingPayeeship {
    return {
      feedId: isSet(object.feedId) ? String(object.feedId) : "",
      transmitter: isSet(object.transmitter) ? String(object.transmitter) : "",
      proposedPayee: isSet(object.proposedPayee) ? String(object.proposedPayee) : "",
    };
  },

  toJSON(message: PendingPayeeship): unknown {
    const obj: any = {};
    message.feedId !== undefined && (obj.feedId = message.feedId);
    message.transmitter !== undefined && (obj.transmitter = message.transmitter);
    message.proposedPayee !== undefined && (obj.proposedPayee = message.proposedPayee);
    return obj;
  },

  create(base?: DeepPartial<PendingPayeeship>): PendingPayeeship {
    return PendingPayeeship.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<PendingPayeeship>): PendingPayeeship {
    const message = createBasePendingPayeeship();
    message.feedId = object.feedId ?? "";
    message.transmitter = object.transmitter ?? "";
    message.proposedPayee = object.proposedPayee ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
