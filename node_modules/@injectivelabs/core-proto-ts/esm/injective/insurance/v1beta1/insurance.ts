/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { OracleType, oracleTypeFromJSON, oracleTypeToJSON } from "../../oracle/v1beta1/oracle";

export interface Params {
  /**
   * default_redemption_notice_period_duration defines the default minimum notice period duration that must pass after an underwriter sends
   * a redemption request before the underwriter can claim his tokens
   */
  defaultRedemptionNoticePeriodDuration: Duration | undefined;
}

export interface InsuranceFund {
  /** deposit denomination for the given insurance fund */
  depositDenom: string;
  /** insurance fund pool token denomination for the given insurance fund */
  insurancePoolTokenDenom: string;
  /**
   * redemption_notice_period_duration defines the minimum notice period duration that must pass after an underwriter sends
   * a redemption request before the underwriter can claim his tokens
   */
  redemptionNoticePeriodDuration:
    | Duration
    | undefined;
  /** balance of fund */
  balance: string;
  /** total share tokens minted */
  totalShare: string;
  /** marketID of the derivative market */
  marketId: string;
  /** ticker of the derivative market */
  marketTicker: string;
  /** Oracle base currency of the derivative market OR the oracle symbol for the binary options market. */
  oracleBase: string;
  /** Oracle quote currency of the derivative market OR the oracle provider for the binary options market. */
  oracleQuote: string;
  /** Oracle type of the binary options or derivative market */
  oracleType: OracleType;
  /** Expiration time of the derivative market. Should be -1 for perpetual or -2 for binary options markets. */
  expiry: string;
}

export interface RedemptionSchedule {
  /** id of redemption schedule */
  id: string;
  /** marketId of insurance fund for the redemption */
  marketId: string;
  /** address of the redeemer */
  redeemer: string;
  /** the time after which the redemption can be claimed */
  claimableRedemptionTime:
    | Date
    | undefined;
  /** the insurance_pool_token amount to redeem */
  redemptionAmount: Coin | undefined;
}

export interface EventInsuranceFundUpdate {
  fund: InsuranceFund | undefined;
}

export interface EventRequestRedemption {
  schedule: RedemptionSchedule | undefined;
}

export interface EventWithdrawRedemption {
  /** redemption schedule triggered withdraw */
  schedule:
    | RedemptionSchedule
    | undefined;
  /** redeem coin amount in base_currency */
  redeemCoin: Coin | undefined;
}

export interface EventUnderwrite {
  /** address of the underwriter */
  underwriter: string;
  /** marketId of insurance fund for the redemption */
  marketId: string;
  /** deposit coin amount */
  deposit:
    | Coin
    | undefined;
  /** share coin amount */
  shares: Coin | undefined;
}

function createBaseParams(): Params {
  return { defaultRedemptionNoticePeriodDuration: undefined };
}

export const Params = {
  encode(message: Params, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.defaultRedemptionNoticePeriodDuration !== undefined) {
      Duration.encode(message.defaultRedemptionNoticePeriodDuration, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.defaultRedemptionNoticePeriodDuration = Duration.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      defaultRedemptionNoticePeriodDuration: isSet(object.defaultRedemptionNoticePeriodDuration)
        ? Duration.fromJSON(object.defaultRedemptionNoticePeriodDuration)
        : undefined,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    message.defaultRedemptionNoticePeriodDuration !== undefined &&
      (obj.defaultRedemptionNoticePeriodDuration = message.defaultRedemptionNoticePeriodDuration
        ? Duration.toJSON(message.defaultRedemptionNoticePeriodDuration)
        : undefined);
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.defaultRedemptionNoticePeriodDuration =
      (object.defaultRedemptionNoticePeriodDuration !== undefined &&
          object.defaultRedemptionNoticePeriodDuration !== null)
        ? Duration.fromPartial(object.defaultRedemptionNoticePeriodDuration)
        : undefined;
    return message;
  },
};

function createBaseInsuranceFund(): InsuranceFund {
  return {
    depositDenom: "",
    insurancePoolTokenDenom: "",
    redemptionNoticePeriodDuration: undefined,
    balance: "",
    totalShare: "",
    marketId: "",
    marketTicker: "",
    oracleBase: "",
    oracleQuote: "",
    oracleType: 0,
    expiry: "0",
  };
}

export const InsuranceFund = {
  encode(message: InsuranceFund, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.depositDenom !== "") {
      writer.uint32(10).string(message.depositDenom);
    }
    if (message.insurancePoolTokenDenom !== "") {
      writer.uint32(18).string(message.insurancePoolTokenDenom);
    }
    if (message.redemptionNoticePeriodDuration !== undefined) {
      Duration.encode(message.redemptionNoticePeriodDuration, writer.uint32(26).fork()).ldelim();
    }
    if (message.balance !== "") {
      writer.uint32(34).string(message.balance);
    }
    if (message.totalShare !== "") {
      writer.uint32(42).string(message.totalShare);
    }
    if (message.marketId !== "") {
      writer.uint32(50).string(message.marketId);
    }
    if (message.marketTicker !== "") {
      writer.uint32(58).string(message.marketTicker);
    }
    if (message.oracleBase !== "") {
      writer.uint32(66).string(message.oracleBase);
    }
    if (message.oracleQuote !== "") {
      writer.uint32(74).string(message.oracleQuote);
    }
    if (message.oracleType !== 0) {
      writer.uint32(80).int32(message.oracleType);
    }
    if (message.expiry !== "0") {
      writer.uint32(88).int64(message.expiry);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InsuranceFund {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsuranceFund();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.depositDenom = reader.string();
          break;
        case 2:
          message.insurancePoolTokenDenom = reader.string();
          break;
        case 3:
          message.redemptionNoticePeriodDuration = Duration.decode(reader, reader.uint32());
          break;
        case 4:
          message.balance = reader.string();
          break;
        case 5:
          message.totalShare = reader.string();
          break;
        case 6:
          message.marketId = reader.string();
          break;
        case 7:
          message.marketTicker = reader.string();
          break;
        case 8:
          message.oracleBase = reader.string();
          break;
        case 9:
          message.oracleQuote = reader.string();
          break;
        case 10:
          message.oracleType = reader.int32() as any;
          break;
        case 11:
          message.expiry = longToString(reader.int64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): InsuranceFund {
    return {
      depositDenom: isSet(object.depositDenom) ? String(object.depositDenom) : "",
      insurancePoolTokenDenom: isSet(object.insurancePoolTokenDenom) ? String(object.insurancePoolTokenDenom) : "",
      redemptionNoticePeriodDuration: isSet(object.redemptionNoticePeriodDuration)
        ? Duration.fromJSON(object.redemptionNoticePeriodDuration)
        : undefined,
      balance: isSet(object.balance) ? String(object.balance) : "",
      totalShare: isSet(object.totalShare) ? String(object.totalShare) : "",
      marketId: isSet(object.marketId) ? String(object.marketId) : "",
      marketTicker: isSet(object.marketTicker) ? String(object.marketTicker) : "",
      oracleBase: isSet(object.oracleBase) ? String(object.oracleBase) : "",
      oracleQuote: isSet(object.oracleQuote) ? String(object.oracleQuote) : "",
      oracleType: isSet(object.oracleType) ? oracleTypeFromJSON(object.oracleType) : 0,
      expiry: isSet(object.expiry) ? String(object.expiry) : "0",
    };
  },

  toJSON(message: InsuranceFund): unknown {
    const obj: any = {};
    message.depositDenom !== undefined && (obj.depositDenom = message.depositDenom);
    message.insurancePoolTokenDenom !== undefined && (obj.insurancePoolTokenDenom = message.insurancePoolTokenDenom);
    message.redemptionNoticePeriodDuration !== undefined &&
      (obj.redemptionNoticePeriodDuration = message.redemptionNoticePeriodDuration
        ? Duration.toJSON(message.redemptionNoticePeriodDuration)
        : undefined);
    message.balance !== undefined && (obj.balance = message.balance);
    message.totalShare !== undefined && (obj.totalShare = message.totalShare);
    message.marketId !== undefined && (obj.marketId = message.marketId);
    message.marketTicker !== undefined && (obj.marketTicker = message.marketTicker);
    message.oracleBase !== undefined && (obj.oracleBase = message.oracleBase);
    message.oracleQuote !== undefined && (obj.oracleQuote = message.oracleQuote);
    message.oracleType !== undefined && (obj.oracleType = oracleTypeToJSON(message.oracleType));
    message.expiry !== undefined && (obj.expiry = message.expiry);
    return obj;
  },

  create(base?: DeepPartial<InsuranceFund>): InsuranceFund {
    return InsuranceFund.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<InsuranceFund>): InsuranceFund {
    const message = createBaseInsuranceFund();
    message.depositDenom = object.depositDenom ?? "";
    message.insurancePoolTokenDenom = object.insurancePoolTokenDenom ?? "";
    message.redemptionNoticePeriodDuration =
      (object.redemptionNoticePeriodDuration !== undefined && object.redemptionNoticePeriodDuration !== null)
        ? Duration.fromPartial(object.redemptionNoticePeriodDuration)
        : undefined;
    message.balance = object.balance ?? "";
    message.totalShare = object.totalShare ?? "";
    message.marketId = object.marketId ?? "";
    message.marketTicker = object.marketTicker ?? "";
    message.oracleBase = object.oracleBase ?? "";
    message.oracleQuote = object.oracleQuote ?? "";
    message.oracleType = object.oracleType ?? 0;
    message.expiry = object.expiry ?? "0";
    return message;
  },
};

function createBaseRedemptionSchedule(): RedemptionSchedule {
  return { id: "0", marketId: "", redeemer: "", claimableRedemptionTime: undefined, redemptionAmount: undefined };
}

export const RedemptionSchedule = {
  encode(message: RedemptionSchedule, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "0") {
      writer.uint32(8).uint64(message.id);
    }
    if (message.marketId !== "") {
      writer.uint32(18).string(message.marketId);
    }
    if (message.redeemer !== "") {
      writer.uint32(26).string(message.redeemer);
    }
    if (message.claimableRedemptionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.claimableRedemptionTime), writer.uint32(34).fork()).ldelim();
    }
    if (message.redemptionAmount !== undefined) {
      Coin.encode(message.redemptionAmount, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RedemptionSchedule {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedemptionSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.marketId = reader.string();
          break;
        case 3:
          message.redeemer = reader.string();
          break;
        case 4:
          message.claimableRedemptionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          break;
        case 5:
          message.redemptionAmount = Coin.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RedemptionSchedule {
    return {
      id: isSet(object.id) ? String(object.id) : "0",
      marketId: isSet(object.marketId) ? String(object.marketId) : "",
      redeemer: isSet(object.redeemer) ? String(object.redeemer) : "",
      claimableRedemptionTime: isSet(object.claimableRedemptionTime)
        ? fromJsonTimestamp(object.claimableRedemptionTime)
        : undefined,
      redemptionAmount: isSet(object.redemptionAmount) ? Coin.fromJSON(object.redemptionAmount) : undefined,
    };
  },

  toJSON(message: RedemptionSchedule): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.marketId !== undefined && (obj.marketId = message.marketId);
    message.redeemer !== undefined && (obj.redeemer = message.redeemer);
    message.claimableRedemptionTime !== undefined &&
      (obj.claimableRedemptionTime = message.claimableRedemptionTime.toISOString());
    message.redemptionAmount !== undefined &&
      (obj.redemptionAmount = message.redemptionAmount ? Coin.toJSON(message.redemptionAmount) : undefined);
    return obj;
  },

  create(base?: DeepPartial<RedemptionSchedule>): RedemptionSchedule {
    return RedemptionSchedule.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<RedemptionSchedule>): RedemptionSchedule {
    const message = createBaseRedemptionSchedule();
    message.id = object.id ?? "0";
    message.marketId = object.marketId ?? "";
    message.redeemer = object.redeemer ?? "";
    message.claimableRedemptionTime = object.claimableRedemptionTime ?? undefined;
    message.redemptionAmount = (object.redemptionAmount !== undefined && object.redemptionAmount !== null)
      ? Coin.fromPartial(object.redemptionAmount)
      : undefined;
    return message;
  },
};

function createBaseEventInsuranceFundUpdate(): EventInsuranceFundUpdate {
  return { fund: undefined };
}

export const EventInsuranceFundUpdate = {
  encode(message: EventInsuranceFundUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fund !== undefined) {
      InsuranceFund.encode(message.fund, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventInsuranceFundUpdate {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventInsuranceFundUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.fund = InsuranceFund.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventInsuranceFundUpdate {
    return { fund: isSet(object.fund) ? InsuranceFund.fromJSON(object.fund) : undefined };
  },

  toJSON(message: EventInsuranceFundUpdate): unknown {
    const obj: any = {};
    message.fund !== undefined && (obj.fund = message.fund ? InsuranceFund.toJSON(message.fund) : undefined);
    return obj;
  },

  create(base?: DeepPartial<EventInsuranceFundUpdate>): EventInsuranceFundUpdate {
    return EventInsuranceFundUpdate.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventInsuranceFundUpdate>): EventInsuranceFundUpdate {
    const message = createBaseEventInsuranceFundUpdate();
    message.fund = (object.fund !== undefined && object.fund !== null)
      ? InsuranceFund.fromPartial(object.fund)
      : undefined;
    return message;
  },
};

function createBaseEventRequestRedemption(): EventRequestRedemption {
  return { schedule: undefined };
}

export const EventRequestRedemption = {
  encode(message: EventRequestRedemption, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.schedule !== undefined) {
      RedemptionSchedule.encode(message.schedule, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventRequestRedemption {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventRequestRedemption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.schedule = RedemptionSchedule.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventRequestRedemption {
    return { schedule: isSet(object.schedule) ? RedemptionSchedule.fromJSON(object.schedule) : undefined };
  },

  toJSON(message: EventRequestRedemption): unknown {
    const obj: any = {};
    message.schedule !== undefined &&
      (obj.schedule = message.schedule ? RedemptionSchedule.toJSON(message.schedule) : undefined);
    return obj;
  },

  create(base?: DeepPartial<EventRequestRedemption>): EventRequestRedemption {
    return EventRequestRedemption.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventRequestRedemption>): EventRequestRedemption {
    const message = createBaseEventRequestRedemption();
    message.schedule = (object.schedule !== undefined && object.schedule !== null)
      ? RedemptionSchedule.fromPartial(object.schedule)
      : undefined;
    return message;
  },
};

function createBaseEventWithdrawRedemption(): EventWithdrawRedemption {
  return { schedule: undefined, redeemCoin: undefined };
}

export const EventWithdrawRedemption = {
  encode(message: EventWithdrawRedemption, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.schedule !== undefined) {
      RedemptionSchedule.encode(message.schedule, writer.uint32(10).fork()).ldelim();
    }
    if (message.redeemCoin !== undefined) {
      Coin.encode(message.redeemCoin, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventWithdrawRedemption {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventWithdrawRedemption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.schedule = RedemptionSchedule.decode(reader, reader.uint32());
          break;
        case 2:
          message.redeemCoin = Coin.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventWithdrawRedemption {
    return {
      schedule: isSet(object.schedule) ? RedemptionSchedule.fromJSON(object.schedule) : undefined,
      redeemCoin: isSet(object.redeemCoin) ? Coin.fromJSON(object.redeemCoin) : undefined,
    };
  },

  toJSON(message: EventWithdrawRedemption): unknown {
    const obj: any = {};
    message.schedule !== undefined &&
      (obj.schedule = message.schedule ? RedemptionSchedule.toJSON(message.schedule) : undefined);
    message.redeemCoin !== undefined &&
      (obj.redeemCoin = message.redeemCoin ? Coin.toJSON(message.redeemCoin) : undefined);
    return obj;
  },

  create(base?: DeepPartial<EventWithdrawRedemption>): EventWithdrawRedemption {
    return EventWithdrawRedemption.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventWithdrawRedemption>): EventWithdrawRedemption {
    const message = createBaseEventWithdrawRedemption();
    message.schedule = (object.schedule !== undefined && object.schedule !== null)
      ? RedemptionSchedule.fromPartial(object.schedule)
      : undefined;
    message.redeemCoin = (object.redeemCoin !== undefined && object.redeemCoin !== null)
      ? Coin.fromPartial(object.redeemCoin)
      : undefined;
    return message;
  },
};

function createBaseEventUnderwrite(): EventUnderwrite {
  return { underwriter: "", marketId: "", deposit: undefined, shares: undefined };
}

export const EventUnderwrite = {
  encode(message: EventUnderwrite, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.underwriter !== "") {
      writer.uint32(10).string(message.underwriter);
    }
    if (message.marketId !== "") {
      writer.uint32(18).string(message.marketId);
    }
    if (message.deposit !== undefined) {
      Coin.encode(message.deposit, writer.uint32(26).fork()).ldelim();
    }
    if (message.shares !== undefined) {
      Coin.encode(message.shares, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventUnderwrite {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventUnderwrite();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.underwriter = reader.string();
          break;
        case 2:
          message.marketId = reader.string();
          break;
        case 3:
          message.deposit = Coin.decode(reader, reader.uint32());
          break;
        case 4:
          message.shares = Coin.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): EventUnderwrite {
    return {
      underwriter: isSet(object.underwriter) ? String(object.underwriter) : "",
      marketId: isSet(object.marketId) ? String(object.marketId) : "",
      deposit: isSet(object.deposit) ? Coin.fromJSON(object.deposit) : undefined,
      shares: isSet(object.shares) ? Coin.fromJSON(object.shares) : undefined,
    };
  },

  toJSON(message: EventUnderwrite): unknown {
    const obj: any = {};
    message.underwriter !== undefined && (obj.underwriter = message.underwriter);
    message.marketId !== undefined && (obj.marketId = message.marketId);
    message.deposit !== undefined && (obj.deposit = message.deposit ? Coin.toJSON(message.deposit) : undefined);
    message.shares !== undefined && (obj.shares = message.shares ? Coin.toJSON(message.shares) : undefined);
    return obj;
  },

  create(base?: DeepPartial<EventUnderwrite>): EventUnderwrite {
    return EventUnderwrite.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<EventUnderwrite>): EventUnderwrite {
    const message = createBaseEventUnderwrite();
    message.underwriter = object.underwriter ?? "";
    message.marketId = object.marketId ?? "";
    message.deposit = (object.deposit !== undefined && object.deposit !== null)
      ? Coin.fromPartial(object.deposit)
      : undefined;
    message.shares = (object.shares !== undefined && object.shares !== null)
      ? Coin.fromPartial(object.shares)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = Number(t.seconds) * 1_000;
  millis += t.nanos / 1_000_000;
  return new Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof Date) {
    return o;
  } else if (typeof o === "string") {
    return new Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
