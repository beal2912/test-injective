/* eslint-disable */
import { grpc } from "@injectivelabs/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";
import { share } from "rxjs/operators";

export const protobufPackage = "injective_auction_rpc";

export interface AuctionEndpointRequest {
  /** The auction round number. -1 for latest. */
  round: string;
}

export interface AuctionEndpointResponse {
  /** The auction */
  auction:
    | Auction
    | undefined;
  /** Bids of the auction */
  bids: Bid[];
}

export interface Auction {
  /** Account address of the auction winner */
  winner: string;
  /** Coins in the basket */
  basket: Coin[];
  winningBidAmount: string;
  round: string;
  /** Auction end timestamp in UNIX millis. */
  endTimestamp: string;
  /** UpdatedAt timestamp in UNIX millis. */
  updatedAt: string;
}

export interface Coin {
  /** Denom of the coin */
  denom: string;
  amount: string;
}

export interface Bid {
  /** Account address of the bidder */
  bidder: string;
  amount: string;
  /** Bid timestamp in UNIX millis. */
  timestamp: string;
}

export interface AuctionsRequest {
}

export interface AuctionsResponse {
  /** The historical auctions */
  auctions: Auction[];
}

export interface StreamBidsRequest {
}

export interface StreamBidsResponse {
  /** Account address of the bidder */
  bidder: string;
  bidAmount: string;
  round: string;
  /** Operation timestamp in UNIX millis. */
  timestamp: string;
}

function createBaseAuctionEndpointRequest(): AuctionEndpointRequest {
  return { round: "0" };
}

export const AuctionEndpointRequest = {
  encode(message: AuctionEndpointRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.round !== "0") {
      writer.uint32(8).sint64(message.round);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuctionEndpointRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuctionEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.round = longToString(reader.sint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): AuctionEndpointRequest {
    return { round: isSet(object.round) ? String(object.round) : "0" };
  },

  toJSON(message: AuctionEndpointRequest): unknown {
    const obj: any = {};
    message.round !== undefined && (obj.round = message.round);
    return obj;
  },

  create(base?: DeepPartial<AuctionEndpointRequest>): AuctionEndpointRequest {
    return AuctionEndpointRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<AuctionEndpointRequest>): AuctionEndpointRequest {
    const message = createBaseAuctionEndpointRequest();
    message.round = object.round ?? "0";
    return message;
  },
};

function createBaseAuctionEndpointResponse(): AuctionEndpointResponse {
  return { auction: undefined, bids: [] };
}

export const AuctionEndpointResponse = {
  encode(message: AuctionEndpointResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.auction !== undefined) {
      Auction.encode(message.auction, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.bids) {
      Bid.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuctionEndpointResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuctionEndpointResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.auction = Auction.decode(reader, reader.uint32());
          break;
        case 2:
          message.bids.push(Bid.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): AuctionEndpointResponse {
    return {
      auction: isSet(object.auction) ? Auction.fromJSON(object.auction) : undefined,
      bids: Array.isArray(object?.bids) ? object.bids.map((e: any) => Bid.fromJSON(e)) : [],
    };
  },

  toJSON(message: AuctionEndpointResponse): unknown {
    const obj: any = {};
    message.auction !== undefined && (obj.auction = message.auction ? Auction.toJSON(message.auction) : undefined);
    if (message.bids) {
      obj.bids = message.bids.map((e) => e ? Bid.toJSON(e) : undefined);
    } else {
      obj.bids = [];
    }
    return obj;
  },

  create(base?: DeepPartial<AuctionEndpointResponse>): AuctionEndpointResponse {
    return AuctionEndpointResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<AuctionEndpointResponse>): AuctionEndpointResponse {
    const message = createBaseAuctionEndpointResponse();
    message.auction = (object.auction !== undefined && object.auction !== null)
      ? Auction.fromPartial(object.auction)
      : undefined;
    message.bids = object.bids?.map((e) => Bid.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAuction(): Auction {
  return { winner: "", basket: [], winningBidAmount: "", round: "0", endTimestamp: "0", updatedAt: "0" };
}

export const Auction = {
  encode(message: Auction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.winner !== "") {
      writer.uint32(10).string(message.winner);
    }
    for (const v of message.basket) {
      Coin.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.winningBidAmount !== "") {
      writer.uint32(26).string(message.winningBidAmount);
    }
    if (message.round !== "0") {
      writer.uint32(32).uint64(message.round);
    }
    if (message.endTimestamp !== "0") {
      writer.uint32(40).sint64(message.endTimestamp);
    }
    if (message.updatedAt !== "0") {
      writer.uint32(48).sint64(message.updatedAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Auction {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.winner = reader.string();
          break;
        case 2:
          message.basket.push(Coin.decode(reader, reader.uint32()));
          break;
        case 3:
          message.winningBidAmount = reader.string();
          break;
        case 4:
          message.round = longToString(reader.uint64() as Long);
          break;
        case 5:
          message.endTimestamp = longToString(reader.sint64() as Long);
          break;
        case 6:
          message.updatedAt = longToString(reader.sint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Auction {
    return {
      winner: isSet(object.winner) ? String(object.winner) : "",
      basket: Array.isArray(object?.basket) ? object.basket.map((e: any) => Coin.fromJSON(e)) : [],
      winningBidAmount: isSet(object.winningBidAmount) ? String(object.winningBidAmount) : "",
      round: isSet(object.round) ? String(object.round) : "0",
      endTimestamp: isSet(object.endTimestamp) ? String(object.endTimestamp) : "0",
      updatedAt: isSet(object.updatedAt) ? String(object.updatedAt) : "0",
    };
  },

  toJSON(message: Auction): unknown {
    const obj: any = {};
    message.winner !== undefined && (obj.winner = message.winner);
    if (message.basket) {
      obj.basket = message.basket.map((e) => e ? Coin.toJSON(e) : undefined);
    } else {
      obj.basket = [];
    }
    message.winningBidAmount !== undefined && (obj.winningBidAmount = message.winningBidAmount);
    message.round !== undefined && (obj.round = message.round);
    message.endTimestamp !== undefined && (obj.endTimestamp = message.endTimestamp);
    message.updatedAt !== undefined && (obj.updatedAt = message.updatedAt);
    return obj;
  },

  create(base?: DeepPartial<Auction>): Auction {
    return Auction.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Auction>): Auction {
    const message = createBaseAuction();
    message.winner = object.winner ?? "";
    message.basket = object.basket?.map((e) => Coin.fromPartial(e)) || [];
    message.winningBidAmount = object.winningBidAmount ?? "";
    message.round = object.round ?? "0";
    message.endTimestamp = object.endTimestamp ?? "0";
    message.updatedAt = object.updatedAt ?? "0";
    return message;
  },
};

function createBaseCoin(): Coin {
  return { denom: "", amount: "" };
}

export const Coin = {
  encode(message: Coin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Coin {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;
        case 2:
          message.amount = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Coin {
    return {
      denom: isSet(object.denom) ? String(object.denom) : "",
      amount: isSet(object.amount) ? String(object.amount) : "",
    };
  },

  toJSON(message: Coin): unknown {
    const obj: any = {};
    message.denom !== undefined && (obj.denom = message.denom);
    message.amount !== undefined && (obj.amount = message.amount);
    return obj;
  },

  create(base?: DeepPartial<Coin>): Coin {
    return Coin.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Coin>): Coin {
    const message = createBaseCoin();
    message.denom = object.denom ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseBid(): Bid {
  return { bidder: "", amount: "", timestamp: "0" };
}

export const Bid = {
  encode(message: Bid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bidder !== "") {
      writer.uint32(10).string(message.bidder);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    if (message.timestamp !== "0") {
      writer.uint32(24).sint64(message.timestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Bid {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.bidder = reader.string();
          break;
        case 2:
          message.amount = reader.string();
          break;
        case 3:
          message.timestamp = longToString(reader.sint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Bid {
    return {
      bidder: isSet(object.bidder) ? String(object.bidder) : "",
      amount: isSet(object.amount) ? String(object.amount) : "",
      timestamp: isSet(object.timestamp) ? String(object.timestamp) : "0",
    };
  },

  toJSON(message: Bid): unknown {
    const obj: any = {};
    message.bidder !== undefined && (obj.bidder = message.bidder);
    message.amount !== undefined && (obj.amount = message.amount);
    message.timestamp !== undefined && (obj.timestamp = message.timestamp);
    return obj;
  },

  create(base?: DeepPartial<Bid>): Bid {
    return Bid.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Bid>): Bid {
    const message = createBaseBid();
    message.bidder = object.bidder ?? "";
    message.amount = object.amount ?? "";
    message.timestamp = object.timestamp ?? "0";
    return message;
  },
};

function createBaseAuctionsRequest(): AuctionsRequest {
  return {};
}

export const AuctionsRequest = {
  encode(_: AuctionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuctionsRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuctionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): AuctionsRequest {
    return {};
  },

  toJSON(_: AuctionsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AuctionsRequest>): AuctionsRequest {
    return AuctionsRequest.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<AuctionsRequest>): AuctionsRequest {
    const message = createBaseAuctionsRequest();
    return message;
  },
};

function createBaseAuctionsResponse(): AuctionsResponse {
  return { auctions: [] };
}

export const AuctionsResponse = {
  encode(message: AuctionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.auctions) {
      Auction.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuctionsResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuctionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.auctions.push(Auction.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): AuctionsResponse {
    return { auctions: Array.isArray(object?.auctions) ? object.auctions.map((e: any) => Auction.fromJSON(e)) : [] };
  },

  toJSON(message: AuctionsResponse): unknown {
    const obj: any = {};
    if (message.auctions) {
      obj.auctions = message.auctions.map((e) => e ? Auction.toJSON(e) : undefined);
    } else {
      obj.auctions = [];
    }
    return obj;
  },

  create(base?: DeepPartial<AuctionsResponse>): AuctionsResponse {
    return AuctionsResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<AuctionsResponse>): AuctionsResponse {
    const message = createBaseAuctionsResponse();
    message.auctions = object.auctions?.map((e) => Auction.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamBidsRequest(): StreamBidsRequest {
  return {};
}

export const StreamBidsRequest = {
  encode(_: StreamBidsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamBidsRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamBidsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): StreamBidsRequest {
    return {};
  },

  toJSON(_: StreamBidsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<StreamBidsRequest>): StreamBidsRequest {
    return StreamBidsRequest.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<StreamBidsRequest>): StreamBidsRequest {
    const message = createBaseStreamBidsRequest();
    return message;
  },
};

function createBaseStreamBidsResponse(): StreamBidsResponse {
  return { bidder: "", bidAmount: "", round: "0", timestamp: "0" };
}

export const StreamBidsResponse = {
  encode(message: StreamBidsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bidder !== "") {
      writer.uint32(10).string(message.bidder);
    }
    if (message.bidAmount !== "") {
      writer.uint32(18).string(message.bidAmount);
    }
    if (message.round !== "0") {
      writer.uint32(24).uint64(message.round);
    }
    if (message.timestamp !== "0") {
      writer.uint32(32).sint64(message.timestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamBidsResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamBidsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.bidder = reader.string();
          break;
        case 2:
          message.bidAmount = reader.string();
          break;
        case 3:
          message.round = longToString(reader.uint64() as Long);
          break;
        case 4:
          message.timestamp = longToString(reader.sint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): StreamBidsResponse {
    return {
      bidder: isSet(object.bidder) ? String(object.bidder) : "",
      bidAmount: isSet(object.bidAmount) ? String(object.bidAmount) : "",
      round: isSet(object.round) ? String(object.round) : "0",
      timestamp: isSet(object.timestamp) ? String(object.timestamp) : "0",
    };
  },

  toJSON(message: StreamBidsResponse): unknown {
    const obj: any = {};
    message.bidder !== undefined && (obj.bidder = message.bidder);
    message.bidAmount !== undefined && (obj.bidAmount = message.bidAmount);
    message.round !== undefined && (obj.round = message.round);
    message.timestamp !== undefined && (obj.timestamp = message.timestamp);
    return obj;
  },

  create(base?: DeepPartial<StreamBidsResponse>): StreamBidsResponse {
    return StreamBidsResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<StreamBidsResponse>): StreamBidsResponse {
    const message = createBaseStreamBidsResponse();
    message.bidder = object.bidder ?? "";
    message.bidAmount = object.bidAmount ?? "";
    message.round = object.round ?? "0";
    message.timestamp = object.timestamp ?? "0";
    return message;
  },
};

/** InjectiveAuctionRPC defines gRPC API of the Auction API. */
export interface InjectiveAuctionRPC {
  /** Provide historical auction info for a given auction */
  AuctionEndpoint(
    request: DeepPartial<AuctionEndpointRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AuctionEndpointResponse>;
  /** Provide the historical auctions info */
  Auctions(request: DeepPartial<AuctionsRequest>, metadata?: grpc.Metadata): Promise<AuctionsResponse>;
  /** StreamBids streams new bids of an auction. */
  StreamBids(request: DeepPartial<StreamBidsRequest>, metadata?: grpc.Metadata): Observable<StreamBidsResponse>;
}

export class InjectiveAuctionRPCClientImpl implements InjectiveAuctionRPC {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.AuctionEndpoint = this.AuctionEndpoint.bind(this);
    this.Auctions = this.Auctions.bind(this);
    this.StreamBids = this.StreamBids.bind(this);
  }

  AuctionEndpoint(
    request: DeepPartial<AuctionEndpointRequest>,
    metadata?: grpc.Metadata,
  ): Promise<AuctionEndpointResponse> {
    return this.rpc.unary(
      InjectiveAuctionRPCAuctionEndpointDesc,
      AuctionEndpointRequest.fromPartial(request),
      metadata,
    );
  }

  Auctions(request: DeepPartial<AuctionsRequest>, metadata?: grpc.Metadata): Promise<AuctionsResponse> {
    return this.rpc.unary(InjectiveAuctionRPCAuctionsDesc, AuctionsRequest.fromPartial(request), metadata);
  }

  StreamBids(request: DeepPartial<StreamBidsRequest>, metadata?: grpc.Metadata): Observable<StreamBidsResponse> {
    return this.rpc.invoke(InjectiveAuctionRPCStreamBidsDesc, StreamBidsRequest.fromPartial(request), metadata);
  }
}

export const InjectiveAuctionRPCDesc = { serviceName: "injective_auction_rpc.InjectiveAuctionRPC" };

export const InjectiveAuctionRPCAuctionEndpointDesc: UnaryMethodDefinitionish = {
  methodName: "AuctionEndpoint",
  service: InjectiveAuctionRPCDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AuctionEndpointRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AuctionEndpointResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const InjectiveAuctionRPCAuctionsDesc: UnaryMethodDefinitionish = {
  methodName: "Auctions",
  service: InjectiveAuctionRPCDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AuctionsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = AuctionsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const InjectiveAuctionRPCStreamBidsDesc: UnaryMethodDefinitionish = {
  methodName: "StreamBids",
  service: InjectiveAuctionRPCDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamBidsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamBidsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;
    streamingTransport?: grpc.TransportFactory;
    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;
      streamingTransport?: grpc.TransportFactory;
      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata || this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }

  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any> {
    const upStreamCodes = this.options.upStreamRetryCodes || [];
    const DEFAULT_TIMEOUT_TIME: number = 3_000;
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata || this.options.metadata;
    return new Observable((observer) => {
      const upStream = (() => {
        const client = grpc.invoke(methodDesc, {
          host: this.host,
          request,
          transport: this.options.streamingTransport || this.options.transport,
          metadata: maybeCombinedMetadata,
          debug: this.options.debug,
          onMessage: (next) => observer.next(next),
          onEnd: (code: grpc.Code, message: string, trailers: grpc.Metadata) => {
            if (code === 0) {
              observer.complete();
            } else if (upStreamCodes.includes(code)) {
              setTimeout(upStream, DEFAULT_TIMEOUT_TIME);
            } else {
              const err = new Error(message) as any;
              err.code = code;
              err.metadata = trailers;
              observer.error(err);
            }
          },
        });
        observer.add(() => client.close());
      });
      upStream();
    }).pipe(share());
  }
}

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends tsProtoGlobalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
