/* eslint-disable */
import { grpc } from "@injectivelabs/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "injective_insurance_rpc";

export interface FundsRequest {
}

export interface FundsResponse {
  funds: InsuranceFund[];
}

export interface InsuranceFund {
  /** Ticker of the derivative market. */
  marketTicker: string;
  /** Derivative Market ID */
  marketId: string;
  /** Coin denom used for the underwriting of the insurance fund. */
  depositDenom: string;
  /** Pool token denom */
  poolTokenDenom: string;
  /** Redemption notice period duration in seconds. */
  redemptionNoticePeriodDuration: string;
  balance: string;
  totalShare: string;
  /** Oracle base currency */
  oracleBase: string;
  /** Oracle quote currency */
  oracleQuote: string;
  /** Oracle Type */
  oracleType: string;
  /** Defines the expiry, if any */
  expiry: string;
  /** Token metadata for the deposit asset, only for Ethereum-based assets */
  depositTokenMeta: TokenMeta | undefined;
}

export interface TokenMeta {
  /** Token full name */
  name: string;
  /** Token Ethereum contract address */
  address: string;
  /** Token symbol short name */
  symbol: string;
  /** URL to the logo image */
  logo: string;
  /** Token decimals */
  decimals: number;
  /** Token metadata fetched timestamp in UNIX millis. */
  updatedAt: string;
}

export interface RedemptionsRequest {
  /** Account address of the redemption owner */
  redeemer: string;
  /** Denom of the insurance pool token. */
  redemptionDenom: string;
  /** Status of the redemption. Either pending or disbursed. */
  status: string;
}

export interface RedemptionsResponse {
  redemptionSchedules: RedemptionSchedule[];
}

export interface RedemptionSchedule {
  /** Redemption ID. */
  redemptionId: string;
  /** Status of the redemption. Either pending or disbursed. */
  status: string;
  /** Account address of the redemption owner */
  redeemer: string;
  /** Claimable redemption time in seconds */
  claimableRedemptionTime: string;
  /** Amount of pool tokens being redeemed. */
  redemptionAmount: string;
  /** Pool token denom being redeemed. */
  redemptionDenom: string;
  /** Redemption request time in unix milliseconds. */
  requestedAt: string;
  /** Amount of quote tokens disbursed */
  disbursedAmount: string;
  /** Denom of the quote tokens disbursed */
  disbursedDenom: string;
  /** Redemption disbursement time in unix milliseconds. */
  disbursedAt: string;
}

function createBaseFundsRequest(): FundsRequest {
  return {};
}

export const FundsRequest = {
  encode(_: FundsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FundsRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFundsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): FundsRequest {
    return {};
  },

  toJSON(_: FundsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FundsRequest>): FundsRequest {
    return FundsRequest.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<FundsRequest>): FundsRequest {
    const message = createBaseFundsRequest();
    return message;
  },
};

function createBaseFundsResponse(): FundsResponse {
  return { funds: [] };
}

export const FundsResponse = {
  encode(message: FundsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.funds) {
      InsuranceFund.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FundsResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFundsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.funds.push(InsuranceFund.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): FundsResponse {
    return { funds: Array.isArray(object?.funds) ? object.funds.map((e: any) => InsuranceFund.fromJSON(e)) : [] };
  },

  toJSON(message: FundsResponse): unknown {
    const obj: any = {};
    if (message.funds) {
      obj.funds = message.funds.map((e) => e ? InsuranceFund.toJSON(e) : undefined);
    } else {
      obj.funds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<FundsResponse>): FundsResponse {
    return FundsResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<FundsResponse>): FundsResponse {
    const message = createBaseFundsResponse();
    message.funds = object.funds?.map((e) => InsuranceFund.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInsuranceFund(): InsuranceFund {
  return {
    marketTicker: "",
    marketId: "",
    depositDenom: "",
    poolTokenDenom: "",
    redemptionNoticePeriodDuration: "0",
    balance: "",
    totalShare: "",
    oracleBase: "",
    oracleQuote: "",
    oracleType: "",
    expiry: "0",
    depositTokenMeta: undefined,
  };
}

export const InsuranceFund = {
  encode(message: InsuranceFund, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.marketTicker !== "") {
      writer.uint32(10).string(message.marketTicker);
    }
    if (message.marketId !== "") {
      writer.uint32(18).string(message.marketId);
    }
    if (message.depositDenom !== "") {
      writer.uint32(26).string(message.depositDenom);
    }
    if (message.poolTokenDenom !== "") {
      writer.uint32(34).string(message.poolTokenDenom);
    }
    if (message.redemptionNoticePeriodDuration !== "0") {
      writer.uint32(40).sint64(message.redemptionNoticePeriodDuration);
    }
    if (message.balance !== "") {
      writer.uint32(50).string(message.balance);
    }
    if (message.totalShare !== "") {
      writer.uint32(58).string(message.totalShare);
    }
    if (message.oracleBase !== "") {
      writer.uint32(66).string(message.oracleBase);
    }
    if (message.oracleQuote !== "") {
      writer.uint32(74).string(message.oracleQuote);
    }
    if (message.oracleType !== "") {
      writer.uint32(82).string(message.oracleType);
    }
    if (message.expiry !== "0") {
      writer.uint32(88).sint64(message.expiry);
    }
    if (message.depositTokenMeta !== undefined) {
      TokenMeta.encode(message.depositTokenMeta, writer.uint32(98).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InsuranceFund {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsuranceFund();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.marketTicker = reader.string();
          break;
        case 2:
          message.marketId = reader.string();
          break;
        case 3:
          message.depositDenom = reader.string();
          break;
        case 4:
          message.poolTokenDenom = reader.string();
          break;
        case 5:
          message.redemptionNoticePeriodDuration = longToString(reader.sint64() as Long);
          break;
        case 6:
          message.balance = reader.string();
          break;
        case 7:
          message.totalShare = reader.string();
          break;
        case 8:
          message.oracleBase = reader.string();
          break;
        case 9:
          message.oracleQuote = reader.string();
          break;
        case 10:
          message.oracleType = reader.string();
          break;
        case 11:
          message.expiry = longToString(reader.sint64() as Long);
          break;
        case 12:
          message.depositTokenMeta = TokenMeta.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): InsuranceFund {
    return {
      marketTicker: isSet(object.marketTicker) ? String(object.marketTicker) : "",
      marketId: isSet(object.marketId) ? String(object.marketId) : "",
      depositDenom: isSet(object.depositDenom) ? String(object.depositDenom) : "",
      poolTokenDenom: isSet(object.poolTokenDenom) ? String(object.poolTokenDenom) : "",
      redemptionNoticePeriodDuration: isSet(object.redemptionNoticePeriodDuration)
        ? String(object.redemptionNoticePeriodDuration)
        : "0",
      balance: isSet(object.balance) ? String(object.balance) : "",
      totalShare: isSet(object.totalShare) ? String(object.totalShare) : "",
      oracleBase: isSet(object.oracleBase) ? String(object.oracleBase) : "",
      oracleQuote: isSet(object.oracleQuote) ? String(object.oracleQuote) : "",
      oracleType: isSet(object.oracleType) ? String(object.oracleType) : "",
      expiry: isSet(object.expiry) ? String(object.expiry) : "0",
      depositTokenMeta: isSet(object.depositTokenMeta) ? TokenMeta.fromJSON(object.depositTokenMeta) : undefined,
    };
  },

  toJSON(message: InsuranceFund): unknown {
    const obj: any = {};
    message.marketTicker !== undefined && (obj.marketTicker = message.marketTicker);
    message.marketId !== undefined && (obj.marketId = message.marketId);
    message.depositDenom !== undefined && (obj.depositDenom = message.depositDenom);
    message.poolTokenDenom !== undefined && (obj.poolTokenDenom = message.poolTokenDenom);
    message.redemptionNoticePeriodDuration !== undefined &&
      (obj.redemptionNoticePeriodDuration = message.redemptionNoticePeriodDuration);
    message.balance !== undefined && (obj.balance = message.balance);
    message.totalShare !== undefined && (obj.totalShare = message.totalShare);
    message.oracleBase !== undefined && (obj.oracleBase = message.oracleBase);
    message.oracleQuote !== undefined && (obj.oracleQuote = message.oracleQuote);
    message.oracleType !== undefined && (obj.oracleType = message.oracleType);
    message.expiry !== undefined && (obj.expiry = message.expiry);
    message.depositTokenMeta !== undefined &&
      (obj.depositTokenMeta = message.depositTokenMeta ? TokenMeta.toJSON(message.depositTokenMeta) : undefined);
    return obj;
  },

  create(base?: DeepPartial<InsuranceFund>): InsuranceFund {
    return InsuranceFund.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<InsuranceFund>): InsuranceFund {
    const message = createBaseInsuranceFund();
    message.marketTicker = object.marketTicker ?? "";
    message.marketId = object.marketId ?? "";
    message.depositDenom = object.depositDenom ?? "";
    message.poolTokenDenom = object.poolTokenDenom ?? "";
    message.redemptionNoticePeriodDuration = object.redemptionNoticePeriodDuration ?? "0";
    message.balance = object.balance ?? "";
    message.totalShare = object.totalShare ?? "";
    message.oracleBase = object.oracleBase ?? "";
    message.oracleQuote = object.oracleQuote ?? "";
    message.oracleType = object.oracleType ?? "";
    message.expiry = object.expiry ?? "0";
    message.depositTokenMeta = (object.depositTokenMeta !== undefined && object.depositTokenMeta !== null)
      ? TokenMeta.fromPartial(object.depositTokenMeta)
      : undefined;
    return message;
  },
};

function createBaseTokenMeta(): TokenMeta {
  return { name: "", address: "", symbol: "", logo: "", decimals: 0, updatedAt: "0" };
}

export const TokenMeta = {
  encode(message: TokenMeta, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.symbol !== "") {
      writer.uint32(26).string(message.symbol);
    }
    if (message.logo !== "") {
      writer.uint32(34).string(message.logo);
    }
    if (message.decimals !== 0) {
      writer.uint32(40).sint32(message.decimals);
    }
    if (message.updatedAt !== "0") {
      writer.uint32(48).sint64(message.updatedAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TokenMeta {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;
        case 2:
          message.address = reader.string();
          break;
        case 3:
          message.symbol = reader.string();
          break;
        case 4:
          message.logo = reader.string();
          break;
        case 5:
          message.decimals = reader.sint32();
          break;
        case 6:
          message.updatedAt = longToString(reader.sint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): TokenMeta {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      address: isSet(object.address) ? String(object.address) : "",
      symbol: isSet(object.symbol) ? String(object.symbol) : "",
      logo: isSet(object.logo) ? String(object.logo) : "",
      decimals: isSet(object.decimals) ? Number(object.decimals) : 0,
      updatedAt: isSet(object.updatedAt) ? String(object.updatedAt) : "0",
    };
  },

  toJSON(message: TokenMeta): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.address !== undefined && (obj.address = message.address);
    message.symbol !== undefined && (obj.symbol = message.symbol);
    message.logo !== undefined && (obj.logo = message.logo);
    message.decimals !== undefined && (obj.decimals = Math.round(message.decimals));
    message.updatedAt !== undefined && (obj.updatedAt = message.updatedAt);
    return obj;
  },

  create(base?: DeepPartial<TokenMeta>): TokenMeta {
    return TokenMeta.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<TokenMeta>): TokenMeta {
    const message = createBaseTokenMeta();
    message.name = object.name ?? "";
    message.address = object.address ?? "";
    message.symbol = object.symbol ?? "";
    message.logo = object.logo ?? "";
    message.decimals = object.decimals ?? 0;
    message.updatedAt = object.updatedAt ?? "0";
    return message;
  },
};

function createBaseRedemptionsRequest(): RedemptionsRequest {
  return { redeemer: "", redemptionDenom: "", status: "" };
}

export const RedemptionsRequest = {
  encode(message: RedemptionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.redeemer !== "") {
      writer.uint32(10).string(message.redeemer);
    }
    if (message.redemptionDenom !== "") {
      writer.uint32(18).string(message.redemptionDenom);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RedemptionsRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedemptionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.redeemer = reader.string();
          break;
        case 2:
          message.redemptionDenom = reader.string();
          break;
        case 3:
          message.status = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RedemptionsRequest {
    return {
      redeemer: isSet(object.redeemer) ? String(object.redeemer) : "",
      redemptionDenom: isSet(object.redemptionDenom) ? String(object.redemptionDenom) : "",
      status: isSet(object.status) ? String(object.status) : "",
    };
  },

  toJSON(message: RedemptionsRequest): unknown {
    const obj: any = {};
    message.redeemer !== undefined && (obj.redeemer = message.redeemer);
    message.redemptionDenom !== undefined && (obj.redemptionDenom = message.redemptionDenom);
    message.status !== undefined && (obj.status = message.status);
    return obj;
  },

  create(base?: DeepPartial<RedemptionsRequest>): RedemptionsRequest {
    return RedemptionsRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<RedemptionsRequest>): RedemptionsRequest {
    const message = createBaseRedemptionsRequest();
    message.redeemer = object.redeemer ?? "";
    message.redemptionDenom = object.redemptionDenom ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseRedemptionsResponse(): RedemptionsResponse {
  return { redemptionSchedules: [] };
}

export const RedemptionsResponse = {
  encode(message: RedemptionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.redemptionSchedules) {
      RedemptionSchedule.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RedemptionsResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedemptionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.redemptionSchedules.push(RedemptionSchedule.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RedemptionsResponse {
    return {
      redemptionSchedules: Array.isArray(object?.redemptionSchedules)
        ? object.redemptionSchedules.map((e: any) => RedemptionSchedule.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RedemptionsResponse): unknown {
    const obj: any = {};
    if (message.redemptionSchedules) {
      obj.redemptionSchedules = message.redemptionSchedules.map((e) => e ? RedemptionSchedule.toJSON(e) : undefined);
    } else {
      obj.redemptionSchedules = [];
    }
    return obj;
  },

  create(base?: DeepPartial<RedemptionsResponse>): RedemptionsResponse {
    return RedemptionsResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<RedemptionsResponse>): RedemptionsResponse {
    const message = createBaseRedemptionsResponse();
    message.redemptionSchedules = object.redemptionSchedules?.map((e) => RedemptionSchedule.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRedemptionSchedule(): RedemptionSchedule {
  return {
    redemptionId: "0",
    status: "",
    redeemer: "",
    claimableRedemptionTime: "0",
    redemptionAmount: "",
    redemptionDenom: "",
    requestedAt: "0",
    disbursedAmount: "",
    disbursedDenom: "",
    disbursedAt: "0",
  };
}

export const RedemptionSchedule = {
  encode(message: RedemptionSchedule, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.redemptionId !== "0") {
      writer.uint32(8).uint64(message.redemptionId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.redeemer !== "") {
      writer.uint32(26).string(message.redeemer);
    }
    if (message.claimableRedemptionTime !== "0") {
      writer.uint32(32).sint64(message.claimableRedemptionTime);
    }
    if (message.redemptionAmount !== "") {
      writer.uint32(42).string(message.redemptionAmount);
    }
    if (message.redemptionDenom !== "") {
      writer.uint32(50).string(message.redemptionDenom);
    }
    if (message.requestedAt !== "0") {
      writer.uint32(56).sint64(message.requestedAt);
    }
    if (message.disbursedAmount !== "") {
      writer.uint32(66).string(message.disbursedAmount);
    }
    if (message.disbursedDenom !== "") {
      writer.uint32(74).string(message.disbursedDenom);
    }
    if (message.disbursedAt !== "0") {
      writer.uint32(80).sint64(message.disbursedAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RedemptionSchedule {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedemptionSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.redemptionId = longToString(reader.uint64() as Long);
          break;
        case 2:
          message.status = reader.string();
          break;
        case 3:
          message.redeemer = reader.string();
          break;
        case 4:
          message.claimableRedemptionTime = longToString(reader.sint64() as Long);
          break;
        case 5:
          message.redemptionAmount = reader.string();
          break;
        case 6:
          message.redemptionDenom = reader.string();
          break;
        case 7:
          message.requestedAt = longToString(reader.sint64() as Long);
          break;
        case 8:
          message.disbursedAmount = reader.string();
          break;
        case 9:
          message.disbursedDenom = reader.string();
          break;
        case 10:
          message.disbursedAt = longToString(reader.sint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RedemptionSchedule {
    return {
      redemptionId: isSet(object.redemptionId) ? String(object.redemptionId) : "0",
      status: isSet(object.status) ? String(object.status) : "",
      redeemer: isSet(object.redeemer) ? String(object.redeemer) : "",
      claimableRedemptionTime: isSet(object.claimableRedemptionTime) ? String(object.claimableRedemptionTime) : "0",
      redemptionAmount: isSet(object.redemptionAmount) ? String(object.redemptionAmount) : "",
      redemptionDenom: isSet(object.redemptionDenom) ? String(object.redemptionDenom) : "",
      requestedAt: isSet(object.requestedAt) ? String(object.requestedAt) : "0",
      disbursedAmount: isSet(object.disbursedAmount) ? String(object.disbursedAmount) : "",
      disbursedDenom: isSet(object.disbursedDenom) ? String(object.disbursedDenom) : "",
      disbursedAt: isSet(object.disbursedAt) ? String(object.disbursedAt) : "0",
    };
  },

  toJSON(message: RedemptionSchedule): unknown {
    const obj: any = {};
    message.redemptionId !== undefined && (obj.redemptionId = message.redemptionId);
    message.status !== undefined && (obj.status = message.status);
    message.redeemer !== undefined && (obj.redeemer = message.redeemer);
    message.claimableRedemptionTime !== undefined && (obj.claimableRedemptionTime = message.claimableRedemptionTime);
    message.redemptionAmount !== undefined && (obj.redemptionAmount = message.redemptionAmount);
    message.redemptionDenom !== undefined && (obj.redemptionDenom = message.redemptionDenom);
    message.requestedAt !== undefined && (obj.requestedAt = message.requestedAt);
    message.disbursedAmount !== undefined && (obj.disbursedAmount = message.disbursedAmount);
    message.disbursedDenom !== undefined && (obj.disbursedDenom = message.disbursedDenom);
    message.disbursedAt !== undefined && (obj.disbursedAt = message.disbursedAt);
    return obj;
  },

  create(base?: DeepPartial<RedemptionSchedule>): RedemptionSchedule {
    return RedemptionSchedule.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<RedemptionSchedule>): RedemptionSchedule {
    const message = createBaseRedemptionSchedule();
    message.redemptionId = object.redemptionId ?? "0";
    message.status = object.status ?? "";
    message.redeemer = object.redeemer ?? "";
    message.claimableRedemptionTime = object.claimableRedemptionTime ?? "0";
    message.redemptionAmount = object.redemptionAmount ?? "";
    message.redemptionDenom = object.redemptionDenom ?? "";
    message.requestedAt = object.requestedAt ?? "0";
    message.disbursedAmount = object.disbursedAmount ?? "";
    message.disbursedDenom = object.disbursedDenom ?? "";
    message.disbursedAt = object.disbursedAt ?? "0";
    return message;
  },
};

/** InjectiveInsuranceRPC defines gRPC API of Insurance provider. */
export interface InjectiveInsuranceRPC {
  /** Funds lists all insurance funds. */
  Funds(request: DeepPartial<FundsRequest>, metadata?: grpc.Metadata): Promise<FundsResponse>;
  /** PendingRedemptions lists all pending redemptions according to a filter */
  Redemptions(request: DeepPartial<RedemptionsRequest>, metadata?: grpc.Metadata): Promise<RedemptionsResponse>;
}

export class InjectiveInsuranceRPCClientImpl implements InjectiveInsuranceRPC {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.Funds = this.Funds.bind(this);
    this.Redemptions = this.Redemptions.bind(this);
  }

  Funds(request: DeepPartial<FundsRequest>, metadata?: grpc.Metadata): Promise<FundsResponse> {
    return this.rpc.unary(InjectiveInsuranceRPCFundsDesc, FundsRequest.fromPartial(request), metadata);
  }

  Redemptions(request: DeepPartial<RedemptionsRequest>, metadata?: grpc.Metadata): Promise<RedemptionsResponse> {
    return this.rpc.unary(InjectiveInsuranceRPCRedemptionsDesc, RedemptionsRequest.fromPartial(request), metadata);
  }
}

export const InjectiveInsuranceRPCDesc = { serviceName: "injective_insurance_rpc.InjectiveInsuranceRPC" };

export const InjectiveInsuranceRPCFundsDesc: UnaryMethodDefinitionish = {
  methodName: "Funds",
  service: InjectiveInsuranceRPCDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return FundsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = FundsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const InjectiveInsuranceRPCRedemptionsDesc: UnaryMethodDefinitionish = {
  methodName: "Redemptions",
  service: InjectiveInsuranceRPCDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RedemptionsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = RedemptionsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata || this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends tsProtoGlobalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
