/* eslint-disable */
import { grpc } from "@injectivelabs/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "event_provider_api";

export interface GetLatestHeightRequest {
}

export interface GetLatestHeightResponse {
  /** Status of the response. */
  s: string;
  /** Error message. */
  errmsg: string;
  data: LatestBlockHeight | undefined;
}

/** Latest block height from event provider db */
export interface LatestBlockHeight {
  height: string;
}

export interface GetBlockEventsRPCRequest {
  /** Select backend processor */
  backend: string;
  height: number;
}

export interface GetBlockEventsRPCResponse {
  /** Status of the response. */
  s: string;
  /** Error message. */
  errmsg: string;
  data: BlockEventsRPC | undefined;
}

/** Processed block events for backend processor to consume */
export interface BlockEventsRPC {
  /** Array of event types */
  types: string[];
  /** Array of parsed events */
  events: Uint8Array[];
}

export interface GetCustomEventsRPCRequest {
  /** Select backend processor */
  backend: string;
  height: number;
  /** Specify custom events to get */
  events: string;
}

export interface GetCustomEventsRPCResponse {
  /** Status of the response. */
  s: string;
  /** Error message. */
  errmsg: string;
  data: BlockEventsRPC | undefined;
}

function createBaseGetLatestHeightRequest(): GetLatestHeightRequest {
  return {};
}

export const GetLatestHeightRequest = {
  encode(_: GetLatestHeightRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLatestHeightRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLatestHeightRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): GetLatestHeightRequest {
    return {};
  },

  toJSON(_: GetLatestHeightRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetLatestHeightRequest>): GetLatestHeightRequest {
    return GetLatestHeightRequest.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<GetLatestHeightRequest>): GetLatestHeightRequest {
    const message = createBaseGetLatestHeightRequest();
    return message;
  },
};

function createBaseGetLatestHeightResponse(): GetLatestHeightResponse {
  return { s: "", errmsg: "", data: undefined };
}

export const GetLatestHeightResponse = {
  encode(message: GetLatestHeightResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.s !== "") {
      writer.uint32(10).string(message.s);
    }
    if (message.errmsg !== "") {
      writer.uint32(18).string(message.errmsg);
    }
    if (message.data !== undefined) {
      LatestBlockHeight.encode(message.data, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLatestHeightResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLatestHeightResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.s = reader.string();
          break;
        case 2:
          message.errmsg = reader.string();
          break;
        case 3:
          message.data = LatestBlockHeight.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetLatestHeightResponse {
    return {
      s: isSet(object.s) ? String(object.s) : "",
      errmsg: isSet(object.errmsg) ? String(object.errmsg) : "",
      data: isSet(object.data) ? LatestBlockHeight.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: GetLatestHeightResponse): unknown {
    const obj: any = {};
    message.s !== undefined && (obj.s = message.s);
    message.errmsg !== undefined && (obj.errmsg = message.errmsg);
    message.data !== undefined && (obj.data = message.data ? LatestBlockHeight.toJSON(message.data) : undefined);
    return obj;
  },

  create(base?: DeepPartial<GetLatestHeightResponse>): GetLatestHeightResponse {
    return GetLatestHeightResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GetLatestHeightResponse>): GetLatestHeightResponse {
    const message = createBaseGetLatestHeightResponse();
    message.s = object.s ?? "";
    message.errmsg = object.errmsg ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? LatestBlockHeight.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseLatestBlockHeight(): LatestBlockHeight {
  return { height: "0" };
}

export const LatestBlockHeight = {
  encode(message: LatestBlockHeight, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.height !== "0") {
      writer.uint32(8).uint64(message.height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LatestBlockHeight {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLatestBlockHeight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.height = longToString(reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): LatestBlockHeight {
    return { height: isSet(object.height) ? String(object.height) : "0" };
  },

  toJSON(message: LatestBlockHeight): unknown {
    const obj: any = {};
    message.height !== undefined && (obj.height = message.height);
    return obj;
  },

  create(base?: DeepPartial<LatestBlockHeight>): LatestBlockHeight {
    return LatestBlockHeight.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<LatestBlockHeight>): LatestBlockHeight {
    const message = createBaseLatestBlockHeight();
    message.height = object.height ?? "0";
    return message;
  },
};

function createBaseGetBlockEventsRPCRequest(): GetBlockEventsRPCRequest {
  return { backend: "", height: 0 };
}

export const GetBlockEventsRPCRequest = {
  encode(message: GetBlockEventsRPCRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.backend !== "") {
      writer.uint32(10).string(message.backend);
    }
    if (message.height !== 0) {
      writer.uint32(16).sint32(message.height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetBlockEventsRPCRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBlockEventsRPCRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.backend = reader.string();
          break;
        case 2:
          message.height = reader.sint32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetBlockEventsRPCRequest {
    return {
      backend: isSet(object.backend) ? String(object.backend) : "",
      height: isSet(object.height) ? Number(object.height) : 0,
    };
  },

  toJSON(message: GetBlockEventsRPCRequest): unknown {
    const obj: any = {};
    message.backend !== undefined && (obj.backend = message.backend);
    message.height !== undefined && (obj.height = Math.round(message.height));
    return obj;
  },

  create(base?: DeepPartial<GetBlockEventsRPCRequest>): GetBlockEventsRPCRequest {
    return GetBlockEventsRPCRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GetBlockEventsRPCRequest>): GetBlockEventsRPCRequest {
    const message = createBaseGetBlockEventsRPCRequest();
    message.backend = object.backend ?? "";
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseGetBlockEventsRPCResponse(): GetBlockEventsRPCResponse {
  return { s: "", errmsg: "", data: undefined };
}

export const GetBlockEventsRPCResponse = {
  encode(message: GetBlockEventsRPCResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.s !== "") {
      writer.uint32(10).string(message.s);
    }
    if (message.errmsg !== "") {
      writer.uint32(18).string(message.errmsg);
    }
    if (message.data !== undefined) {
      BlockEventsRPC.encode(message.data, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetBlockEventsRPCResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBlockEventsRPCResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.s = reader.string();
          break;
        case 2:
          message.errmsg = reader.string();
          break;
        case 3:
          message.data = BlockEventsRPC.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetBlockEventsRPCResponse {
    return {
      s: isSet(object.s) ? String(object.s) : "",
      errmsg: isSet(object.errmsg) ? String(object.errmsg) : "",
      data: isSet(object.data) ? BlockEventsRPC.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: GetBlockEventsRPCResponse): unknown {
    const obj: any = {};
    message.s !== undefined && (obj.s = message.s);
    message.errmsg !== undefined && (obj.errmsg = message.errmsg);
    message.data !== undefined && (obj.data = message.data ? BlockEventsRPC.toJSON(message.data) : undefined);
    return obj;
  },

  create(base?: DeepPartial<GetBlockEventsRPCResponse>): GetBlockEventsRPCResponse {
    return GetBlockEventsRPCResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GetBlockEventsRPCResponse>): GetBlockEventsRPCResponse {
    const message = createBaseGetBlockEventsRPCResponse();
    message.s = object.s ?? "";
    message.errmsg = object.errmsg ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? BlockEventsRPC.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseBlockEventsRPC(): BlockEventsRPC {
  return { types: [], events: [] };
}

export const BlockEventsRPC = {
  encode(message: BlockEventsRPC, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.types) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.events) {
      writer.uint32(18).bytes(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BlockEventsRPC {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockEventsRPC();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.types.push(reader.string());
          break;
        case 2:
          message.events.push(reader.bytes());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): BlockEventsRPC {
    return {
      types: Array.isArray(object?.types) ? object.types.map((e: any) => String(e)) : [],
      events: Array.isArray(object?.events) ? object.events.map((e: any) => bytesFromBase64(e)) : [],
    };
  },

  toJSON(message: BlockEventsRPC): unknown {
    const obj: any = {};
    if (message.types) {
      obj.types = message.types.map((e) => e);
    } else {
      obj.types = [];
    }
    if (message.events) {
      obj.events = message.events.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));
    } else {
      obj.events = [];
    }
    return obj;
  },

  create(base?: DeepPartial<BlockEventsRPC>): BlockEventsRPC {
    return BlockEventsRPC.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<BlockEventsRPC>): BlockEventsRPC {
    const message = createBaseBlockEventsRPC();
    message.types = object.types?.map((e) => e) || [];
    message.events = object.events?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetCustomEventsRPCRequest(): GetCustomEventsRPCRequest {
  return { backend: "", height: 0, events: "" };
}

export const GetCustomEventsRPCRequest = {
  encode(message: GetCustomEventsRPCRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.backend !== "") {
      writer.uint32(10).string(message.backend);
    }
    if (message.height !== 0) {
      writer.uint32(16).sint32(message.height);
    }
    if (message.events !== "") {
      writer.uint32(26).string(message.events);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomEventsRPCRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomEventsRPCRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.backend = reader.string();
          break;
        case 2:
          message.height = reader.sint32();
          break;
        case 3:
          message.events = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetCustomEventsRPCRequest {
    return {
      backend: isSet(object.backend) ? String(object.backend) : "",
      height: isSet(object.height) ? Number(object.height) : 0,
      events: isSet(object.events) ? String(object.events) : "",
    };
  },

  toJSON(message: GetCustomEventsRPCRequest): unknown {
    const obj: any = {};
    message.backend !== undefined && (obj.backend = message.backend);
    message.height !== undefined && (obj.height = Math.round(message.height));
    message.events !== undefined && (obj.events = message.events);
    return obj;
  },

  create(base?: DeepPartial<GetCustomEventsRPCRequest>): GetCustomEventsRPCRequest {
    return GetCustomEventsRPCRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GetCustomEventsRPCRequest>): GetCustomEventsRPCRequest {
    const message = createBaseGetCustomEventsRPCRequest();
    message.backend = object.backend ?? "";
    message.height = object.height ?? 0;
    message.events = object.events ?? "";
    return message;
  },
};

function createBaseGetCustomEventsRPCResponse(): GetCustomEventsRPCResponse {
  return { s: "", errmsg: "", data: undefined };
}

export const GetCustomEventsRPCResponse = {
  encode(message: GetCustomEventsRPCResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.s !== "") {
      writer.uint32(10).string(message.s);
    }
    if (message.errmsg !== "") {
      writer.uint32(18).string(message.errmsg);
    }
    if (message.data !== undefined) {
      BlockEventsRPC.encode(message.data, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomEventsRPCResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomEventsRPCResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.s = reader.string();
          break;
        case 2:
          message.errmsg = reader.string();
          break;
        case 3:
          message.data = BlockEventsRPC.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetCustomEventsRPCResponse {
    return {
      s: isSet(object.s) ? String(object.s) : "",
      errmsg: isSet(object.errmsg) ? String(object.errmsg) : "",
      data: isSet(object.data) ? BlockEventsRPC.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: GetCustomEventsRPCResponse): unknown {
    const obj: any = {};
    message.s !== undefined && (obj.s = message.s);
    message.errmsg !== undefined && (obj.errmsg = message.errmsg);
    message.data !== undefined && (obj.data = message.data ? BlockEventsRPC.toJSON(message.data) : undefined);
    return obj;
  },

  create(base?: DeepPartial<GetCustomEventsRPCResponse>): GetCustomEventsRPCResponse {
    return GetCustomEventsRPCResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<GetCustomEventsRPCResponse>): GetCustomEventsRPCResponse {
    const message = createBaseGetCustomEventsRPCResponse();
    message.s = object.s ?? "";
    message.errmsg = object.errmsg ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? BlockEventsRPC.fromPartial(object.data)
      : undefined;
    return message;
  },
};

/** EventProviderAPI provides processed block events for different backends. */
export interface EventProviderAPI {
  /** Get latest block from event provider */
  GetLatestHeight(
    request: DeepPartial<GetLatestHeightRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLatestHeightResponse>;
  /** Get processed block events for selected backend */
  GetBlockEventsRPC(
    request: DeepPartial<GetBlockEventsRPCRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetBlockEventsRPCResponse>;
  /** Get custom processed block events for selected backend */
  GetCustomEventsRPC(
    request: DeepPartial<GetCustomEventsRPCRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomEventsRPCResponse>;
}

export class EventProviderAPIClientImpl implements EventProviderAPI {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.GetLatestHeight = this.GetLatestHeight.bind(this);
    this.GetBlockEventsRPC = this.GetBlockEventsRPC.bind(this);
    this.GetCustomEventsRPC = this.GetCustomEventsRPC.bind(this);
  }

  GetLatestHeight(
    request: DeepPartial<GetLatestHeightRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetLatestHeightResponse> {
    return this.rpc.unary(EventProviderAPIGetLatestHeightDesc, GetLatestHeightRequest.fromPartial(request), metadata);
  }

  GetBlockEventsRPC(
    request: DeepPartial<GetBlockEventsRPCRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetBlockEventsRPCResponse> {
    return this.rpc.unary(
      EventProviderAPIGetBlockEventsRPCDesc,
      GetBlockEventsRPCRequest.fromPartial(request),
      metadata,
    );
  }

  GetCustomEventsRPC(
    request: DeepPartial<GetCustomEventsRPCRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCustomEventsRPCResponse> {
    return this.rpc.unary(
      EventProviderAPIGetCustomEventsRPCDesc,
      GetCustomEventsRPCRequest.fromPartial(request),
      metadata,
    );
  }
}

export const EventProviderAPIDesc = { serviceName: "event_provider_api.EventProviderAPI" };

export const EventProviderAPIGetLatestHeightDesc: UnaryMethodDefinitionish = {
  methodName: "GetLatestHeight",
  service: EventProviderAPIDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetLatestHeightRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetLatestHeightResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const EventProviderAPIGetBlockEventsRPCDesc: UnaryMethodDefinitionish = {
  methodName: "GetBlockEventsRPC",
  service: EventProviderAPIDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetBlockEventsRPCRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetBlockEventsRPCResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const EventProviderAPIGetCustomEventsRPCDesc: UnaryMethodDefinitionish = {
  methodName: "GetCustomEventsRPC",
  service: EventProviderAPIDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCustomEventsRPCRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCustomEventsRPCResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata || this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if (tsProtoGlobalThis.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if (tsProtoGlobalThis.Buffer) {
    return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends tsProtoGlobalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
