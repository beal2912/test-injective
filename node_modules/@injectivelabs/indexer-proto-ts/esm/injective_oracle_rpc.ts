/* eslint-disable */
import { grpc } from "@injectivelabs/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Observable } from "rxjs";
import { share } from "rxjs/operators";

export const protobufPackage = "injective_oracle_rpc";

export interface OracleListRequest {
}

export interface OracleListResponse {
  oracles: Oracle[];
}

export interface Oracle {
  /** The symbol of the oracle asset. */
  symbol: string;
  /** Oracle base currency */
  baseSymbol: string;
  /** Oracle quote currency */
  quoteSymbol: string;
  /** Oracle Type */
  oracleType: string;
  /** The price of the oracle asset */
  price: string;
}

export interface PriceRequest {
  /** Oracle base currency */
  baseSymbol: string;
  /** Oracle quote currency */
  quoteSymbol: string;
  /** Oracle Type */
  oracleType: string;
  /** OracleScaleFactor */
  oracleScaleFactor: number;
}

export interface PriceResponse {
  /** The price of the oracle asset */
  price: string;
}

export interface StreamPricesRequest {
  /** Oracle base currency */
  baseSymbol: string;
  /** Oracle quote currency */
  quoteSymbol: string;
  /** Oracle Type */
  oracleType: string;
}

export interface StreamPricesResponse {
  /** The price of the oracle asset */
  price: string;
  /** Operation timestamp in UNIX millis. */
  timestamp: string;
}

export interface StreamPricesByMarketsRequest {
  /** marketIDs to stream price for, empty to listen for all prices */
  marketIds: string[];
}

export interface StreamPricesByMarketsResponse {
  /** The price of the oracle asset */
  price: string;
  /** Operation timestamp in UNIX millis. */
  timestamp: string;
  /** marketID that the price has been updated */
  marketId: string;
}

function createBaseOracleListRequest(): OracleListRequest {
  return {};
}

export const OracleListRequest = {
  encode(_: OracleListRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OracleListRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOracleListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): OracleListRequest {
    return {};
  },

  toJSON(_: OracleListRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<OracleListRequest>): OracleListRequest {
    return OracleListRequest.fromPartial(base ?? {});
  },

  fromPartial(_: DeepPartial<OracleListRequest>): OracleListRequest {
    const message = createBaseOracleListRequest();
    return message;
  },
};

function createBaseOracleListResponse(): OracleListResponse {
  return { oracles: [] };
}

export const OracleListResponse = {
  encode(message: OracleListResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.oracles) {
      Oracle.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OracleListResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOracleListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.oracles.push(Oracle.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): OracleListResponse {
    return { oracles: Array.isArray(object?.oracles) ? object.oracles.map((e: any) => Oracle.fromJSON(e)) : [] };
  },

  toJSON(message: OracleListResponse): unknown {
    const obj: any = {};
    if (message.oracles) {
      obj.oracles = message.oracles.map((e) => e ? Oracle.toJSON(e) : undefined);
    } else {
      obj.oracles = [];
    }
    return obj;
  },

  create(base?: DeepPartial<OracleListResponse>): OracleListResponse {
    return OracleListResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<OracleListResponse>): OracleListResponse {
    const message = createBaseOracleListResponse();
    message.oracles = object.oracles?.map((e) => Oracle.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOracle(): Oracle {
  return { symbol: "", baseSymbol: "", quoteSymbol: "", oracleType: "", price: "" };
}

export const Oracle = {
  encode(message: Oracle, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.symbol !== "") {
      writer.uint32(10).string(message.symbol);
    }
    if (message.baseSymbol !== "") {
      writer.uint32(18).string(message.baseSymbol);
    }
    if (message.quoteSymbol !== "") {
      writer.uint32(26).string(message.quoteSymbol);
    }
    if (message.oracleType !== "") {
      writer.uint32(34).string(message.oracleType);
    }
    if (message.price !== "") {
      writer.uint32(42).string(message.price);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Oracle {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOracle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.symbol = reader.string();
          break;
        case 2:
          message.baseSymbol = reader.string();
          break;
        case 3:
          message.quoteSymbol = reader.string();
          break;
        case 4:
          message.oracleType = reader.string();
          break;
        case 5:
          message.price = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Oracle {
    return {
      symbol: isSet(object.symbol) ? String(object.symbol) : "",
      baseSymbol: isSet(object.baseSymbol) ? String(object.baseSymbol) : "",
      quoteSymbol: isSet(object.quoteSymbol) ? String(object.quoteSymbol) : "",
      oracleType: isSet(object.oracleType) ? String(object.oracleType) : "",
      price: isSet(object.price) ? String(object.price) : "",
    };
  },

  toJSON(message: Oracle): unknown {
    const obj: any = {};
    message.symbol !== undefined && (obj.symbol = message.symbol);
    message.baseSymbol !== undefined && (obj.baseSymbol = message.baseSymbol);
    message.quoteSymbol !== undefined && (obj.quoteSymbol = message.quoteSymbol);
    message.oracleType !== undefined && (obj.oracleType = message.oracleType);
    message.price !== undefined && (obj.price = message.price);
    return obj;
  },

  create(base?: DeepPartial<Oracle>): Oracle {
    return Oracle.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<Oracle>): Oracle {
    const message = createBaseOracle();
    message.symbol = object.symbol ?? "";
    message.baseSymbol = object.baseSymbol ?? "";
    message.quoteSymbol = object.quoteSymbol ?? "";
    message.oracleType = object.oracleType ?? "";
    message.price = object.price ?? "";
    return message;
  },
};

function createBasePriceRequest(): PriceRequest {
  return { baseSymbol: "", quoteSymbol: "", oracleType: "", oracleScaleFactor: 0 };
}

export const PriceRequest = {
  encode(message: PriceRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.baseSymbol !== "") {
      writer.uint32(10).string(message.baseSymbol);
    }
    if (message.quoteSymbol !== "") {
      writer.uint32(18).string(message.quoteSymbol);
    }
    if (message.oracleType !== "") {
      writer.uint32(26).string(message.oracleType);
    }
    if (message.oracleScaleFactor !== 0) {
      writer.uint32(32).uint32(message.oracleScaleFactor);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PriceRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.baseSymbol = reader.string();
          break;
        case 2:
          message.quoteSymbol = reader.string();
          break;
        case 3:
          message.oracleType = reader.string();
          break;
        case 4:
          message.oracleScaleFactor = reader.uint32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): PriceRequest {
    return {
      baseSymbol: isSet(object.baseSymbol) ? String(object.baseSymbol) : "",
      quoteSymbol: isSet(object.quoteSymbol) ? String(object.quoteSymbol) : "",
      oracleType: isSet(object.oracleType) ? String(object.oracleType) : "",
      oracleScaleFactor: isSet(object.oracleScaleFactor) ? Number(object.oracleScaleFactor) : 0,
    };
  },

  toJSON(message: PriceRequest): unknown {
    const obj: any = {};
    message.baseSymbol !== undefined && (obj.baseSymbol = message.baseSymbol);
    message.quoteSymbol !== undefined && (obj.quoteSymbol = message.quoteSymbol);
    message.oracleType !== undefined && (obj.oracleType = message.oracleType);
    message.oracleScaleFactor !== undefined && (obj.oracleScaleFactor = Math.round(message.oracleScaleFactor));
    return obj;
  },

  create(base?: DeepPartial<PriceRequest>): PriceRequest {
    return PriceRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<PriceRequest>): PriceRequest {
    const message = createBasePriceRequest();
    message.baseSymbol = object.baseSymbol ?? "";
    message.quoteSymbol = object.quoteSymbol ?? "";
    message.oracleType = object.oracleType ?? "";
    message.oracleScaleFactor = object.oracleScaleFactor ?? 0;
    return message;
  },
};

function createBasePriceResponse(): PriceResponse {
  return { price: "" };
}

export const PriceResponse = {
  encode(message: PriceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.price !== "") {
      writer.uint32(10).string(message.price);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PriceResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.price = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): PriceResponse {
    return { price: isSet(object.price) ? String(object.price) : "" };
  },

  toJSON(message: PriceResponse): unknown {
    const obj: any = {};
    message.price !== undefined && (obj.price = message.price);
    return obj;
  },

  create(base?: DeepPartial<PriceResponse>): PriceResponse {
    return PriceResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<PriceResponse>): PriceResponse {
    const message = createBasePriceResponse();
    message.price = object.price ?? "";
    return message;
  },
};

function createBaseStreamPricesRequest(): StreamPricesRequest {
  return { baseSymbol: "", quoteSymbol: "", oracleType: "" };
}

export const StreamPricesRequest = {
  encode(message: StreamPricesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.baseSymbol !== "") {
      writer.uint32(10).string(message.baseSymbol);
    }
    if (message.quoteSymbol !== "") {
      writer.uint32(18).string(message.quoteSymbol);
    }
    if (message.oracleType !== "") {
      writer.uint32(26).string(message.oracleType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamPricesRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamPricesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.baseSymbol = reader.string();
          break;
        case 2:
          message.quoteSymbol = reader.string();
          break;
        case 3:
          message.oracleType = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): StreamPricesRequest {
    return {
      baseSymbol: isSet(object.baseSymbol) ? String(object.baseSymbol) : "",
      quoteSymbol: isSet(object.quoteSymbol) ? String(object.quoteSymbol) : "",
      oracleType: isSet(object.oracleType) ? String(object.oracleType) : "",
    };
  },

  toJSON(message: StreamPricesRequest): unknown {
    const obj: any = {};
    message.baseSymbol !== undefined && (obj.baseSymbol = message.baseSymbol);
    message.quoteSymbol !== undefined && (obj.quoteSymbol = message.quoteSymbol);
    message.oracleType !== undefined && (obj.oracleType = message.oracleType);
    return obj;
  },

  create(base?: DeepPartial<StreamPricesRequest>): StreamPricesRequest {
    return StreamPricesRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<StreamPricesRequest>): StreamPricesRequest {
    const message = createBaseStreamPricesRequest();
    message.baseSymbol = object.baseSymbol ?? "";
    message.quoteSymbol = object.quoteSymbol ?? "";
    message.oracleType = object.oracleType ?? "";
    return message;
  },
};

function createBaseStreamPricesResponse(): StreamPricesResponse {
  return { price: "", timestamp: "0" };
}

export const StreamPricesResponse = {
  encode(message: StreamPricesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.price !== "") {
      writer.uint32(10).string(message.price);
    }
    if (message.timestamp !== "0") {
      writer.uint32(16).sint64(message.timestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamPricesResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamPricesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.price = reader.string();
          break;
        case 2:
          message.timestamp = longToString(reader.sint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): StreamPricesResponse {
    return {
      price: isSet(object.price) ? String(object.price) : "",
      timestamp: isSet(object.timestamp) ? String(object.timestamp) : "0",
    };
  },

  toJSON(message: StreamPricesResponse): unknown {
    const obj: any = {};
    message.price !== undefined && (obj.price = message.price);
    message.timestamp !== undefined && (obj.timestamp = message.timestamp);
    return obj;
  },

  create(base?: DeepPartial<StreamPricesResponse>): StreamPricesResponse {
    return StreamPricesResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<StreamPricesResponse>): StreamPricesResponse {
    const message = createBaseStreamPricesResponse();
    message.price = object.price ?? "";
    message.timestamp = object.timestamp ?? "0";
    return message;
  },
};

function createBaseStreamPricesByMarketsRequest(): StreamPricesByMarketsRequest {
  return { marketIds: [] };
}

export const StreamPricesByMarketsRequest = {
  encode(message: StreamPricesByMarketsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.marketIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamPricesByMarketsRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamPricesByMarketsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.marketIds.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): StreamPricesByMarketsRequest {
    return { marketIds: Array.isArray(object?.marketIds) ? object.marketIds.map((e: any) => String(e)) : [] };
  },

  toJSON(message: StreamPricesByMarketsRequest): unknown {
    const obj: any = {};
    if (message.marketIds) {
      obj.marketIds = message.marketIds.map((e) => e);
    } else {
      obj.marketIds = [];
    }
    return obj;
  },

  create(base?: DeepPartial<StreamPricesByMarketsRequest>): StreamPricesByMarketsRequest {
    return StreamPricesByMarketsRequest.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<StreamPricesByMarketsRequest>): StreamPricesByMarketsRequest {
    const message = createBaseStreamPricesByMarketsRequest();
    message.marketIds = object.marketIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseStreamPricesByMarketsResponse(): StreamPricesByMarketsResponse {
  return { price: "", timestamp: "0", marketId: "" };
}

export const StreamPricesByMarketsResponse = {
  encode(message: StreamPricesByMarketsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.price !== "") {
      writer.uint32(10).string(message.price);
    }
    if (message.timestamp !== "0") {
      writer.uint32(16).sint64(message.timestamp);
    }
    if (message.marketId !== "") {
      writer.uint32(26).string(message.marketId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StreamPricesByMarketsResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamPricesByMarketsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.price = reader.string();
          break;
        case 2:
          message.timestamp = longToString(reader.sint64() as Long);
          break;
        case 3:
          message.marketId = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): StreamPricesByMarketsResponse {
    return {
      price: isSet(object.price) ? String(object.price) : "",
      timestamp: isSet(object.timestamp) ? String(object.timestamp) : "0",
      marketId: isSet(object.marketId) ? String(object.marketId) : "",
    };
  },

  toJSON(message: StreamPricesByMarketsResponse): unknown {
    const obj: any = {};
    message.price !== undefined && (obj.price = message.price);
    message.timestamp !== undefined && (obj.timestamp = message.timestamp);
    message.marketId !== undefined && (obj.marketId = message.marketId);
    return obj;
  },

  create(base?: DeepPartial<StreamPricesByMarketsResponse>): StreamPricesByMarketsResponse {
    return StreamPricesByMarketsResponse.fromPartial(base ?? {});
  },

  fromPartial(object: DeepPartial<StreamPricesByMarketsResponse>): StreamPricesByMarketsResponse {
    const message = createBaseStreamPricesByMarketsResponse();
    message.price = object.price ?? "";
    message.timestamp = object.timestamp ?? "0";
    message.marketId = object.marketId ?? "";
    return message;
  },
};

/** InjectiveOracleRPC defines gRPC API of Exchange Oracle provider. */
export interface InjectiveOracleRPC {
  /** List all oracles */
  OracleList(request: DeepPartial<OracleListRequest>, metadata?: grpc.Metadata): Promise<OracleListResponse>;
  /** Gets the price of the oracle */
  Price(request: DeepPartial<PriceRequest>, metadata?: grpc.Metadata): Promise<PriceResponse>;
  /**
   * StreamPrices streams new price changes for a specified oracle. If no oracles
   * are provided, all price changes are streamed.
   */
  StreamPrices(request: DeepPartial<StreamPricesRequest>, metadata?: grpc.Metadata): Observable<StreamPricesResponse>;
  /** StreamPrices streams new price changes markets */
  StreamPricesByMarkets(
    request: DeepPartial<StreamPricesByMarketsRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamPricesByMarketsResponse>;
}

export class InjectiveOracleRPCClientImpl implements InjectiveOracleRPC {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.OracleList = this.OracleList.bind(this);
    this.Price = this.Price.bind(this);
    this.StreamPrices = this.StreamPrices.bind(this);
    this.StreamPricesByMarkets = this.StreamPricesByMarkets.bind(this);
  }

  OracleList(request: DeepPartial<OracleListRequest>, metadata?: grpc.Metadata): Promise<OracleListResponse> {
    return this.rpc.unary(InjectiveOracleRPCOracleListDesc, OracleListRequest.fromPartial(request), metadata);
  }

  Price(request: DeepPartial<PriceRequest>, metadata?: grpc.Metadata): Promise<PriceResponse> {
    return this.rpc.unary(InjectiveOracleRPCPriceDesc, PriceRequest.fromPartial(request), metadata);
  }

  StreamPrices(request: DeepPartial<StreamPricesRequest>, metadata?: grpc.Metadata): Observable<StreamPricesResponse> {
    return this.rpc.invoke(InjectiveOracleRPCStreamPricesDesc, StreamPricesRequest.fromPartial(request), metadata);
  }

  StreamPricesByMarkets(
    request: DeepPartial<StreamPricesByMarketsRequest>,
    metadata?: grpc.Metadata,
  ): Observable<StreamPricesByMarketsResponse> {
    return this.rpc.invoke(
      InjectiveOracleRPCStreamPricesByMarketsDesc,
      StreamPricesByMarketsRequest.fromPartial(request),
      metadata,
    );
  }
}

export const InjectiveOracleRPCDesc = { serviceName: "injective_oracle_rpc.InjectiveOracleRPC" };

export const InjectiveOracleRPCOracleListDesc: UnaryMethodDefinitionish = {
  methodName: "OracleList",
  service: InjectiveOracleRPCDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return OracleListRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = OracleListResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const InjectiveOracleRPCPriceDesc: UnaryMethodDefinitionish = {
  methodName: "Price",
  service: InjectiveOracleRPCDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return PriceRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = PriceResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const InjectiveOracleRPCStreamPricesDesc: UnaryMethodDefinitionish = {
  methodName: "StreamPrices",
  service: InjectiveOracleRPCDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamPricesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamPricesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const InjectiveOracleRPCStreamPricesByMarketsDesc: UnaryMethodDefinitionish = {
  methodName: "StreamPricesByMarkets",
  service: InjectiveOracleRPCDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamPricesByMarketsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamPricesByMarketsResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;
    streamingTransport?: grpc.TransportFactory;
    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;
      streamingTransport?: grpc.TransportFactory;
      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata || this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }

  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any> {
    const upStreamCodes = this.options.upStreamRetryCodes || [];
    const DEFAULT_TIMEOUT_TIME: number = 3_000;
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata || this.options.metadata;
    return new Observable((observer) => {
      const upStream = (() => {
        const client = grpc.invoke(methodDesc, {
          host: this.host,
          request,
          transport: this.options.streamingTransport || this.options.transport,
          metadata: maybeCombinedMetadata,
          debug: this.options.debug,
          onMessage: (next) => observer.next(next),
          onEnd: (code: grpc.Code, message: string, trailers: grpc.Metadata) => {
            if (code === 0) {
              observer.complete();
            } else if (upStreamCodes.includes(code)) {
              setTimeout(upStream, DEFAULT_TIMEOUT_TIME);
            } else {
              const err = new Error(message) as any;
              err.code = code;
              err.metadata = trailers;
              observer.error(err);
            }
          },
        });
        observer.add(() => client.close());
      });
      upStream();
    }).pipe(share());
  }
}

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends tsProtoGlobalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
