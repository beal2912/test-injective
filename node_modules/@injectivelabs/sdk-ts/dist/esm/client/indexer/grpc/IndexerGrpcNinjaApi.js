import { GetVaultsRequest, GetVaultRequest, LPTokenPriceChartRequest, TVLChartRequest, VaultsByHolderAddressRequest, LPHoldersRequest, PortfolioRequest, LeaderboardRequest, } from '@injectivelabs/ninja-api/goadesign_goagen_ninja_api_pb';
import { NinjaAPI } from '@injectivelabs/ninja-api/goadesign_goagen_ninja_api_pb_service';
import BaseConsumer from '../../BaseGrpcConsumer';
import { IndexerGrpcNinjaTransformer } from '../transformers';
import { IndexerModule } from '../types';
import { GrpcUnaryRequestException, UnspecifiedErrorCode, } from '@injectivelabs/exceptions';
import { InjectiveMetaRpc } from '@injectivelabs/indexer-proto-ts';
/**
 * @category Indexer Grpc API
 */
export class IndexerGrpcNinjaApi extends BaseConsumer {
    module = IndexerModule.Ninja;
    async fetchVault({ contractAddress, slug, }) {
        const request = new GetVaultRequest();
        if (contractAddress) {
            request.setContractAddress(contractAddress);
        }
        if (slug) {
            request.setSlug(slug);
        }
        try {
            const response = await this.request(request, NinjaAPI.GetVault);
            return response
                .getVaultList()
                .map(IndexerGrpcNinjaTransformer.grpcVaultToVault);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchVaults({ pageSize, pageIndex, codeId, }) {
        const request = new GetVaultsRequest();
        if (pageSize) {
            request.setPageSize(pageSize);
        }
        if (pageIndex) {
            request.setPageIndex(pageIndex);
        }
        if (codeId) {
            request.setCodeId(codeId);
        }
        try {
            const response = await this.request(request, NinjaAPI.GetVaults);
            const vaultsList = response.getVaultsList();
            const pagination = response.getPagination();
            return {
                vaults: vaultsList.map(IndexerGrpcNinjaTransformer.grpcVaultToVault),
                pagination: IndexerGrpcNinjaTransformer.grpcPaginationToPagination(pagination),
            };
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchLpTokenPriceChart({ vaultAddress, from, to, }) {
        const request = new LPTokenPriceChartRequest();
        request.setVaultAddress(vaultAddress);
        if (from) {
            request.setFromTime(from);
        }
        if (to) {
            request.setToTime(to);
        }
        try {
            const response = await this.request(request, NinjaAPI.LPTokenPriceChart);
            return response
                .getPricesList()
                .map(IndexerGrpcNinjaTransformer.grpcPriceSnapShotToPriceSnapShot);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchTVLChartRequest({ vaultAddress, from, to, }) {
        const request = new TVLChartRequest();
        request.setVaultAddress(vaultAddress);
        if (from) {
            request.setFromTime(from);
        }
        if (to) {
            request.setToTime(to);
        }
        try {
            const response = await this.request(request, NinjaAPI.TVLChart);
            return response
                .getPricesList()
                .map(IndexerGrpcNinjaTransformer.grpcPriceSnapShotToPriceSnapShot);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchVaultsByHolderAddress({ pageSize, pageIndex, holderAddress, vaultAddress, }) {
        const request = new VaultsByHolderAddressRequest();
        request.setHolderAddress(holderAddress);
        if (vaultAddress) {
            request.setVaultAddress(vaultAddress);
        }
        if (pageSize) {
            request.setPageSize(pageSize);
        }
        if (pageIndex) {
            request.setPageIndex(pageIndex);
        }
        try {
            const response = await this.request(request, NinjaAPI.VaultsByHolderAddress);
            return response
                .getSubscriptionsList()
                .map(IndexerGrpcNinjaTransformer.grpcSubscriptionToSubscription);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchLPHolders({ pageSize, pageIndex, vaultAddress, }) {
        const request = new LPHoldersRequest();
        request.setVaultAddress(vaultAddress);
        if (pageSize) {
            request.setPageSize(pageSize);
        }
        if (pageIndex) {
            request.setPageIndex(pageIndex);
        }
        try {
            const response = await this.request(request, NinjaAPI.LPHolders);
            return response
                .getHoldersList()
                .map(IndexerGrpcNinjaTransformer.grpcHoldersToHolders);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchHolderPortfolio(holderAddress) {
        const request = new PortfolioRequest();
        request.setHolderAddress(holderAddress);
        try {
            const response = await this.request(request, NinjaAPI.Portfolio);
            return IndexerGrpcNinjaTransformer.grpcPortfolioToPortfolio(response);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
    async fetchLeaderboard() {
        const request = new LeaderboardRequest();
        try {
            const response = await this.request(request, NinjaAPI.Leaderboard);
            return IndexerGrpcNinjaTransformer.grpcLeaderboardToLeaderboard(response);
        }
        catch (e) {
            if (e instanceof InjectiveMetaRpc.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                contextModule: this.module,
            });
        }
    }
}
//# sourceMappingURL=IndexerGrpcNinjaApi.js.map