"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupernovaQueryTransformer = void 0;
const utils_1 = require("../../../utils");
/**
 * @hidden
 */
const formatToString = (value) => value ? value.toString() : '';
class SupernovaQueryTransformer {
    static contractMarketingInfoResponseToContractMarketingInfo(response) {
        const data = (0, utils_1.fromBase64)(response.data);
        return {
            project: data.project,
            description: data.description,
            logo: data.logo,
            marketing: data.marketing,
        };
    }
    static contractTokenInfoResponseToContractTokenInfo(response) {
        const data = (0, utils_1.fromBase64)(response.data);
        return {
            name: data.name,
            symbol: data.symbol,
            decimals: data.decimals,
            totalSupply: data.total_supply,
        };
    }
    static masterContractConfigResponseToMasterContractConfig(response) {
        const data = (0, utils_1.fromBase64)(response.data);
        return {
            distributionContract: data.distribution_contract,
            ninjaToken: data.ninja_token,
            owner: data.owner,
        };
    }
    static vaultContractBaseConfigResponseToBaseConfig(config) {
        return {
            owner: formatToString(config.owner),
            marketId: formatToString(config.market_id),
            subaccountId: formatToString(config.subaccount_id),
            feeRecipient: formatToString(config.fee_recipient),
            orderDensity: formatToString(config.order_density),
            reservationPriceSensitivityRatio: formatToString(config.reservation_price_sensitivity_ratio),
            reservationSpreadSensitivityRatio: formatToString(config.reservation_spread_sensitivity_ratio),
            maxActiveCapitalUtilizationRatio: formatToString(config.max_active_capital_utilization_ratio),
            headChangeToleranceRatio: formatToString(config.head_change_tolerance_ratio),
            minHeadToTailDeviationRatio: formatToString(config.min_head_to_tail_deviation_ratio),
            signedMinHeadToFairPriceDeviationRatio: formatToString(config.signed_min_head_to_fair_price_deviation_ratio),
            signedMinHeadToTobDeviationRatio: formatToString(config.signed_min_head_to_tob_deviation_ratio),
            tradeVolatilityGroupSec: formatToString(config.trade_volatility_group_sec),
            defaultMidPriceVolatilityRatio: formatToString(config.default_mid_price_volatility_ratio),
            minTradeVolatilitySampleSize: formatToString(config.min_trade_volatility_sample_size),
            minVolatilityRatio: formatToString(config.min_volatility_ratio),
            masterAddress: formatToString(config.master_address),
            redemptionLockTime: formatToString(config.redemption_lock_time),
        };
    }
    static vaultContractConfigResponseToDerivativeVaultConfig(response) {
        const { config } = (0, utils_1.fromBase64)(response.data);
        return Object.assign(Object.assign({}, SupernovaQueryTransformer.vaultContractBaseConfigResponseToBaseConfig(config.base_config)), { leverage: formatToString(config.leverage), minProximityToLiquidation: formatToString(config.min_proximity_to_liquidation), postReductionPercOfMaxPosition: formatToString(config.post_reduction_perc_of_max_position), oracleVolatilityGroupSec: formatToString(config.oracle_volatility_group_sec), minOracleVolatilitySampleSize: formatToString(config.min_oracle_volatility_sample_size), emergencyOracleVolatilitySampleSize: formatToString(config.emergency_oracle_volatility_sample_size), lastValidMarkPrice: formatToString(config.last_valid_mark_price), allowedSubscriptionTypes: formatToString(config.allowed_subscription_types), allowedRedemptionTypes: formatToString(config.allowed_redemption_types) });
    }
    static vaultContractConfigResponseToSpotVaultContractConfig(response) {
        const { config } = (0, utils_1.fromBase64)(response.data);
        return Object.assign(Object.assign({}, SupernovaQueryTransformer.vaultContractBaseConfigResponseToBaseConfig(config.base_config)), { oracleType: formatToString(config.oracle_type), fairPriceTailDeviationRatio: formatToString(config.fair_price_tail_deviation_ratio), targetBaseWeight: formatToString(config.target_base_weight), allowedSubscriptionTypes: formatToString(config.allowed_subscription_types), allowedRedemptionTypes: formatToString(config.allowed_redemption_types), imbalanceAdjustmentExponent: formatToString(config.imbalance_adjustment_exponent), rewardDiminishingFactor: formatToString(config.reward_diminishing_factor), baseDecimals: formatToString(config.base_decimals), quoteDecimals: formatToString(config.quote_decimals) });
    }
    static vaultUserLpAllowanceResponseToVaultUserLpAllowance(response) {
        const data = (0, utils_1.fromBase64)(response.data);
        return {
            allowance: data.allowance,
        };
    }
    static vaultMarketIdResponseToVaultMarketId(response) {
        const data = (0, utils_1.fromBase64)(response.data);
        return { marketId: data.market_id };
    }
    static vaultTotalLpSupplyResponseToVaultTotalLpSupply(response) {
        const data = (0, utils_1.fromBase64)(response.data);
        return { totalSupply: data.total_supply };
    }
    static vaultUserLpBalanceResponseToVaultUserLpBalance(response) {
        const data = (0, utils_1.fromBase64)(response.data);
        return { balance: data.balance };
    }
    static vaultUserLockedLpFundsResponseToVaultUserLockedLpFunds(response) {
        const data = (0, utils_1.fromBase64)(response.data);
        return { amount: data.amount, lockTime: data.lock_time };
    }
    static registeredVaultsResponseToRegisteredVaults(response) {
        const data = (0, utils_1.fromBase64)(response.data);
        return data.registered_vaults.map((payload) => {
            var _a, _b;
            return ({
                isDerivative: payload.vault.derivative !== undefined,
                masterSubaccountId: payload.master_subaccount_id,
                vaultAddress: ((_a = payload.vault.derivative) === null || _a === void 0 ? void 0 : _a.address) || ((_b = payload.vault.spot) === null || _b === void 0 ? void 0 : _b.address),
            });
        });
    }
}
exports.SupernovaQueryTransformer = SupernovaQueryTransformer;
//# sourceMappingURL=transformer.js.map