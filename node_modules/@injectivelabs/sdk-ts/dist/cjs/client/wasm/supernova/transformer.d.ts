import { WasmContractQueryResponse, QueryVaultContractBaseConfig } from './types';
export declare class SupernovaQueryTransformer {
    static contractMarketingInfoResponseToContractMarketingInfo(response: WasmContractQueryResponse): {
        project: string;
        description: string;
        logo: string;
        marketing: string;
    };
    static contractTokenInfoResponseToContractTokenInfo(response: WasmContractQueryResponse): {
        name: string;
        symbol: string;
        decimals: number;
        totalSupply: string;
    };
    static masterContractConfigResponseToMasterContractConfig(response: WasmContractQueryResponse): {
        distributionContract: string;
        ninjaToken: string;
        owner: string;
    };
    static vaultContractBaseConfigResponseToBaseConfig(config: QueryVaultContractBaseConfig): {
        owner: string;
        marketId: string;
        subaccountId: string;
        feeRecipient: string;
        orderDensity: string;
        reservationPriceSensitivityRatio: string;
        reservationSpreadSensitivityRatio: string;
        maxActiveCapitalUtilizationRatio: string;
        headChangeToleranceRatio: string;
        minHeadToTailDeviationRatio: string;
        signedMinHeadToFairPriceDeviationRatio: string;
        signedMinHeadToTobDeviationRatio: string;
        tradeVolatilityGroupSec: string;
        defaultMidPriceVolatilityRatio: string;
        minTradeVolatilitySampleSize: string;
        minVolatilityRatio: string;
        masterAddress: string;
        redemptionLockTime: string;
    };
    static vaultContractConfigResponseToDerivativeVaultConfig(response: WasmContractQueryResponse): {
        leverage: string;
        minProximityToLiquidation: string;
        postReductionPercOfMaxPosition: string;
        oracleVolatilityGroupSec: string;
        minOracleVolatilitySampleSize: string;
        emergencyOracleVolatilitySampleSize: string;
        lastValidMarkPrice: string;
        allowedSubscriptionTypes: string;
        allowedRedemptionTypes: string;
        owner: string;
        marketId: string;
        subaccountId: string;
        feeRecipient: string;
        orderDensity: string;
        reservationPriceSensitivityRatio: string;
        reservationSpreadSensitivityRatio: string;
        maxActiveCapitalUtilizationRatio: string;
        headChangeToleranceRatio: string;
        minHeadToTailDeviationRatio: string;
        signedMinHeadToFairPriceDeviationRatio: string;
        signedMinHeadToTobDeviationRatio: string;
        tradeVolatilityGroupSec: string;
        defaultMidPriceVolatilityRatio: string;
        minTradeVolatilitySampleSize: string;
        minVolatilityRatio: string;
        masterAddress: string;
        redemptionLockTime: string;
    };
    static vaultContractConfigResponseToSpotVaultContractConfig(response: WasmContractQueryResponse): {
        oracleType: string;
        fairPriceTailDeviationRatio: string;
        targetBaseWeight: string;
        allowedSubscriptionTypes: string;
        allowedRedemptionTypes: string;
        imbalanceAdjustmentExponent: string;
        rewardDiminishingFactor: string;
        baseDecimals: string;
        quoteDecimals: string;
        owner: string;
        marketId: string;
        subaccountId: string;
        feeRecipient: string;
        orderDensity: string;
        reservationPriceSensitivityRatio: string;
        reservationSpreadSensitivityRatio: string;
        maxActiveCapitalUtilizationRatio: string;
        headChangeToleranceRatio: string;
        minHeadToTailDeviationRatio: string;
        signedMinHeadToFairPriceDeviationRatio: string;
        signedMinHeadToTobDeviationRatio: string;
        tradeVolatilityGroupSec: string;
        defaultMidPriceVolatilityRatio: string;
        minTradeVolatilitySampleSize: string;
        minVolatilityRatio: string;
        masterAddress: string;
        redemptionLockTime: string;
    };
    static vaultUserLpAllowanceResponseToVaultUserLpAllowance(response: WasmContractQueryResponse): {
        allowance: string;
    };
    static vaultMarketIdResponseToVaultMarketId(response: WasmContractQueryResponse): {
        marketId: string;
    };
    static vaultTotalLpSupplyResponseToVaultTotalLpSupply(response: WasmContractQueryResponse): {
        totalSupply: string;
    };
    static vaultUserLpBalanceResponseToVaultUserLpBalance(response: WasmContractQueryResponse): {
        balance: string;
    };
    static vaultUserLockedLpFundsResponseToVaultUserLockedLpFunds(response: WasmContractQueryResponse): {
        amount: string;
        lockTime: string;
    };
    static registeredVaultsResponseToRegisteredVaults(response: WasmContractQueryResponse): {
        isDerivative: boolean;
        masterSubaccountId: string;
        vaultAddress: string | undefined;
    }[];
}
//# sourceMappingURL=transformer.d.ts.map