"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcNinjaTransformer = void 0;
/**
 * @category Indexer Grpc Transformer
 */
class IndexerGrpcNinjaTransformer {
    static grpcPaginationToPagination(grpcPagination) {
        if (!grpcPagination) {
            return {
                total: 0,
            };
        }
        return {
            total: grpcPagination.getTotal(),
        };
    }
    static grpcDenomBalanceToDenomBalance(grpcDenomBalance) {
        return {
            denom: grpcDenomBalance.getDenom(),
            totalBalance: grpcDenomBalance.getTotalBalance(),
        };
    }
    static grpcProfitsToProfits(grpcProfits) {
        if (!grpcProfits) {
            return undefined;
        }
        return {
            allTimeChange: grpcProfits.getAllTimeChange(),
            threeMonthsChange: grpcProfits.getThreeMonthsChange(),
            oneMonthChange: grpcProfits.getOneMonthChange(),
            oneDayChange: grpcProfits.getOneDayChange(),
            oneWeekChange: grpcProfits.getOneWeekChange(),
            oneYearChange: grpcProfits.getOneYearChange(),
            threeYearsChange: grpcProfits.getThreeYearsChange(),
            sixMonthsChange: grpcProfits.getSixMonthsChange(),
        };
    }
    static grpcVaultSubaccountInfoToVaultSubaccountInfo(grpcSubaccountInfo) {
        if (!grpcSubaccountInfo) {
            return;
        }
        return {
            subaccountId: grpcSubaccountInfo.getSubaccountId(),
            balancesList: grpcSubaccountInfo
                .getBalancesList()
                .map(IndexerGrpcNinjaTransformer.grpcDenomBalanceToDenomBalance),
        };
    }
    static grpcVaultToVault(grpcVault) {
        if (!grpcVault) {
            return;
        }
        return {
            contractAddress: grpcVault.getContractAddress(),
            codeId: grpcVault.getCodeId(),
            vaultName: grpcVault.getVaultName(),
            marketId: grpcVault.getMarketId(),
            currentTvl: grpcVault.getCurrentTvl(),
            profits: IndexerGrpcNinjaTransformer.grpcProfitsToProfits(grpcVault.getProfits()),
            updatedAt: grpcVault.getUpdatedAt(),
            vaultType: grpcVault.getVaultType(),
            lpTokenPrice: grpcVault.getLpTokenPrice(),
            subaccountInfo: IndexerGrpcNinjaTransformer.grpcVaultSubaccountInfoToVaultSubaccountInfo(grpcVault.getSubaccountInfo()),
            masterContractAddress: grpcVault.getMasterContractAddress(),
            totalLpAmount: grpcVault.getTotalLpAmount(),
            redemptionLockTimeDuration: grpcVault.getRedemptionLockTimeDuration(),
        };
    }
    static grpcPriceSnapShotToPriceSnapShot(grpcPriceSnapshot) {
        return {
            price: grpcPriceSnapshot.getPrice(),
            updatedAt: grpcPriceSnapshot.getUpdatedAt(),
        };
    }
    static grpcSubscriptionToSubscription(grpcSubscription) {
        return {
            vaultInfo: IndexerGrpcNinjaTransformer.grpcVaultToVault(grpcSubscription.getVaultInfo()),
            lpAmount: grpcSubscription.getLpAmount(),
            lpAmountPercentage: grpcSubscription.getLpAmountPercentage(),
            holderAddress: grpcSubscription.getHolderAddress(),
            redemptionLockTime: grpcSubscription.getRedemptionLockTime(),
            lockedAmount: grpcSubscription.getLockedAmount(),
        };
    }
    static grpcHoldersToHolders(grpcHolders) {
        return {
            holderAddress: grpcHolders.getHolderAddress(),
            vaultAddress: grpcHolders.getVaultAddress(),
            amount: grpcHolders.getAmount(),
            updatedAt: grpcHolders.getUpdatedAt(),
            lpAmountPercentage: grpcHolders.getLpAmountPercentage(),
            redemptionLockTime: grpcHolders.getRedemptionLockTime(),
        };
    }
    static grpcPortfolioToPortfolio(grpcPortfolioResponse) {
        return {
            totalValue: grpcPortfolioResponse.getTotalValue(),
            pnl: grpcPortfolioResponse.getPnl(),
            totalValueChartList: grpcPortfolioResponse
                .getTotalValueChartList()
                .map(IndexerGrpcNinjaTransformer.grpcPriceSnapShotToPriceSnapShot),
            pnlChartList: grpcPortfolioResponse
                .getPnlChartList()
                .map(IndexerGrpcNinjaTransformer.grpcPriceSnapShotToPriceSnapShot),
        };
    }
    static grpcLeaderboardEntryToLeaderboardEntry(grpcNinjaLeaderboardEntry) {
        return {
            address: grpcNinjaLeaderboardEntry.getAddress(),
            pnl: grpcNinjaLeaderboardEntry.getPnl(),
        };
    }
    static grpcLeaderboardToLeaderboard(grpcLeaderboardResponse) {
        return {
            entriesList: grpcLeaderboardResponse
                .getEntriesList()
                .map(IndexerGrpcNinjaTransformer.grpcLeaderboardEntryToLeaderboardEntry),
            snapshotBlock: grpcLeaderboardResponse.getSnapshotBlock(),
            updatedAt: grpcLeaderboardResponse.getUpdatedAt(),
        };
    }
}
exports.IndexerGrpcNinjaTransformer = IndexerGrpcNinjaTransformer;
//# sourceMappingURL=IndexerGrpcNinjaTransformer.js.map