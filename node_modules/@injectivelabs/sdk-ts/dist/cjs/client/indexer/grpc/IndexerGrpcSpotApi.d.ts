import { TradeExecutionSide, TradeDirection, TradeExecutionType } from '../../../types/exchange';
import { PaginationOption } from '../../../types/pagination';
import { OrderSide, OrderState } from '@injectivelabs/ts-types';
import { InjectiveSpotExchangeRpc } from '@injectivelabs/indexer-proto-ts';
/**
 * @category Indexer Grpc API
 */
export declare class IndexerGrpcSpotApi {
    protected module: string;
    protected client: InjectiveSpotExchangeRpc.InjectiveSpotExchangeRPCClientImpl;
    constructor(endpoint: string);
    fetchMarkets(params?: {
        baseDenom?: string;
        marketStatus?: string;
        quoteDenom?: string;
    }): Promise<import("../types").SpotMarket[]>;
    fetchMarket(marketId: string): Promise<import("../types").SpotMarket>;
    fetchOrderbook(marketId: string): Promise<import("../types").Orderbook>;
    fetchOrders(params?: {
        marketId?: string;
        marketIds?: string[];
        subaccountId?: string;
        orderSide?: OrderSide;
        isConditional?: boolean;
        pagination?: PaginationOption;
    }): Promise<{
        orders: import("../types").SpotLimitOrder[];
        pagination: import("../../../types/pagination").ExchangePagination;
    }>;
    fetchOrderHistory(params?: {
        subaccountId?: string;
        marketId?: string;
        marketIds?: string[];
        orderTypes?: OrderSide[];
        executionTypes?: TradeExecutionType[];
        direction?: TradeDirection;
        isConditional?: boolean;
        state?: OrderState;
        pagination?: PaginationOption;
    }): Promise<{
        orderHistory: import("../types").SpotOrderHistory[];
        pagination: import("../../../types/pagination").ExchangePagination;
    }>;
    fetchTrades(params?: {
        marketId?: string;
        pagination?: PaginationOption;
        subaccountId?: string;
        executionTypes?: TradeExecutionType[];
        executionSide?: TradeExecutionSide;
        startTime?: number;
        endTime?: number;
        direction?: TradeDirection;
        marketIds?: string[];
    }): Promise<{
        trades: import("../types").SpotTrade[];
        pagination: import("../../../types/pagination").ExchangePagination;
    }>;
    fetchSubaccountOrdersList(params?: {
        subaccountId?: string;
        marketId?: string;
        pagination?: PaginationOption;
    }): Promise<{
        orders: import("../types").SpotLimitOrder[];
        pagination: import("../../../types/pagination").ExchangePagination;
    }>;
    fetchSubaccountTradesList(params?: {
        subaccountId?: string;
        marketId?: string;
        direction?: TradeDirection;
        executionType?: TradeExecutionType;
        pagination?: PaginationOption;
    }): Promise<import("../types").SpotTrade[]>;
    fetchOrderbooks(marketIds: string[]): Promise<{
        marketId: string;
        orderbook: import("../types").Orderbook;
    }[]>;
    fetchOrderbooksV2(marketIds: string[]): Promise<{
        marketId: string;
        orderbook: import("../types").OrderbookWithSequence;
    }[]>;
    fetchOrderbookV2(marketId: string): Promise<import("../types").OrderbookWithSequence>;
}
//# sourceMappingURL=IndexerGrpcSpotApi.d.ts.map