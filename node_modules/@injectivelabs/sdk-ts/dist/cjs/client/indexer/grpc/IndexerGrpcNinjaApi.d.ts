import BaseConsumer from '../../BaseGrpcConsumer';
/**
 * @category Indexer Grpc API
 */
export declare class IndexerGrpcNinjaApi extends BaseConsumer {
    protected module: string;
    fetchVault({ contractAddress, slug, }: {
        contractAddress?: string;
        slug?: string;
    }): Promise<(import("../types").NinjaVault | undefined)[]>;
    fetchVaults({ pageSize, pageIndex, codeId, }: {
        pageSize?: number;
        pageIndex?: number;
        codeId?: number;
    }): Promise<{
        vaults: (import("../types").NinjaVault | undefined)[];
        pagination: {
            total: number;
        };
    }>;
    fetchLpTokenPriceChart({ vaultAddress, from, to, }: {
        vaultAddress: string;
        from?: number;
        to?: number;
    }): Promise<import("../types").NinjaPriceSnapshot[]>;
    fetchTVLChartRequest({ vaultAddress, from, to, }: {
        vaultAddress: string;
        from?: number;
        to?: number;
    }): Promise<import("../types").NinjaPriceSnapshot[]>;
    fetchVaultsByHolderAddress({ pageSize, pageIndex, holderAddress, vaultAddress, }: {
        pageSize?: number;
        pageIndex?: number;
        holderAddress: string;
        vaultAddress?: string;
    }): Promise<import("../types").NinjaSubscription[]>;
    fetchLPHolders({ pageSize, pageIndex, vaultAddress, }: {
        pageSize?: number;
        pageIndex?: number;
        vaultAddress: string;
    }): Promise<import("../types").NinjaHolders[]>;
    fetchHolderPortfolio(holderAddress: string): Promise<import("../types").NinjaPortfolio>;
    fetchLeaderboard(): Promise<import("../types").NinjaLeaderboard>;
}
//# sourceMappingURL=IndexerGrpcNinjaApi.d.ts.map